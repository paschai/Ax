Search.setIndex({"docnames": ["analysis", "ax", "benchmark", "core", "early_stopping", "exceptions", "global_stopping", "index", "metrics", "modelbridge", "models", "plot", "runners", "service", "storage", "telemetry", "utils"], "filenames": ["analysis.rst", "ax.rst", "benchmark.rst", "core.rst", "early_stopping.rst", "exceptions.rst", "global_stopping.rst", "index.rst", "metrics.rst", "modelbridge.rst", "models.rst", "plot.rst", "runners.rst", "service.rst", "storage.rst", "telemetry.rst", "utils.rst"], "titles": ["ax.analysis", "ax", "ax.benchmark", "ax.core", "ax.early_stopping", "ax.exceptions", "ax.global_stopping", "API Reference", "ax.metrics", "ax.modelbridge", "ax.models", "ax.plot", "ax.runners", "ax.service", "ax.storage", "ax.telemetry", "ax.utils"], "terms": {"class": [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], "arg": [0, 1, 2, 3, 9, 10, 12, 14, 16], "kwarg": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14], "sourc": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "base": [0, 1, 3, 5, 7, 8, 12, 13, 14, 15], "protocol": [0, 10, 16], "an": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "i": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16], "given": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16], "either": [0, 1, 3, 9, 10, 13, 14, 15, 16], "experi": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16], "generationstrategi": [0, 1, 2, 3, 9, 13, 14, 15, 16], "both": [0, 1, 3, 9, 10, 11, 13, 14, 16], "can": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16], "comput": [0, 1, 2, 3, 4, 8, 9, 10, 11, 13, 16], "some": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 16], "data": [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 13, 14, 16], "intend": [0, 1, 3, 9, 14], "end": [0, 3, 10, 13, 14, 16], "user": [0, 1, 3, 5, 9, 11, 13, 14, 16], "consumpt": 0, "The": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16], "return": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16], "form": [0, 1, 3, 9, 10, 11, 13, 16], "analysiscard": [0, 14], "which": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16], "contain": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16], "raw": [0, 3, 4, 5, 9, 10, 11, 13], "blob": [0, 14], "process": [0, 1, 2, 3, 4, 5, 9, 10, 12, 13, 14, 16], "miscellan": 0, "metadata": [0, 1, 2, 3, 9, 10, 12, 13, 14, 16], "us": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "render": [0, 7], "card": [0, 14], "collect": [0, 1, 3, 4, 9, 10, 13, 16], "thin": 0, "wrapper": [0, 10, 11, 13, 16], "around": [0, 1, 3, 10, 11, 14], "analys": [0, 5], "impos": 0, "structur": [0, 2, 3, 9, 10, 13, 14, 16], "should": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16], "subclass": [0, 1, 2, 3, 8, 9, 10, 12, 13, 14, 16], "see": [0, 1, 2, 3, 4, 8, 9, 10, 13, 14, 16], "plotlyanalysi": 0, "exampl": [0, 2, 3, 4, 9, 10, 11, 12, 13, 16], "produc": [0, 1, 2, 3, 8, 9, 10, 13, 16], "where": [0, 1, 2, 3, 4, 9, 10, 11, 13, 14, 15, 16], "alwai": [0, 1, 3, 9, 11, 13, 14, 16], "figur": [0, 11, 13], "object": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "A": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16], "good": [0, 1, 3, 9, 16], "pattern": 0, "follow": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 16], "when": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 16], "implement": [0, 1, 2, 3, 4, 9, 10, 12, 13, 14, 16], "your": [0, 1, 3], "own": [0, 2, 9, 11, 13, 14], "configur": [0, 1, 2, 3, 5, 9, 10, 13, 14, 16], "set": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16], "like": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 16], "paramet": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16], "metric": [0, 1, 4, 5, 7, 9, 10, 11, 13, 14], "oper": [0, 1, 3, 10, 13, 14, 16], "whether": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16], "observ": [0, 1, 2, 4, 5, 8, 9, 10, 11, 13, 14, 16], "model": [0, 1, 2, 3, 4, 7, 8, 13, 14], "effect": [0, 1, 3, 8, 9, 14, 16], "__init__": [0, 2, 10, 16], "method": [0, 1, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 16], "consum": [0, 9, 14], "option": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16], "none": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16], "generation_strategi": [0, 1, 2, 5, 9, 13, 14, 15, 16], "name": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 16], "str": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "titl": [0, 11, 16], "subtitl": 0, "level": [0, 1, 2, 3, 9, 10, 11, 13, 16], "analysiscardlevel": 0, "df": [0, 1, 3, 4, 11, 16], "panda": [0, 1, 2, 3, 4, 8, 9, 11, 13, 16], "datafram": [0, 1, 2, 3, 4, 8, 9, 11, 13, 16], "blob_annot": 0, "valu": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16], "enum": [0, 1, 3, 8, 9, 11, 13, 14, 16], "enumer": [0, 1, 3, 8, 11, 13, 14], "critic": 0, "4": [0, 2, 3, 9, 11, 13, 14, 16], "debug": [0, 13], "0": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16], "high": [0, 1, 3, 9, 12, 13], "3": [0, 3, 9, 10, 11, 13, 14, 16], "low": [0, 9, 12], "1": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16], "mid": 0, "2": [0, 1, 3, 4, 8, 9, 10, 11, 12, 13, 14, 16], "markdown_analysi": 0, "markdownanalysi": 0, "paragraph": [0, 16], "format": [0, 1, 4, 7, 8, 9, 10, 11, 13, 15, 16], "text": [0, 11, 14, 16], "markdownanalysiscard": 0, "get_markdown": 0, "plotly_analysi": 0, "plotlyanalysiscard": 0, "get_figur": 0, "graph_object": [0, 11, 13], "healthcheck_analysi": 0, "healthcheckanalysi": 0, "perform": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 16], "health": 0, "check": [0, 1, 2, 3, 4, 6, 9, 10, 12, 13, 16], "healthcheckanalysiscard": 0, "get_statu": 0, "healthcheckstatu": 0, "intenum": [0, 14], "fail": [0, 1, 2, 3, 5, 9, 10, 12, 13, 16], "pass": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 16], "warn": [0, 2, 5, 9, 10, 13, 16], "arm": [1, 2, 4, 6, 8, 9, 10, 11, 13, 14, 16], "dict": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16], "union": [1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 16], "nonetyp": [1, 3, 8, 9, 10, 11, 13, 16], "bool": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "float": [1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "int": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "defin": [1, 2, 3, 5, 8, 9, 10, 13, 14, 16], "random": [1, 3, 7, 8, 11, 13], "assign": [1, 3, 9], "unit": [1, 3, 9, 14, 16], "thu": [1, 3, 9, 16], "encapsul": [1, 3], "parametr": [1, 3, 10], "need": [1, 2, 3, 5, 9, 10, 11, 12, 13, 14, 16], "clone": [1, 2, 3, 8, 9, 16], "clear_nam": [1, 3], "fals": [1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 16], "creat": [1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16], "copi": [1, 2, 3, 8, 9, 13, 14, 16], "thi": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "its": [1, 2, 3, 4, 8, 9, 10, 11, 13, 14, 16], "instead": [1, 2, 3, 9, 10, 11, 13, 16], "being": [1, 2, 3, 8, 9, 10, 11, 13, 15, 16], "default": [1, 2, 3, 4, 8, 9, 10, 11, 13, 14, 16], "properti": [1, 2, 3, 5, 8, 9, 10, 12, 13, 14, 16], "has_nam": [1, 3], "true": [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16], "": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 16], "static": [1, 3, 13, 16], "md5hash": [1, 3], "uniqu": [1, 3, 9, 13, 16], "identifi": [1, 3, 8, 9, 10, 13, 14, 16], "parameter": [1, 2, 3, 8, 9, 10, 11, 13], "map": [1, 2, 3, 4, 7, 10, 11, 12, 13, 14], "param": [1, 3, 8, 9, 10, 11, 12, 13, 16], "hash": [1, 3, 14], "get": [1, 2, 3, 5, 8, 9, 10, 11, 13, 14, 16], "throw": [1, 3, 11, 13, 14, 16], "name_or_short_signatur": [1, 3], "exist": [1, 2, 3, 9, 10, 11, 13, 14, 16], "els": [1, 3, 9, 10, 14, 16], "last": [1, 3, 9, 11, 13, 16], "8": [1, 3, 14, 16], "charact": [1, 3], "present": [1, 2, 3, 4, 9, 10, 11, 13, 14], "candid": [1, 3, 4, 5, 9, 10, 13, 16], "e": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16], "g": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16], "plot": [1, 3, 5, 7, 9, 13], "tabl": [1, 3, 14, 16], "do": [1, 2, 3, 4, 6, 9, 10, 11, 13, 14, 16], "yet": [1, 3, 9, 10, 13], "have": [1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16], "sinc": [1, 2, 3, 4, 9, 12, 13, 14, 16], "ar": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "automat": [1, 3, 4, 9, 10, 11, 12, 14], "upon": [1, 3, 5, 8], "addit": [1, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16], "trial": [1, 2, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16], "from": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16], "signatur": [1, 3, 9, 10, 12, 16], "represent": [1, 3, 9, 10, 13, 14, 16], "batchtrial": [1, 2, 9, 11, 12, 13, 14, 16], "core": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14], "generator_run": [1, 3, 9, 11, 14, 16], "generatorrun": [1, 9, 11, 14, 16], "list": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 16], "trial_typ": [1, 3, 13, 14, 16], "optimize_for_pow": [1, 3, 14], "ttl_second": [1, 3, 13, 14, 16], "index": [1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 16], "lifecycle_stag": [1, 3, 14], "lifecyclestag": [1, 3, 14], "batch": [1, 2, 3, 9, 10, 11, 13, 14, 16], "ha": [1, 2, 3, 4, 5, 9, 10, 11, 13, 14, 15, 16], "multipl": [1, 2, 3, 8, 9, 10, 11, 13, 14, 16], "attach": [1, 2, 3, 8, 11, 13, 14], "meant": [1, 3, 9, 10, 14, 16], "deploi": [1, 2, 3, 12, 13, 16], "evalu": [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 16], "togeth": [1, 3, 4, 9, 10, 11, 13, 16], "possibli": [1, 2, 3], "weight": [1, 3, 8, 9, 10, 11, 13, 14, 16], "measur": [1, 3, 4, 7, 9, 10], "how": [1, 2, 3, 5, 9, 10, 11, 13, 16], "much": [1, 3], "total": [1, 2, 3, 4, 9, 13, 16], "resourc": [1, 3, 4, 13], "alloc": [1, 3], "go": [1, 3, 11, 13], "toward": [1, 3, 13], "specif": [1, 3, 4, 9, 10, 13, 16], "For": [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16], "instanc": [1, 2, 3, 4, 8, 9, 10, 13, 14, 16], "field": [1, 3, 4, 9, 10, 11, 13, 14, 16], "could": [1, 3, 8, 9, 13], "describ": [1, 3, 8, 9, 10, 13], "fraction": [1, 3, 4, 6, 13], "popul": [1, 3, 9, 16], "differ": [1, 2, 3, 5, 6, 9, 10, 11, 12, 13, 16], "treatment": [1, 3], "interpret": [1, 3, 13, 14], "runner": [1, 7, 13, 14, 16], "note": [1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16], "just": [1, 2, 3, 9, 10, 11, 12, 13, 14, 16], "mani": [1, 2, 3, 8, 9, 11, 13, 15, 16], "import": [1, 2, 3, 9, 10, 13, 14, 16], "simultan": [1, 3, 9, 10], "b": [1, 3, 4, 6, 8, 9, 10, 13, 16], "test": [1, 3, 7, 9, 10, 11, 13, 14], "result": [1, 3, 4, 6, 8, 9, 10, 11, 12, 13], "subject": [1, 3], "nonstationar": [1, 3, 13], "case": [1, 2, 3, 4, 5, 9, 10, 13, 16], "separ": [1, 2, 3, 9, 10, 11, 14], "independ": [1, 3, 13, 16], "each": [1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 16], "other": [1, 3, 4, 6, 9, 10, 11, 12, 13, 14, 16], "singl": [1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 16], "associ": [1, 2, 3, 4, 8, 9, 10, 13, 14, 16], "also": [1, 2, 3, 9, 10, 11, 13, 14, 16], "later": [1, 3, 9, 10, 16], "through": [1, 3, 9, 10, 11, 13, 14, 16], "add_arm": [1, 3], "add_generator_run": [1, 3], "gener": [1, 2, 3, 7, 8, 10, 11, 13, 14, 16], "run": [1, 2, 3, 5, 6, 8, 9, 11, 12, 13, 14, 16], "immut": [1, 3, 5, 13, 14, 16], "onc": [1, 2, 3, 8, 9, 13, 14, 16], "cannot": [1, 2, 3, 5, 9, 10, 11, 13], "combin": [1, 3, 8, 9, 10, 11, 13, 16], "argument": [1, 2, 3, 9, 10, 11, 12, 13, 14, 16], "type": [1, 2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16], "multitypeexperi": [1, 9, 14, 16], "optim": [1, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16], "power": [1, 3, 9, 13], "detect": [1, 3, 13, 16], "certain": [1, 3, 4, 9, 14], "size": [1, 2, 3, 10, 11, 13, 14, 16], "possibl": [1, 2, 3, 4, 9, 10, 13, 14, 16], "refer": [1, 2, 3, 8, 9, 10, 11, 13, 16], "document": [1, 3, 8], "set_status_quo_and_optimize_pow": [1, 3], "more": [1, 3, 4, 5, 9, 10, 13, 14, 16], "detail": [1, 2, 3, 8, 9, 10, 13, 16], "If": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 16], "specifi": [1, 2, 3, 4, 8, 9, 10, 11, 13, 14, 16], "consid": [1, 3, 4, 8, 9, 10, 11, 13, 16], "after": [1, 2, 3, 4, 9, 10, 11, 13, 14, 15, 16], "second": [1, 3, 11, 13, 14, 16], "time": [1, 2, 3, 4, 9, 10, 11, 12, 13, 16], "wa": [1, 3, 5, 9, 10, 12, 13, 14, 16], "ran": [1, 2, 3, 13], "unless": [1, 2, 3, 9, 10, 11, 13], "complet": [1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 15, 16], "befor": [1, 2, 3, 4, 6, 9, 10, 11, 13, 16], "dead": [1, 3, 13], "might": [1, 2, 3, 4, 13], "crash": [1, 3], "etc": [1, 2, 3, 4, 9, 10, 13, 16], "live": [1, 3, 10], "accordingli": [1, 3], "determin": [1, 3, 4, 6, 9, 10, 11, 13, 16], "number": [1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 15, 16], "onli": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16], "purpos": [1, 2, 3, 9, 13, 14], "load": [1, 2, 3, 5, 10, 13, 16], "storag": [1, 2, 3, 7, 9, 10, 13, 16], "stage": [1, 3, 13, 16], "lifecycl": [1, 3], "repres": [1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 16], "abandoned_arm_nam": [1, 3], "been": [1, 2, 3, 5, 9, 10, 13], "abandon": [1, 2, 3, 12, 13, 14, 16], "within": [1, 2, 3, 9, 10, 11, 13, 16], "abandoned_arm": [1, 3, 14, 16], "arm_weight": [1, 3], "mutablemap": [1, 3, 9, 16], "These": [1, 2, 3, 9, 10, 11, 12, 13, 14], "construct": [1, 2, 3, 4, 9, 10, 11, 13, 14, 16], "merg": [1, 3, 9, 11], "all": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16], "arms_by_nam": [1, 3, 16], "attach_batch_trial_data": [1, 3], "raw_data": [1, 3, 13], "numpi": [1, 3, 9, 10, 11, 13, 16], "integ": [1, 3, 9, 13, 14, 16], "tupl": [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16], "abc": [1, 2, 3, 4, 6, 8, 9, 10, 13, 14, 16], "hashabl": [1, 3, 13, 16], "sample_s": [1, 3, 13, 16], "outcom": [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16], "sampl": [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 16], "track": [1, 2, 3, 4, 8, 13, 14, 16], "about": [1, 2, 3, 6, 10, 11, 13], "importantli": [1, 3], "start_dat": [1, 3], "end_dat": [1, 3], "complete_tri": [1, 3, 13], "mark": [1, 3, 12, 13, 16], "current": [1, 2, 3, 5, 9, 10, 12, 13, 14, 16], "clone_to": [1, 3], "include_sq": [1, 3, 16], "provid": [1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 16], "belong": [1, 3, 9, 10], "unspecifi": [1, 3, 9, 16], "includ": [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16], "statu": [1, 2, 3, 4, 9, 11, 12, 13, 14, 16], "quo": [1, 3, 9, 11, 13, 16], "new": [1, 2, 3, 5, 8, 9, 10, 11, 13, 14, 16], "generator_run_struct": [1, 3, 14], "batch_trial": [1, 3, 13, 14], "generatorrunstruct": [1, 3, 14], "struct": [1, 3, 11, 13], "hold": [1, 3, 9, 13], "ad": [1, 2, 3, 8, 9, 11, 13, 14, 16], "is_factori": [1, 3], "factori": [1, 2, 3, 5, 7, 10, 13, 14], "design": [1, 2, 3, 4, 8, 9, 10, 11, 13, 16], "link": [1, 3, 9, 16], "factor": [1, 3, 11, 16], "mark_arm_abandon": [1, 3], "arm_nam": [1, 3, 4, 9, 11, 13], "reason": [1, 2, 3, 4, 5, 6, 12, 13, 16], "usual": [1, 3, 4, 9, 13, 16], "done": [1, 3, 4, 9, 11, 13, 16], "deploy": [1, 2, 3, 12, 13, 16], "one": [1, 2, 3, 4, 8, 9, 10, 11, 13, 14, 16], "caus": [1, 3, 16], "issu": [1, 2, 3, 5, 13], "want": [1, 3, 6, 9, 11, 16], "continu": [1, 3, 5, 9, 10, 13, 16], "pend": [1, 2, 3, 9, 10, 13, 16], "point": [1, 2, 3, 4, 5, 7, 9, 10, 11, 14, 16], "avoid": [1, 2, 3, 9, 13, 14, 16], "suggest": [1, 2, 3, 4, 5, 9, 13, 16], "same": [1, 2, 3, 4, 9, 10, 11, 13, 14, 16], "again": [1, 3], "exclud": [1, 3, 11, 16], "train": [1, 3, 4, 8, 9, 10, 16], "fit_abandon": [1, 3, 9], "bridg": [1, 3, 7], "normalized_arm_weight": [1, 3], "trunc_digit": [1, 3], "normal": [1, 3, 4, 8, 9, 10, 11, 14, 16], "we": [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16], "without": [1, 3, 4, 9, 10, 13, 14, 16], "mutat": [1, 3, 9], "probabl": [1, 3, 9, 10], "digit": [1, 3, 8, 13], "keep": [1, 3, 4, 13], "equal": [1, 2, 3, 9, 10, 14], "re": [1, 3, 9, 10, 13, 14], "wai": [1, 2, 3, 5, 13, 14, 16], "maintain": [1, 3, 5, 14], "rel": [1, 3, 9, 11, 13, 16], "best": [1, 2, 3, 7, 9, 10, 11, 16], "accord": [1, 3, 9, 10, 11, 13, 16], "behavior": [1, 3, 8, 9, 10, 13, 14], "run_metadata": [1, 3, 13, 14], "containin": [1, 3], "It": [1, 3, 5, 9, 10, 11, 12, 13, 16], "deployed_nam": [1, 3], "system": [1, 2, 3, 9, 10, 13, 16], "status_quo": [1, 3, 9, 11, 13, 14, 16], "control": [1, 2, 3, 9, 10, 11, 13, 16], "unset_status_quo": [1, 3], "correspond": [1, 2, 3, 8, 9, 10, 11, 13, 14, 16], "choiceparamet": [1, 3, 9, 11, 13, 14, 16], "parameter_typ": [1, 3], "parametertyp": [1, 3, 9, 14], "is_ord": [1, 3, 13], "is_task": [1, 3, 9, 13], "is_fidel": [1, 3, 9, 13], "target_valu": [1, 3, 9, 13, 14], "sort_valu": [1, 3], "depend": [1, 2, 3, 4, 5, 8, 9, 10, 13, 14, 16], "discret": [1, 2, 3, 7, 8, 11, 16], "indic": [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 16], "string": [1, 3, 4, 8, 9, 10, 11, 13, 14, 15, 16], "allow": [1, 2, 3, 8, 9, 10, 12, 13, 14, 16], "categor": [1, 3, 8, 9], "variabl": [1, 3, 9, 11, 14, 16], "longer": [1, 3, 9], "than": [1, 2, 3, 4, 9, 10, 13, 14, 16], "treat": [1, 2, 3, 9, 10, 16], "task": [1, 3, 8, 9, 10, 13, 16], "fidel": [1, 3, 10, 13], "target": [1, 3, 9, 10, 14, 16], "sort": [1, 3, 11], "encod": [1, 3, 5, 9, 10, 16], "hierarch": [1, 2, 3, 9], "search": [1, 2, 3, 5, 7, 9, 10, 11, 12, 13, 14, 16], "space": [1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 16], "add_valu": [1, 3], "add": [1, 2, 3, 8, 10, 11, 13, 14, 16], "input": [1, 3, 5, 9, 10, 11, 13, 14, 16], "cast": [1, 3, 13, 16], "available_flag": [1, 3], "boolean": [1, 2, 3, 4, 6, 9, 10, 11, 13, 16], "attribut": [1, 2, 3, 8, 9, 10, 13, 14, 16], "domain_repr": [1, 3], "domain": [1, 3, 9, 14, 16], "set_valu": [1, 3], "valid": [1, 3, 5, 10, 11, 13, 16], "otherwis": [1, 3, 4, 8, 9, 10, 11, 13, 14, 16], "comparisonop": [1, 3, 14, 16], "comparison": [1, 3, 11, 13, 16], "descript": [1, 2, 3, 10, 13, 14], "store": [1, 2, 3, 5, 9, 10, 11, 13, 14, 16], "numer": [1, 3, 9, 11, 16], "retriev": [1, 2, 3, 8, 9, 10, 13, 14, 16], "via": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 16], "extern": [1, 3, 10, 13, 16], "futur": [1, 3, 5, 10], "attach_data": [1, 3, 8], "requir": [1, 2, 3, 9, 10, 12, 13, 14, 16], "underli": [1, 2, 3, 5, 9, 10, 13, 16], "column": [1, 3, 4, 10, 11, 13, 14, 16], "basedata": [1, 3], "metric_nam": [1, 3, 4, 8, 9, 10, 11, 13, 16], "mean": [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16], "sem": [1, 2, 3, 4, 8, 9, 11, 13, 16], "latter": [1, 2, 3, 9, 13, 16], "two": [1, 3, 4, 8, 9, 10, 11, 13, 14, 16], "must": [1, 2, 3, 5, 9, 10, 11, 13, 14, 16], "human": [1, 3, 13, 16], "readabl": [1, 3, 11, 16], "filter": [1, 3, 9, 10, 11, 16], "trial_indic": [1, 3, 4, 13, 16], "iter": [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16], "subset": [1, 3, 9, 10, 11, 16], "row": [1, 3, 10, 13, 16], "AND": [1, 3], "dimens": [1, 2, 3, 4, 10, 16], "from_multiple_data": [1, 3], "subset_metr": [1, 3, 11], "concaten": [1, 3], "appear": [1, 2, 3, 10, 11, 13, 16], "search_spac": [1, 2, 3, 9, 11, 14, 16], "searchspac": [1, 2, 9, 11, 13, 14, 16], "optimization_config": [1, 2, 3, 9, 10, 13, 14, 16], "optimizationconfig": [1, 2, 9, 10, 13, 14, 16], "tracking_metr": [1, 2, 3], "is_test": [1, 3, 13], "experiment_typ": [1, 3, 13, 15], "ani": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "default_data_typ": [1, 3], "datatyp": [1, 3, 14], "add_tracking_metr": [1, 3, 13], "alreadi": [1, 2, 3, 9, 11, 12, 13, 14], "rais": [1, 3, 5, 9, 10, 11, 13, 14, 16], "error": [1, 2, 3, 5, 9, 10, 11, 13, 14, 16], "don": [1, 3, 13, 14], "t": [1, 2, 3, 4, 5, 9, 10, 11, 13, 14, 16], "them": [1, 2, 3, 4, 9, 10, 13, 16], "arms_by_signatur": [1, 3, 9], "arms_by_signature_for_dedupl": [1, 3, 9], "dedupl": [1, 3, 5, 9, 10], "In": [1, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16], "except": [1, 3, 7, 9, 10, 13, 14, 16], "those": [1, 3, 6, 9, 10, 11, 12, 13, 16], "dure": [1, 2, 3, 5, 6, 9, 10, 13], "so": [1, 2, 3, 6, 9, 10, 11, 13, 14, 16], "thei": [1, 2, 3, 9, 10, 11, 12, 16], "less": [1, 2, 3, 4, 13, 16], "early_stop": [1, 3, 13, 14], "were": [1, 2, 3, 9, 11, 13, 16], "unlik": [1, 3, 14, 16], "combine_with_last_data": [1, 3], "overwrite_existing_data": [1, 3, 8, 13], "_data_by_tri": [1, 3], "look": [1, 3, 8, 9, 13, 14], "up": [1, 3, 5, 9, 10, 12, 13, 14, 16], "lookup_data_for_tri": [1, 3], "By": [1, 3, 9, 10, 11, 13, 14, 16], "timestamp": [1, 3, 4, 8, 16], "most": [1, 3, 9, 13, 14, 16], "recent": [1, 3, 6, 13], "sometim": [1, 3], "howev": [1, 2, 3, 10, 14, 16], "call": [1, 2, 3, 5, 8, 9, 10, 12, 13, 14, 16], "becaus": [1, 2, 3, 5, 9, 10, 13, 14, 16], "rest": [1, 3, 12, 13], "anoth": [1, 3, 5, 9, 10, 11, 13, 16], "To": [1, 3, 9, 10, 13, 16], "achiev": [1, 3, 16], "goal": [1, 3, 9], "take": [1, 2, 3, 9, 10, 11, 13, 14, 16], "previous": [1, 3, 5, 10, 13], "append": [1, 3, 16], "newli": [1, 3, 9, 10, 13], "delet": [1, 3], "old": [1, 3, 14], "afterward": [1, 2, 3, 16], "doe": [1, 2, 3, 9, 10, 11, 12, 13, 14, 16], "ever": [1, 3], "know": [1, 3, 14], "incom": [1, 3], "inform": [1, 2, 3, 5, 8, 9, 10, 12, 13, 14, 15, 16], "replac": [1, 2, 3, 5, 9], "therebi": [1, 3], "reduc": [1, 3, 9, 10, 11, 14], "amount": [1, 2, 3, 9, 16], "databas": [1, 3, 5, 13, 14, 15, 16], "milli": [1, 3], "attach_fetch_result": [1, 3], "metricfetch": [1, 2, 3, 8, 16], "unsaf": [1, 3, 16], "prefer": [1, 3, 14], "directli": [1, 2, 3, 9, 10, 13, 16], "fetch": [1, 2, 3, 8, 11, 13, 14, 16], "kei": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 16], "err": [1, 3, 16], "silent": [1, 2, 3, 16], "drop": [1, 3, 13], "find": [1, 3, 9, 10, 11, 13, 14, 16], "cach": [1, 3, 8, 9, 10], "attempt": [1, 3, 5, 9, 13, 14], "refetch": [1, 3], "you": [1, 3, 5, 9, 10, 14, 16], "resolv": [1, 3, 14], "first": [1, 2, 3, 4, 9, 11, 13, 14, 16], "attach_tri": [1, 3, 13], "properli": [1, 3, 13, 14, 16], "clone_with": [1, 3], "retain": [1, 3, 9], "latest": [1, 3, 9, 12, 13], "would": [1, 2, 3, 4, 9, 13, 14, 16], "access": [1, 3, 10], "common": [1, 2, 3, 5, 7, 8, 10, 14], "api": [1, 3, 9, 13, 16], "lookup_data": [1, 3], "origin": [1, 2, 3, 4, 9, 16], "cloned_experiment_": [1, 3], "prefix": [1, 3], "config": [1, 3, 5, 6, 9, 10, 11, 13, 14, 16], "orign": [1, 3], "main": [1, 3, 8, 9, 11, 13], "dictionari": [1, 2, 3, 4, 7, 9, 10, 11, 12, 13, 14, 16], "completed_tri": [1, 3], "base_tri": [1, 2, 3, 9, 12, 13, 14, 16], "basetri": [1, 2, 6, 8, 12, 13, 14, 16], "arriv": [1, 3], "expect": [1, 3, 4, 6, 9, 10, 12, 13, 16], "data_by_tri": [1, 3], "ordereddict": [1, 3, 10, 14], "millisecond": [1, 3, 16], "order": [1, 2, 3, 4, 5, 9, 10, 11, 13, 14, 15, 16], "default_trial_typ": [1, 3], "fetch_data": [1, 3, 8], "avail": [1, 2, 3, 4, 5, 6, 8, 9, 13, 15, 16], "while": [1, 2, 3, 8, 9, 10, 12, 13, 16], "mai": [1, 2, 3, 5, 8, 9, 10, 12, 13, 16], "is_available_while_run": [1, 3, 8], "lossi": [1, 3], "ex": [1, 3, 9, 14], "mapdata": [1, 4, 8, 9, 13, 14, 16], "implicitli": [1, 3], "lose": [1, 3], "misconfigur": [1, 3, 5], "ones": [1, 2, 3, 9, 10, 11, 16], "keyword": [1, 2, 3, 9, 10, 13, 14, 16], "function": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14], "fetch_data_result": [1, 3], "util": [1, 7, 8], "captur": [1, 3], "metricfetchresult": [1, 3], "along": [1, 3, 9, 10, 11, 13, 16], "messag": [1, 3, 4, 5, 12, 13, 16], "nest": [1, 3, 9, 13, 16], "trial_index": [1, 3, 4, 8, 9, 11, 13, 14, 16], "fetch_trials_data": [1, 3], "whetner": [1, 3], "fetch_trials_data_result": [1, 3], "get_trials_by_indic": [1, 3], "grab": [1, 3, 16], "immutable_search_space_and_opt_config": [1, 3, 13, 14, 16], "mutabl": [1, 3], "improv": [1, 3, 6, 9, 10, 13, 14], "layer": [1, 3, 8], "Not": [1, 3, 9, 10, 16], "disabl": [1, 3, 9, 16], "chang": [1, 3, 8, 9, 10, 11, 13, 14, 16], "necessit": [1, 3], "is_moo_problem": [1, 3], "lookup": [1, 3, 7, 11, 13, 16], "empti": [1, 3, 4, 9, 10, 11, 12, 13], "particular": [1, 3, 9, 10, 11, 13, 16], "omit": [1, 3, 8, 12, 13, 16], "request": [1, 3, 5, 10, 13], "lookup_data_for_t": [1, 3], "known": [1, 2, 3, 9, 10, 13, 16], "metric_config_summary_df": [1, 3], "per": [1, 2, 3, 8, 9, 10, 11, 13, 16], "braninmetr": [1, 3, 8, 14, 16], "minim": [1, 3, 8, 9, 10, 11, 13, 14, 16], "maxim": [1, 3, 9, 10, 11, 13, 16], "constraint": [1, 2, 3, 6, 9, 10, 11, 13, 14], "bound": [1, 2, 3, 9, 10, 11, 12, 13, 16], "10": [1, 2, 3, 4, 9, 11, 13, 14, 16], "part": [1, 2, 3, 9, 10, 11, 12, 13, 16], "objectivethreshold": [1, 3, 9, 11, 13, 14, 16], "outcomeconstraint": [1, 9, 11, 13, 14, 16], "lower": [1, 3, 10, 11, 12, 13, 16], "better": [1, 2, 3, 8, 9, 11, 16], "new_batch_tri": [1, 3], "new_trial": [1, 3, 16], "therefor": [1, 3, 9, 16], "num_abandoned_arm": [1, 3], "num_trial": [1, 2, 3, 4, 9, 13, 16], "remove_tracking_metr": [1, 3, 13], "remov": [1, 3, 5, 9, 13, 14, 16], "reset_runn": [1, 3], "runner_for_tri": [1, 3], "running_trial_indic": [1, 3], "preserv": [1, 3, 9, 14], "modif": [1, 3], "compar": [1, 3, 11, 13, 16], "against": [1, 2, 3, 9, 11, 13, 16], "sum_trial_s": [1, 3], "sum": [1, 3, 10, 14, 16], "supports_trial_typ": [1, 3], "support": [1, 2, 3, 5, 8, 9, 10, 12, 13, 16], "time_cr": [1, 3, 14], "datetim": [1, 3, 11, 14, 16], "creation": [1, 3, 9, 13, 15, 16], "trial_indices_by_statu": [1, 3], "trialstatu": [1, 2, 3, 9, 12, 13, 14, 16], "group": [1, 3, 11, 13], "ttl": [1, 3, 13], "elaps": [1, 3, 13], "found": [1, 3, 5, 8, 9, 11, 13, 16], "past": [1, 3, 6], "trials_by_statu": [1, 3], "trials_expecting_data": [1, 3], "update_tracking_metr": [1, 3], "redefin": [1, 3], "definit": [1, 3, 9, 11, 13, 14], "validate_tri": [1, 3], "valueerror": [1, 3, 5, 9, 10, 13, 16], "warm_start_from_old_experi": [1, 3], "old_experi": [1, 3], "copy_run_metadata_kei": [1, 3], "trial_statuses_to_copi": [1, 3], "search_space_check_membership_raise_error": [1, 3], "expeir": [1, 3, 14], "member": [1, 3, 9, 14], "handl": [1, 2, 3, 9, 10, 12, 13, 14, 16], "transfer": [1, 3, 10], "denot": [1, 3, 10], "item": [1, 3, 9, 10, 13, 14, 16], "over": [1, 2, 3, 6, 9, 10, 13, 16], "run_metadata_report_kei": [1, 3, 12, 13], "warm": [1, 3, 9, 10], "start": [1, 3, 9, 10, 12, 13, 16], "fall": [1, 3, 4, 9, 10, 13, 14], "outsid": [1, 3, 10, 12], "successfulli": [1, 3, 9], "fixedparamet": [1, 3, 9, 14, 16], "fix": [1, 3, 9, 10, 11, 13, 14, 16], "model_predict": [1, 3, 9], "best_arm_predict": [1, 3], "fit_tim": [1, 2, 3, 11], "gen_tim": [1, 2, 3, 11], "model_kei": [1, 3, 9], "model_kwarg": [1, 3, 9, 13], "bridge_kwarg": [1, 3], "gen_metadata": [1, 3, 9, 10], "model_state_after_gen": [1, 3], "generation_step_index": [1, 3, 14], "candidate_metadata_by_arm_signatur": [1, 3], "generation_node_nam": [1, 3], "gen": [1, 3, 9, 10, 11, 16], "previou": [1, 3, 9, 10, 13, 16], "arm_signatur": [1, 3], "match": [1, 3, 9, 10, 12, 13, 16], "respect": [1, 2, 3, 9, 10, 11, 12, 13, 16], "predict": [1, 3, 10, 11, 13, 16], "becam": [1, 3], "deep": [1, 3], "taken": [1, 2, 3, 9, 10, 11], "fit": [1, 2, 3, 4, 9, 10, 11, 13], "generator_run_typ": [1, 3], "covari": [1, 3, 9, 10, 13, 16], "record": [1, 3, 9, 13, 15, 16], "execut": [1, 2, 3, 13, 16], "model_predictions_by_arm": [1, 3], "param_df": [1, 3], "inspect": [1, 3, 9], "content": [1, 3, 13, 16], "pd": [1, 3, 13], "lower_is_bett": [1, 2, 3, 8, 11, 14, 16], "fetch_trial_data": [1, 2, 3, 8, 16], "essenti": [1, 3, 9, 13], "overrid": [1, 3, 8, 9, 11, 13, 14, 16], "minimum": [1, 2, 3, 9, 11, 13, 16], "http": [1, 3, 9, 13, 16], "dev": [1, 3, 9, 13, 16], "_modul": [1, 3], "html": [1, 3, 11, 13, 16], "required_column": [1, 3], "flag": [1, 3, 9, 10, 11, 13, 14], "bulk_fetch_experiment_data": [1, 3, 8], "bulk_fetch_trial_data": [1, 3, 8], "data_constructor": [1, 3, 14], "alia": [1, 3, 9, 10, 11, 14, 16], "fetch_data_prefer_lookup": [1, 3], "fallback": [1, 3, 9, 16], "classmethod": [1, 2, 3, 4, 8, 10, 13, 14, 15, 16], "fetch_experiment_data_multi": [1, 3], "fetch_trial_data_multi": [1, 3], "across": [1, 3, 9, 10, 11, 13, 14, 16], "fetch_multi_group_by_metr": [1, 3], "_metrics_by_class": [1, 3], "superclass": [1, 3, 10], "assum": [1, 2, 3, 8, 9, 10, 11, 13, 16], "never": [1, 3, 8, 9, 16], "whenev": [1, 3, 8, 13], "period_of_new_data_after_trial_complet": [1, 3], "timedelta": [1, 3, 11, 16], "period": [1, 3, 10], "still": [1, 3, 9, 10, 13, 14, 16], "whose": [1, 2, 3, 8, 9, 10, 11, 13, 14], "pipelin": [1, 3], "land": [1, 3], "even": [1, 3, 4, 9, 13, 14, 16], "maximum": [1, 2, 3, 5, 9, 10, 11, 13, 16], "prevent": [1, 3], "Its": [1, 2, 3, 9], "schedul": [1, 2, 3, 7, 12], "anywher": [1, 3], "summary_dict": [1, 3], "registri": [1, 7, 13], "model_key_to_model_setup": [1, 9], "instanti": [1, 2, 7, 9, 10, 11, 14], "simpli": [1, 2, 3, 9, 13], "sobol": [1, 9, 13], "gpei": [1, 9, 13, 16], "constructor": [1, 9, 10, 13, 14, 16], "scrambl": [1, 9, 10], "randommodelbridg": [1, 9], "sobolgener": [1, 9, 10], "multiobject": [1, 3, 9, 11, 14, 16], "extra_kwarg": [1, 3], "compos": [1, 3, 9, 16], "compon": [1, 3, 10, 12, 16], "acquisit": [1, 2, 3, 9, 14, 16], "objective_weight": [1, 3, 9, 10], "multiobjectiveoptimizationconfig": [1, 2, 3, 9, 13, 14, 16], "scalarizedobject": [1, 3, 14], "outcome_constraint": [1, 3, 9, 10, 11, 13, 14, 16], "objective_threshold": [1, 3, 9, 10, 11, 13, 14], "risk_measur": [1, 3, 9, 10, 14, 16], "riskmeasur": [1, 9, 14, 16], "multi": [1, 2, 3, 6, 9, 10, 13, 14], "compris": [1, 3], "threshold": [1, 2, 3, 4, 9, 10, 11, 13, 14], "risk": [1, 3, 9, 10, 13], "There": [1, 3, 10, 13, 16], "individu": [1, 3, 4, 9, 10, 14, 16], "upper": [1, 3, 10, 11, 12, 13, 16], "everi": [1, 2, 3, 9, 10, 11, 13, 14, 16], "rule": [1, 3, 9], "thumb": [1, 3], "below": [1, 3, 4, 9, 10, 13, 16], "accept": [1, 3, 9, 13], "all_constraint": [1, 3], "clone_with_arg": [1, 3], "make": [1, 2, 3, 9, 10, 11, 13, 14, 16], "objective_thresholds_dict": [1, 3], "get_unconstrainable_metr": [1, 3], "incompat": [1, 3], "op": [1, 3, 10, 11, 16], "contribut": [1, 3, 9, 10, 16], "hypervolum": [1, 2, 3, 6, 9, 10, 11, 13], "calcul": [1, 3, 9, 10, 11, 13, 16], "abov": [1, 3, 9, 10, 11, 12], "express": [1, 3], "absolut": [1, 3, 9, 10, 11, 14, 16], "applic": [1, 3, 4, 9, 13, 16], "direct": [1, 3, 8, 10, 11, 13, 16], "infer": [1, 2, 3, 9, 10, 11, 13, 16], "constrain": [1, 3, 16], "scale": [1, 3, 8, 9, 10, 11, 16], "percent": [1, 3, 11, 16], "manual": [1, 3, 13, 15], "overwrit": [1, 3, 9, 13, 14], "greater": [1, 3, 9, 10, 16], "optimizationloop": [1, 13], "evaluation_funct": [1, 8, 13], "callabl": [1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 16], "total_tri": [1, 2, 13], "20": [1, 9, 10, 13, 14, 16], "arms_per_tri": [1, 13, 15], "random_se": [1, 9, 13], "wait_tim": [1, 13], "run_async": [1, 13], "manag": [1, 7, 14, 16], "loop": [1, 2, 3, 7, 9, 10], "overse": [1, 13], "gather": [1, 4, 13, 16], "full_run": [1, 13], "full": [1, 2, 3, 9, 10, 13, 16], "plan": [1, 4, 13, 16], "get_best_point": [1, 13], "obtain": [1, 4, 6, 9, 10, 13, 14, 16], "encount": [1, 3, 13, 16], "cours": [1, 3, 9, 13, 16], "get_current_model": [1, 13], "modelbridg": [1, 2, 3, 4, 7, 10, 11, 13, 14, 16], "run_trial": [1, 3, 13, 16], "step": [1, 3, 4, 5, 9, 13, 14], "with_evaluation_funct": [1, 13], "sequenc": [1, 3, 4, 9, 10, 13], "experiment_nam": [1, 13, 14, 15, 16], "objective_nam": [1, 13], "parameter_constraint": [1, 3, 9, 13, 14], "synchron": [1, 13], "with_runners_and_metr": [1, 13], "path_to_runn": [1, 13], "paths_to_metr": [1, 13], "asynchron": [1, 13, 16], "orderconstraint": [1, 3, 14, 16], "lower_paramet": [1, 3], "upper_paramet": [1, 3], "smaller": [1, 3, 10, 13], "clone_with_transformed_paramet": [1, 3], "transformed_paramet": [1, 3], "transform": [1, 3, 4, 7, 10, 11, 13, 14, 16], "version": [1, 2, 3, 5, 9, 10, 11, 16], "constraint_dict": [1, 3, 14], "linear": [1, 3, 9, 10, 14], "higher": [1, 3, 8, 16], "That": [1, 2, 3, 9, 16], "100": [1, 2, 3, 8, 10, 13, 14, 16], "status_quo_metric_valu": [1, 3], "abstract": [1, 2, 3, 4, 5, 8, 9, 13, 14, 16], "is_valid_typ": [1, 3], "python_typ": [1, 3], "python": [1, 3, 9, 14, 16], "primarili": [1, 3, 9], "unknown": [1, 3, 8, 13], "conform": [1, 3], "parameterconstraint": [1, 9, 13, 14, 16], "satisfi": [1, 3, 6, 9, 10], "sum_i": [1, 3, 9, 10], "w_i": [1, 3, 9], "v_i": [1, 3], "w": [1, 3, 8, 9, 11, 16], "vector": [1, 3, 9, 13, 16], "v": [1, 3, 9, 10, 11, 13, 16], "inequ": [1, 3, 9, 10, 16], "parameter_dict": [1, 3], "rangeparamet": [1, 2, 3, 9, 11, 14, 16], "log_scal": [1, 3, 9, 11, 13], "logit_scal": [1, 3], "rang": [1, 3, 6, 9, 10, 11, 13, 14, 16], "round": [1, 3, 10, 13, 14], "log": [1, 3, 10, 11, 13, 14, 15, 16], "logit": [1, 3, 8, 14], "ensur": [1, 2, 3, 9, 10, 13, 14, 16], "strictli": [1, 3], "update_rang": [1, 3], "left": [1, 3, 4, 10, 11], "tol": [1, 3], "5e": [1, 3], "07": [1, 3], "right": [1, 3, 4, 9, 16], "toler": [1, 3, 13], "custom": [1, 2, 3, 5, 9, 10, 11, 12, 13, 14, 16], "poll_available_capac": [1, 3, 13], "capac": [1, 3, 13, 16], "difficult": [1, 3], "unlimit": [1, 3, 9, 13], "try": [1, 3, 5, 9, 11, 13], "violat": [1, 3, 10, 14], "artifici": [1, 3], "forc": [1, 3, 9, 10, 13, 16], "limit": [1, 3, 4, 9, 10, 11, 13], "place": [1, 3, 9, 11, 13, 16], "scheduleropt": [1, 2, 3, 13, 14, 16], "max_pending_tri": [1, 3, 13, 16], "granular": [1, 3], "max_parallel": [1, 3, 5, 9, 15], "generationstep": [1, 2, 3, 5, 9, 14, 16], "advanc": [1, 2, 3, 9, 10, 16], "poll_except": [1, 3], "poll_trial_statu": [1, 2, 3, 12, 13], "non": [1, 2, 3, 9, 10, 11, 12, 13], "termin": [1, 2, 3, 9, 12, 13], "wait": [1, 2, 3, 5, 12, 13, 16], "between": [1, 2, 3, 6, 9, 10, 11, 12, 13, 16], "poll": [1, 2, 3, 12, 13], "relev": [1, 3, 10, 12, 13, 16], "intern": [1, 3, 9, 12, 16], "impolement": [1, 3, 12], "report": [1, 3, 7, 10, 12], "report_result": [1, 3, 12, 13], "run_multipl": [1, 3], "effici": [1, 3, 10, 13], "overwritten": [1, 3], "staging_requir": [1, 3], "goe": [1, 3], "state": [1, 2, 3, 9, 10, 13, 14, 16], "stop": [1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 16], "why": [1, 3, 12, 13], "restrict": [1, 2, 3, 9, 11, 16], "p_a": [1, 3], "p_b": [1, 3], "cast_arm": [1, 3], "proper": [1, 3, 8, 14, 16], "mismatch": [1, 3], "mostli": [1, 3, 13], "sloppi": [1, 3], "hand": [1, 3], "written": [1, 3], "check_all_parameters_pres": [1, 3], "raise_error": [1, 3], "explan": [1, 3], "check_membership": [1, 3], "check_typ": [1, 3, 16], "allow_non": [1, 3], "construct_arm": [1, 3], "miss": [1, 3, 4, 9, 11, 13], "out_of_design_arm": [1, 3], "out": [1, 2, 3, 9, 10, 11, 13, 16], "convers": [1, 3, 14, 16], "strip": [1, 3, 11], "down": [1, 3, 9, 10, 13, 16], "null": [1, 3, 10, 13], "summary_df": [1, 3], "choic": [1, 3, 9, 11, 13, 14], "sumconstraint": [1, 3, 14, 16], "is_upper_bound": [1, 3], "reconstruct": [1, 3, 14], "appli": [1, 2, 3, 4, 5, 9, 10, 13, 14, 16], "genetor": [1, 3], "get_metric_mean": [1, 3], "objective_mean": [1, 3], "necessarili": [1, 3], "update_trial_data": [1, 3, 13], "updat": [1, 3, 4, 5, 9, 10, 13, 14, 16], "nois": [1, 2, 3, 4, 8, 9, 10, 13], "summar": [1, 3], "validate_data_for_tri": [1, 3], "further": [1, 3, 4], "benchmark_method": [2, 14], "benchmarkmethod": [2, 14, 16], "scheduler_opt": [2, 13, 14], "distribute_repl": 2, "term": [2, 9, 14, 16], "strategi": [2, 3, 7, 10, 13, 14, 16], "tell": [2, 9], "u": [2, 3, 9, 14, 16], "extra": [2, 9, 13], "parallel": [2, 5, 9, 10, 13, 16], "earli": [2, 3, 4, 6, 11, 13, 14, 16], "benchmarkproblem": [2, 14, 16], "former": [2, 16], "reset": [2, 3, 13, 16], "get_benchmark_scheduler_opt": 2, "timeout_hour": [2, 13], "batch_siz": [2, 8, 13, 14, 16], "typic": [2, 3, 4, 8, 9, 10, 12, 13, 16], "regardless": [2, 11, 13, 16], "sequenti": [2, 10, 13, 16], "fulli": [2, 4, 6, 10, 13, 16], "hour": [2, 13], "replic": [2, 13], "benchmark_problem": [2, 14], "observe_noise_std": 2, "has_ground_truth": 2, "benchmarkmetricbas": 2, "optimal_valu": 2, "is_noiseless": [2, 10], "programmat": 2, "_get_nam": 2, "count": [2, 13], "standard": [2, 3, 9, 10, 11, 13, 14, 16], "deviat": [2, 9, 16], "basi": 2, "ground": 2, "truth": [2, 3], "real": [2, 11, 16], "noisi": [2, 7, 9, 10, 13, 16], "convent": [2, 13], "almost": [2, 16], "certainli": 2, "score": [2, 8], "exce": [2, 13], "multiobjectivebenchmarkproblem": [2, 14, 16], "attain": 2, "create_multi_objective_problem_from_botorch": 2, "test_problem_class": 2, "test_funct": 2, "multiobjectivetestproblem": 2, "test_problem_kwarg": [2, 16], "observe_noise_sd": [2, 16], "basetestproblem": [2, 8], "special": [2, 5, 9, 14, 16], "create_single_objective_problem_from_botorch": 2, "synthetictestfunct": [2, 16], "singleobjectiveoptimizationconfig": 2, "noise_std": 2, "benchmark_result": [2, 14], "aggregatedbenchmarkresult": [2, 14, 16], "benchmarkresult": [2, 14, 16], "optimization_trac": 2, "score_trac": 2, "seri": [2, 3, 4, 8, 11, 14, 16], "scalar": [2, 3, 4, 9, 10, 11, 13, 14, 16], "here": [2, 3, 9, 10, 11, 13], "pair": [2, 3, 10, 11], "from_benchmark_result": 2, "aggregr": 2, "variou": [2, 3, 16], "timeout": [2, 13, 14], "aggreg": [2, 9, 11, 16], "trace": [2, 13, 16], "statist": [2, 9, 11], "truncat": [2, 11], "seed": [2, 9, 10, 13, 16], "ndarrai": [2, 3, 4, 8, 9, 10, 11, 16], "experiment_storage_id": 2, "modul": [2, 7, 8, 9, 16], "algorithm": [2, 5, 9, 10, 13], "signific": [2, 6, 13], "surfac": [2, 9, 13], "ml": [2, 8], "assess": [2, 9], "benchmark_multiple_problems_method": 2, "cartesian": 2, "product": [2, 3, 10, 13], "benchmark_one_method_problem": 2, "benchmark_repl": 2, "equival": [2, 13], "compute_score_trac": 2, "num_baseline_tri": 2, "make_ground_truth_metr": 2, "include_tracking_metr": 2, "make_ground_truth_optimization_config": 2, "counterpart": 2, "_create_benchmark_experi": 2, "uncorrupt": 2, "modular_botorch": 2, "get_sobol_botorch_modular_acquisit": 2, "model_cl": 2, "acquisition_cl": 2, "acquisitionfunct": [2, 9, 10, 14, 16], "num_sobol_tri": [2, 16], "5": [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16], "model_gen_kwarg": [2, 9, 10], "mbm": [2, 10, 16], "singletaskgp": [2, 14], "qlognoisyexpectedimprov": [2, 14], "machin": [2, 4, 9, 13, 16], "ultim": [2, 16], "simpl": [2, 10, 12, 15], "sobol_botorch_modular": 2, "optimize_acqf": [2, 10], "batch_method": 2, "model_gen_opt": [2, 9, 10], "optimizer_kwarg": [2, 10, 16], "get_sobol_benchmark_method": [2, 16], "mnetric": 2, "bechmark": 2, "noiseless": [2, 8, 10, 13], "optimzi": 2, "groundtruthmetricmixin": 2, "is_ground_truth": 2, "helper": [2, 3, 4, 9, 11, 13, 16], "trivial": 2, "determinist": [2, 3, 8, 16], "inher": 2, "mixin": [2, 12, 13, 16], "vice": 2, "versa": 2, "get_ground_truth_nam": 2, "get_original_nam": 2, "full_nam": 2, "benchmarkmetr": [2, 14], "outcome_index": 2, "compat": [2, 5, 9, 10, 11, 14, 16], "botorchtestproblemrunn": [2, 8, 14], "surrogaterunn": [2, 14], "groundtruthbenchmarkmetr": [2, 14], "original_metr": 2, "groundtruthjenattonmetr": 2, "jenattonmetr": [2, 14], "jenatton_test_funct": 2, "x1": [2, 12, 16], "x2": [2, 12], "x3": [2, 12, 13], "x4": [2, 12, 13], "x5": [2, 13], "x6": 2, "x7": 2, "r8": 2, "r9": 2, "r": [2, 11, 16], "c": [2, 4, 6, 8, 9, 16], "archambeau": 2, "j": [2, 8, 9, 10, 11, 13, 16], "gonz\u00e1lez": 2, "m": [2, 4, 9, 10, 16], "seeger": 2, "bayesian": [2, 8, 9, 10, 13, 16], "tree": [2, 3, 10, 16], "icml": 2, "2017": 2, "benchmarkproblemregistryentri": 2, "factory_fn": 2, "factory_kwarg": 2, "get_problem": 2, "problem_nam": 2, "additional_kwarg": 2, "hd_embed": 2, "embed_higher_dimens": 2, "tproblem": 2, "total_dimension": 2, "enough": [2, 13], "ident": [2, 9, 14, 16], "asid": [2, 11], "json": [2, 5, 7, 9, 10, 13, 16], "easili": 2, "serial": [2, 3, 9, 10, 13, 14, 15], "moosurrogatebenchmarkproblem": [2, 16], "surrogatebenchmarkproblembas": 2, "lazili": [2, 14], "dataset": [2, 8, 9, 10, 16], "download": [2, 16], "soosurrogatebenchmarkproblem": [2, 16], "extens": [2, 16], "adapt": [2, 9], "daulton2022bopr": 2, "daulton": [2, 10], "x": [2, 3, 4, 8, 9, 10, 11, 13, 16], "wan": 2, "d": [2, 3, 4, 8, 9, 10, 11, 16], "eriksson": [2, 10], "balandat": [2, 10], "osborn": 2, "bakshi": [2, 10], "probabilist": 2, "reparameter": 2, "neural": [2, 10], "35": 2, "2022": 2, "mixed_integ": 2, "get_discrete_acklei": 2, "50": [2, 4, 11], "13d": 2, "acklei": 2, "get_discrete_hartmann": 2, "6d": 2, "hartmann": [2, 16], "get_discrete_rosenbrock": 2, "10d": 2, "rosenbrock": 2, "6": [2, 3, 8, 10, 11, 13, 14, 16], "hss": 2, "get_jenatton_benchmark_problem": 2, "hpo": [2, 14], "pytorch_cnn": [2, 14], "pytorchcnnbenchmarkproblem": 2, "from_dataset": 2, "train_set": 2, "test_set": [2, 16], "pytorchcnnmetr": [2, 14], "pytorchcnnrunn": 2, "cnn": [2, 16], "forward": [2, 4, 8, 9, 13, 16], "tensor": [2, 8, 9, 10, 11, 13, 14, 16], "overridden": [2, 9, 13, 16], "although": [2, 16], "recip": [2, 16], "care": [2, 10, 16], "regist": [2, 9, 14, 16], "hook": [2, 16], "ignor": [2, 3, 4, 9, 10, 11, 13, 16], "train_and_evalu": 2, "lr": [2, 16], "momentum": [2, 16], "weight_decai": [2, 16], "step_siz": 2, "gamma": 2, "pytorchcnntorchvisionbenchmarkproblem": [2, 14], "from_dataset_nam": 2, "pytorchcnntorchvisionrunn": [2, 14], "aid": 2, "save": [2, 3, 4, 5, 9, 10, 13, 16], "reload": [2, 13, 16], "deseri": [2, 14, 16], "deserialize_init_arg": [2, 3, 16], "decoder_registri": [2, 3, 13, 14, 16], "class_decoder_registri": [2, 3, 13, 14, 16], "initi": [2, 3, 9, 10, 13, 14, 16], "serialize_init_arg": [2, 3, 16], "obj": [2, 3, 14, 16], "benchmarkrunn": 2, "get_y_ystd": 2, "torch": [2, 4, 7, 11, 13, 14], "unus": [2, 16], "get_y_tru": 2, "get_noise_std": 2, "outcome_nam": [2, 9, 10, 16], "y": [2, 4, 9, 10, 11, 13, 16], "ystd": 2, "nan": [2, 8, 9, 10, 16], "unobserv": [2, 10], "ys_true": 2, "botorch_test": [2, 14], "modified_bound": 2, "well": [2, 3, 8, 10, 13, 14, 16], "oppos": [2, 9, 16], "stack": [2, 11, 16], "moo": [2, 6, 9, 10, 11], "wish": [2, 11], "recomput": 2, "convert": [2, 3, 8, 9, 10, 11, 13, 14, 16], "modifi": [2, 9, 10, 13, 16], "docstr": [2, 3, 10], "batch_shap": [2, 10], "dim": [2, 3, 9, 10, 16], "test_problem": 2, "torchmodelbridg": [2, 4, 9, 11, 16], "superviseddataset": [2, 9, 10, 16], "get_surrogate_and_dataset": 2, "consist": [2, 9, 13, 14, 16], "gpytorch": [2, 10, 14, 16], "At": [2, 9], "syntheticrunn": [2, 12, 14, 16], "set_surrogate_and_dataset": 2, "sortablebas": [3, 9, 16], "kind": 3, "regular": [3, 13], "arbitrari": [3, 9, 13], "abandoned_reason": [3, 14], "assign_runn": 3, "doesn": [3, 4, 5, 11, 14], "completed_successfulli": 3, "framework": 3, "deriv": [3, 5], "did_not_complet": 3, "failed_reason": [3, 14], "is_abandon": 3, "mark_abandon": 3, "saniti": 3, "transit": [3, 9, 13, 14], "mark_a": 3, "mark_": 3, "mark_complet": 3, "mark_early_stop": 3, "mark_fail": 3, "mark_run": 3, "no_runner_requir": 3, "skip": [3, 4, 9, 13, 14], "presenc": 3, "mark_stag": 3, "experiment": [3, 9, 13, 16], "new_statu": 3, "stop_metadata": [3, 14], "time_complet": [3, 14], "time_run_start": [3, 14], "time_stag": [3, 14], "infinit": [3, 16], "reflect": [3, 9], "update_run_metadata": 3, "update_stop_metadata": 3, "retryabl": [3, 16], "deem": [3, 16], "unpromis": 3, "immedi": 3, "prior": [3, 9, 10, 14], "failur": [3, 5, 13, 16], "transient": 3, "resuggest": [3, 9, 16], "rerun": 3, "action": [3, 9, 13], "poorli": [3, 9], "autom": [3, 5, 8, 9], "bot": 3, "addition": [3, 5, 9], "intermedi": [3, 13, 16], "servic": [3, 7, 14], "get_next_tri": [3, 9, 13], "dispatch": [3, 13, 16], "7": [3, 11, 14, 16], "expecting_data": 3, "is_candid": 3, "is_complet": [3, 9], "is_deploi": 3, "is_early_stop": 3, "is_fail": 3, "is_run": 3, "is_termin": 3, "immutable_once_run": 3, "func": [3, 16], "decor": [3, 9, 10, 13], "abandonedarm": [3, 14, 16], "abandoned_arms_metadata": [3, 14], "add_arms_and_weight": 3, "in_design_arm": 3, "set_status_quo_with_weight": 3, "bakeoff": 3, "explor": [3, 10, 16], "exploration_concurr": 3, "offline_optim": 3, "serializationmixin": [3, 9, 16], "column_data_typ": 3, "end_tim": [3, 9, 16], "frac_nonnul": 3, "float64": [3, 9, 16], "n": [3, 4, 8, 9, 10, 16], "random_split": 3, "start_tim": [3, 16], "extra_column_typ": 3, "excluded_column": 3, "copy_structure_with_df": 3, "tbasedata": 3, "help": [3, 9, 14, 16], "similar": [3, 5, 9, 10, 13, 16], "extract": [3, 8, 9, 10, 11, 13, 14, 16], "df_hash": 3, "md5": 3, "veri": [3, 16], "larg": [3, 9, 14, 16], "from_evalu": 3, "itself": [3, 9, 14, 16], "iso": 3, "work": [3, 9, 11, 12, 13, 16], "enclos": 3, "from_fidelity_evalu": 3, "cl": 3, "from_multipl": 3, "get_filtered_result": 3, "supported_column": 3, "extra_column_nam": 3, "true_df": 3, "clone_without_metr": 3, "excluded_metric_nam": 3, "sanit": 3, "rectangular": 3, "custom_data_class": 3, "time_column": 3, "amend": 3, "set_single_tri": 3, "our": [3, 16], "ivw": [3, 11, 14], "default_data_constructor": 3, "add_arm_and_prevent_naming_collis": 3, "old_trial": 3, "old_experiment_nam": 3, "generation_strategy_interfac": [3, 13], "interfac": [3, 4, 6, 9, 10, 14, 16], "remot": 3, "beta": [3, 16], "pleas": [3, 9], "discuss": 3, "develop": [3, 9], "clone_reset": [3, 9, 10, 16], "gen_for_multiple_trials_with_multiple_model": [3, 9, 16], "num_generator_run": [3, 9, 16], "join": [3, 9, 16], "status": [3, 9, 12, 13, 16], "actual": [3, 5, 9, 12, 13, 16], "output": [3, 8, 9, 10, 13, 16], "pending_observ": [3, 9, 10, 16], "outer": [3, 9, 16], "armweight": 3, "namedtupl": [3, 9, 11, 13, 14, 16], "ty": 3, "generatorruntyp": [3, 14], "extract_arm_predict": 3, "arm_idx": 3, "cov": [3, 9, 10], "map_data": [3, 4, 8, 14], "map_key_info": [3, 8], "mapkeyinfo": [3, 8, 14, 16], "auxiliari": 3, "occur": [3, 4, 5], "element": [3, 4, 8, 9, 10, 13, 16], "simplest": 3, "multifidel": 3, "fidelity_feature_1": 3, "fidelity_feature_n": 3, "map_df": 3, "deduplicate_by_column": 3, "shape": [3, 10], "from_map_evalu": 3, "downcast": 3, "necessari": [3, 9, 13, 14, 16], "fill": [3, 4, 10, 13], "cell": [3, 11, 16], "from_multiple_map_data": 3, "map_key_to_typ": 3, "map_kei": [3, 4, 8, 9, 13], "subsampl": [3, 4], "keep_everi": 3, "limit_rows_per_group": 3, "limit_rows_per_metr": [3, 4], "include_first_last": 3, "manner": [3, 8, 16], "self": [3, 4, 9, 10, 13, 16], "length": [3, 4, 9, 10, 13, 16], "account": [3, 9, 10, 13, 16], "three": [3, 10], "k": [3, 8, 9, 10, 13, 16], "kth": 3, "kept": [3, 16], "word": [3, 9], "largest": [3, 9, 13], "select": [3, 10, 11, 13, 16], "approprio": 3, "appropri": [3, 9, 10, 11, 13, 15, 16], "prioriti": [3, 9, 16], "curv": [3, 4, 7, 13], "nearli": 3, "quantiti": [3, 9, 10], "guidelin": 3, "evenli": 3, "default_valu": 3, "auxilari": 3, "info": [3, 13, 14, 16], "value_typ": [3, 12, 13, 16], "map_metr": [3, 14], "maybe_raise_deprecation_warning_on_class_method": 3, "tb_str": 3, "multi_type_experi": [3, 9, 14], "default_runn": 3, "canon": [3, 9], "tune": [3, 8], "budget": 3, "simul": [3, 7, 9, 10], "approxim": [3, 9, 10, 13, 16], "final": [3, 4, 9, 11, 13, 16], "fed": 3, "tutori": [3, 7, 13], "canonical_nam": 3, "proxi": [3, 13], "add_trial_typ": [3, 16], "default_tri": 3, "indici": [3, 9, 16], "metric_to_trial_typ": 3, "oc": 3, "trial_type_to_runn": 3, "update_runn": 3, "metric_weight": 3, "featur": [3, 4, 9, 10, 13, 14, 16], "observationfeatur": [3, 9, 11, 13, 14, 16], "observationdata": [3, 9], "arrai": [3, 4, 9, 10, 11, 16], "covariance_matrix": 3, "matric": [3, 10], "m1": [3, 9, 10, 13, 16], "m2": [3, 10], "means_dict": 3, "split": [3, 9, 10, 16], "everyth": [3, 10, 16], "replace_paramet": 3, "from_arm": 3, "update_featur": 3, "new_featur": 3, "get_feature_col": 3, "is_map_data": 3, "observations_from_data": 3, "statuses_to_includ": 3, "statuses_to_include_map_metr": 3, "pull": [3, 5], "diagon": 3, "matrix": [3, 10, 13, 16], "observations_from_map_data": 3, "map_keys_as_paramet": 3, "learn": [3, 4, 8, 10, 13, 16], "frequent": 3, "lead": 3, "intract": 3, "recombine_observ": 3, "observation_featur": [3, 9, 16], "observation_data": [3, 9], "separate_observ": 3, "check_objective_thresholds_match_object": 3, "objectives_by_nam": 3, "objective_metr": 3, "wrong": [3, 5, 16], "scalarizedoutcomeconstraint": [3, 14, 16], "len": [3, 10, 13], "cardin": [3, 9], "is_hierarch": 3, "is_numer": 3, "set_digit": 3, "set_log_scal": 3, "set_logit_scal": 3, "validate_constraint_paramet": 3, "basic": [3, 9, 10, 13, 16], "parameter_distribut": [3, 14], "distribution_class": 3, "distribution_paramet": 3, "distribut": [3, 9, 10, 11, 12, 14, 16], "robust": [3, 9, 10, 14], "environment": [3, 9, 14], "rv_frozen": 3, "scipi": [3, 10, 16], "is_environment": 3, "robustsearchspac": [3, 9, 11, 14, 16], "recommend": [3, 6, 10, 16], "modelbridge_util": [3, 9], "py": [3, 9, 10, 14, 16], "risk_measure_name_to_class": 3, "extract_risk_measur": [3, 9], "botorch": [3, 7, 9, 13, 14, 16], "hierarchicalsearchspac": [3, 14, 16], "cast_observation_featur": 3, "under": [3, 9, 10, 11, 13, 16], "full_parameter": [3, 16], "due": [3, 4, 5, 13, 14], "flatten": [3, 9, 15], "flatten_observation_featur": 3, "inject_dummy_values_to_complete_flat_parameter": 3, "use_random_dummy_valu": 3, "inject": [3, 16], "middl": [3, 13], "height": 3, "hierarchical_structure_str": 3, "parameter_names_onli": 3, "show": [3, 9, 10, 11, 13, 16], "concis": 3, "root": [3, 10, 14, 16], "num_sampl": [3, 9, 10, 14, 16], "environmental_vari": 3, "is_environmental_vari": 3, "parameter_nam": [3, 9, 16], "transform_search_spac": [3, 9, 16], "bunch": 3, "parent": [3, 14, 16], "update_paramet": 3, "robustsearchspacedigest": [3, 9], "sample_param_perturb": [3, 9], "sample_environment": [3, 9], "lightweight": [3, 10, 13], "searchspacedigest": [3, 9, 10], "distribution_sampl": [3, 9], "environmental_sampl": [3, 9], "perturb": 3, "add_paramet": 3, "add_parameter_constraint": 3, "is_robust": 3, "range_paramet": 3, "set_parameter_constraint": 3, "tunable_paramet": 3, "validate_membership": 3, "feature_nam": [3, 10, 16], "ordinal_featur": [3, 9], "categorical_featur": [3, 9, 10], "discrete_choic": [3, 9, 10], "task_featur": [3, 9, 10, 16], "fidelity_featur": [3, 9, 10, 16], "robust_digest": 3, "commun": [3, 10], "ephemer": [3, 10], "extract_search_space_digest": [3, 9], "explain": [3, 9], "l_0": 3, "u_0": 3, "l_d": 3, "u_d": 3, "inclus": 3, "ordin": 3, "l_i": [3, 9], "u_i": [3, 9], "carri": 3, "geq": [3, 16], "leq": 3, "merge_model_predict": 3, "predict_append": 3, "tmodelpredict": 3, "mean1": 3, "mean2": 3, "var1": 3, "var2": 3, "other_predict": 3, "validate_evaluation_outcom": 3, "runtim": [3, 8, 12, 16], "suppli": [3, 10, 11, 13, 16], "correct": [3, 14, 16], "validate_fidelity_trial_evalu": 3, "validate_floatlik": 3, "floatlik": 3, "validate_map_dict": 3, "map_dict": 3, "validate_map_trial_evalu": 3, "validate_param_valu": 3, "param_valu": 3, "validate_parameter": 3, "validate_single_metric_data": 3, "validate_trial_evalu": 3, "missingmetr": 3, "best_feasible_object": 3, "feasibl": [3, 6, 9, 10, 11], "cumul": [3, 13], "extend_pending_observ": 3, "extend": [3, 9, 11, 16], "extract_pending_observ": 3, "include_out_of_design_point": 3, "get_pending_observation_featur": 3, "fewer": [3, 13], "get_pending_observation_features_based_on_trial_statu": 3, "faster": [3, 16], "guarante": [3, 13], "accur": 3, "assumpt": [3, 9, 11, 13, 14, 16], "instruct": 3, "get_missing_metr": 3, "observatin": 3, "missing_object": 3, "missing_outcome_constraint": 3, "get_missing_metrics_by_nam": 3, "missing_metr": 3, "entri": [3, 9, 10, 16], "get_model_tim": 3, "spent": [3, 9], "get_model_trace_of_tim": 3, "seek": [3, 9], "among": [3, 6, 10, 11], "happen": [3, 9, 13, 14, 16], "analogu": [3, 14], "speed": [3, 9, 10, 16], "entail": [3, 13], "No": 3, "formatting_util": 3, "data_and_evaluations_from_raw_data": 3, "data_typ": 3, "unavail": 3, "eventu": [3, 9], "raw_data_to_evalu": 3, "ttrialevalu": 3, "tmaptrialevalu": 3, "batchedtri": 3, "baseearlystoppingstrategi": [4, 6, 13, 16], "seconds_between_pol": 4, "300": [4, 11], "min_progress": 4, "max_progress": 4, "min_curv": 4, "trial_indices_to_ignor": 4, "normalize_progress": 4, "heurist": [4, 9, 10, 13], "halt": [4, 13, 16], "is_elig": 4, "elig": 4, "reach": [4, 5, 13], "hasn": 4, "surpass": 4, "_check_validity_and_get_data": 4, "though": [4, 10, 13, 14], "secondari": [4, 11], "shouldn": 4, "decis": [4, 6, 11, 13], "progress": [4, 8, 9, 11, 13], "ineligibl": 4, "is_eligible_ani": 4, "least": [4, 9, 10, 13], "situat": [4, 16], "costli": 4, "should_stop_trials_earli": [4, 13, 16], "decid": [4, 6, 16], "conclud": [4, 13, 16], "contextu": [4, 6, 10, 14, 16], "earlystoppingtrainingdata": 4, "yvar": [4, 10, 16], "dataclass": [4, 10], "relat": [4, 5, 13, 14], "understand": [4, 11], "come": [4, 9, 13], "modelbasedearlystoppingstrategi": 4, "min_progression_model": 4, "get_training_data": [4, 9], "max_training_s": 4, "untransform": [4, 9, 16], "trail": [4, 13], "get_transform_helper_model": 4, "maptorchmodelbridg": [4, 9], "cont_x_tran": 4, "andearlystoppingstrategi": [4, 14, 16], "logicalearlystoppingstrategi": [4, 14], "orearlystoppingstrategi": [4, 14, 16], "from_early_stopping_strategi": 4, "percentil": [4, 9, 10, 13, 14], "percentile_threshold": 4, "bottom": [4, 9, 11], "metric_threshold": 4, "pre": [4, 9, 10, 13, 16], "align_partial_result": 4, "progr_kei": 4, "interpol": 4, "slinear": 4, "do_forward_fil": 4, "align": 4, "partial": [4, 6, 8, 9, 13], "heterogen": 4, "long": [4, 9, 13, 14], "area": 4, "insid": [4, 9], "forward_fil": 4, "suppos": 4, "task_1": 4, "task_2": 4, "solut": [4, 14], "estimate_early_stopping_sav": [4, 13], "estim": [4, 9, 10, 11, 13, 16], "benchmark": [4, 7, 14], "resource_sav": 4, "actual_resource_usag": 4, "usag": [4, 13, 14], "11": [4, 13, 14], "axerror": [5, 13], "hint": [5, 13], "guidanc": 5, "remedi": 5, "axparameterwarn": 5, "axwarn": 5, "concern": 5, "setup": [5, 9, 13, 16], "axstoragewarn": 5, "datarequirederror": [5, 9], "distinguish": [5, 9], "until": [5, 9, 13], "experimentnotfounderror": 5, "objectnotfounderror": 5, "experimentnotreadyerror": 5, "exposures_unavail": 5, "queri": [5, 14], "immatur": 5, "incompatibledependencyvers": 5, "imcompat": 5, "instal": 5, "metricdatanotreadyerror": 5, "finish": 5, "misconfiguredexperi": 5, "incomplet": [5, 10, 13], "incorrect": 5, "nodataerror": 5, "code": [5, 10, 16], "backward": [5, 9, 11, 14, 16], "inherit": [5, 9, 14, 16], "optimizationcomplet": 5, "hit": 5, "searchspaceexhaust": 5, "generationstrategycomplet": 5, "optimizationshouldstop": 5, "global": [5, 6, 13, 14, 16], "unsupportederror": 5, "unsupport": [5, 9, 16], "made": [5, 9, 10, 13], "seem": [5, 9], "notimplementederror": [5, 13], "nie": 5, "offici": 5, "intent": [5, 13, 14], "perman": 5, "lack": 5, "todo": [5, 9, 10, 13, 14], "unsupportedploterror": 5, "userinputerror": 5, "invalid": 5, "data_provid": 5, "dataprovidererror": 5, "data_provider_error": 5, "dataprovid": 5, "section": 5, "friendli": [5, 16], "missingdataerror": 5, "missing_trial_index": 5, "axgenerationexcept": 5, "generationstrategymisconfiguredexcept": 5, "error_info": 5, "generationstrategyrepeatedpoint": [5, 9], "repeatedli": [5, 13], "maxparallelismreachedexcept": 5, "model_nam": [5, 9], "num_run": [5, 16], "step_index": 5, "node_nam": [5, 9], "optimizationconfigrequir": 5, "cvnotsupportederror": 5, "cross": [5, 10, 11], "modelerror": 5, "immutabilityerror": 5, "incorrectdbconfigurationerror": 5, "engin": [5, 10, 14], "session": [5, 14], "incorrectli": 5, "connect": [5, 11, 14], "jsondecodeerror": 5, "decod": [5, 16], "jsonencodeerror": 5, "sqadecodeerror": [5, 14], "sqa": [5, 14, 16], "sqaencodeerror": 5, "baseglobalstoppingstrategi": [6, 13, 16], "min_trial": [6, 16], "inactive_when_pending_tri": 6, "overal": [6, 13], "optimz": [6, 10], "altogeth": 6, "margin": [6, 9, 10, 16], "gain": 6, "justifi": 6, "cost": [6, 10], "should_stop_optim": 6, "declar": [6, 12], "window_s": 6, "improvement_bar": 6, "interquartil": 6, "iqr": [6, 11], "seen": [6, 9], "far": [6, 9, 13], "ago": 6, "constraint_satisfact": 6, "iff": [6, 9, 16], "ax": 7, "constant": [7, 9], "problem": [7, 9, 10, 11, 13, 14], "branin": [7, 14], "chemistri": [7, 14], "hartmann6": [7, 14, 16], "jenatton": [7, 14], "l2": 7, "norm": [7, 10], "sklearn": [7, 14], "tensorboard": 7, "torchx": 7, "singlerunningtrialmixin": 7, "synthet": [7, 14], "backend": [7, 8], "client": 7, "interact": [7, 11], "identif": 7, "withdbsettingsbas": 7, "earlystop": 7, "sqlalchemi": [7, 13], "mysql": 7, "sqlite": 7, "telemetri": 7, "flake8": 7, "plugin": 7, "notebook": [7, 9, 11], "sensit": [7, 9, 11, 13], "stat": [7, 9], "page": 7, "botorch_test_problem": 8, "botorchtestproblemmetr": [8, 14], "noise_sd": [8, 16], "retriv": 8, "augmentedbraninmetr": [8, 14, 16], "param_nam": [8, 9, 11, 16], "noisyfunctionmetr": [8, 14], "f": [8, 9, 10, 11, 16], "negativebraninmetr": [8, 14], "branin_map": [8, 14], "braninfidelitymapmetr": 8, "noisyfunctionmapmetr": [8, 16], "branintimestampmapmetr": [8, 14, 16], "rate": [8, 13, 16], "cache_evalu": [8, 16], "interv": [8, 9, 10, 11, 13, 14, 16], "yield": [8, 9], "chemic": 8, "reaction": 8, "perera2018": 8, "perera": 8, "tucker": 8, "brahmbhatt": 8, "helal": 8, "chong": 8, "farrel": 8, "p": [8, 9, 10, 11], "richardson": 8, "sach": 8, "platform": 8, "nanomol": 8, "screen": 8, "micromol": 8, "synthesi": 8, "flow": 8, "scienc": 8, "26": [8, 14], "2018": 8, "shields2021": 8, "shield": 8, "steven": 8, "li": 8, "et": [8, 16], "al": [8, 16], "tool": 8, "natur": [8, 9], "590": 8, "89": 8, "96": [8, 10], "2021": [8, 10, 16], "suzuki": 8, "involv": [8, 9, 10, 11], "solvent": 8, "ligand": 8, "miyaura": 8, "coupl": [8, 9, 12, 14], "carbon": 8, "bond": 8, "_": [8, 16], "direct_aryl": 8, "temperatur": 8, "concentr": 8, "aryl": 8, "chemistrydata": 8, "objective_dict": 8, "tparamvalu": [8, 13], "chemistrymetr": [8, 14], "problem_typ": 8, "chemistryproblemtyp": [8, 14], "tabul": 8, "sume": 8, "gaussian": [8, 9, 10, 13], "job": [8, 12, 13], "abstractcurvemetr": 8, "curve_nam": 8, "cumulative_best": 8, "smoothing_window": 8, "mapmetr": [8, 13, 14], "get_curves_from_id": 8, "id": [8, 14, 16], "slow": [8, 16], "loss": [8, 16], "training_row": 8, "200": [8, 10], "get_df_from_curve_seri": 8, "all_curve_seri": 8, "trial_idx_to_id": 8, "get_ids_from_tri": 8, "dict_lookup": [8, 14], "dictlookupmetr": [8, 14, 16], "lookup_dict": 8, "mean_sd": 8, "factorialmetr": [8, 14, 16], "coeffici": [8, 9, 10, 13, 16], "10000": [8, 9, 10, 16], "noise_var": 8, "augmentedhartmann6metr": [8, 14, 16], "hartmann6metr": [8, 14, 16], "l2norm": [8, 14], "l2normmetr": [8, 14], "noisy_funct": [8, 14], "genericnoisyfunctionmetr": 8, "noisy_function_map": 8, "sklearndataset": [8, 14], "boston": 8, "cancer": 8, "sklearnmetr": [8, 14], "model_typ": 8, "sklearnmodeltyp": [8, 14], "rf": 8, "observed_nois": 8, "num_fold": 8, "fold": [8, 9, 10], "classif": [8, 16], "regress": [8, 13], "hidden_layer_s": 8, "hidden": 8, "num_hidden_lay": 8, "nn": [8, 14, 16], "train_ev": 8, "averag": [8, 9, 16], "cv": [8, 9, 11], "se": [8, 11, 16], "tensorboardmetr": 8, "tag": [8, 16], "smooth": 8, "torchxmetr": 8, "appmetr": 8, "app": 8, "tracker": [8, 12], "fsspecresulttrack": 8, "tracker_bas": [8, 12], "mean_valu": 8, "sem_valu": 8, "generation_nod": [9, 14], "generationnod": [9, 14, 16], "generationstrategyinterfac": [9, 13, 16], "enabl": [9, 10, 14], "throughout": [9, 13], "subsequ": [9, 13], "trials_per_model": 9, "conceptu": 9, "graph": [9, 11, 16], "transitioncriterion": [9, 14, 16], "edg": 9, "flexibl": [9, 14], "notabl": 9, "current_generator_run_limit": 9, "move": [9, 13], "next": [9, 13], "safe": [9, 13], "pick": [9, 10], "Then": [9, 13], "now": [9, 10, 16], "becom": [9, 10], "current_nod": 9, "current_node_nam": 9, "current_step": 9, "current_step_index": 9, "newer": [9, 16], "propag": [9, 10], "compli": 9, "ensembl": 9, "inner": 9, "gen_with_multiple_nod": 9, "arms_per_nod": 9, "is_node_bas": 9, "logic": [9, 10, 13, 14, 16], "last_generator_run": 9, "model_transit": [9, 11], "deprec": [9, 10, 14, 16], "optimization_complet": 9, "trials_as_df": 9, "put": [9, 10, 13, 16], "frame": [9, 11], "easi": [9, 15], "view": [9, 16], "0_0": [9, 11], "9": [9, 11, 14], "17": [9, 14], "uses_non_registered_model": 9, "step_based_gs_onli": 9, "mainli": [9, 10, 16], "older": [9, 16], "model_spec": [9, 14], "best_model_selector": [9, 14], "bestmodelselector": [9, 14], "should_dedupl": 9, "transition_criteria": 9, "capabl": 9, "spec": [9, 11, 12, 14], "hood": 9, "propos": [9, 13], "reject": [9, 10], "discard": [9, 16], "entir": [9, 14, 16], "converg": 9, "condit": [9, 10, 16], "met": 9, "is_met": 9, "evaluatetru": 9, "realli": 9, "simplifi": 9, "focu": [9, 11], "local": [9, 12, 16], "preced": 9, "max_gen_draws_for_dedupl": 9, "_gen": 9, "duplic": [9, 10, 14, 16], "backpoint": 9, "generator_run_limit": 9, "raise_generation_error": 9, "trialbasedcriterion": [9, 14, 16], "model_spec_to_gen_from": 9, "_model_spec_to_gen_from": 9, "_pick_fitted_model_to_gen_from": 9, "model_to_gen_from_nam": 9, "node_that_generated_last_gr": 9, "should_transition_to_next_nod": 9, "raise_data_required_error": 9, "reli": [9, 11], "transition_criterion": [9, 14, 16], "primari": [9, 11, 13, 16], "criterion": [9, 13, 14], "transitioncriteria": 9, "transition_edg": 9, "maxtrial": [9, 14], "mintrial": [9, 14], "trials_from_nod": 9, "modelregistrybas": [9, 13, 14], "completion_criteria": 9, "min_trials_observ": 9, "use_upd": 9, "enforce_num_tri": 9, "One": [9, 11, 13], "what": [9, 10, 13, 14, 16], "proce": [9, 13], "resum": [9, 13, 14], "interrupt": [9, 13, 14], "min_trials_": 9, "maxparallelismreach": 9, "enforc": [9, 13], "exceed": [9, 13], "num_": 9, "delai": 9, "proceed": 9, "get_sobol": 9, "snapshot": [9, 13], "reassign": 9, "external_generation_nod": 9, "externalgenerationnod": 9, "leverag": 9, "update_generator_st": 9, "get_next_candid": 9, "standalon": [9, 16], "larger": [9, 10, 13, 16], "myexternalgenerationnod": 9, "ax_client": [9, 13], "axclient": [9, 13], "create_experi": [9, 13], "surrog": [9, 14, 16], "predictor": 9, "defer": [9, 14], "pending_paramet": 9, "often": [9, 10], "date": [9, 16], "automodul": 9, "undoc": 9, "sampler": [9, 16], "gp": [9, 10, 11, 13], "ei": 9, "thompson": [9, 16], "reinstanti": [9, 14], "get_model_from_generator_run": 9, "instrument": [9, 14], "__call__": 9, "modelsetup": 9, "model_bridge_class": 9, "model_class": [9, 14, 16], "view_default": 9, "eas": 9, "environ": [9, 13, 16], "view_kwarg": 9, "annot": 9, "bridge_class": 9, "default_model_kwarg": 9, "standard_bridge_kwarg": 9, "not_saved_model_kwarg": 9, "quasirandom": 9, "botorch_modular": [9, 14, 16], "bo_mix": 9, "context_sacbo": 9, "contextual_sacbo": 9, "empirical_bayes_thompson": 9, "eb": 9, "fullybayesian": 9, "fullybayesianmoo": 9, "fullybayesianmoo_mtgp": 9, "fullybayesian_mtgp": 9, "legacy_botorch": 9, "saasbo": 9, "saas_mtgp": 9, "st_mtgp": 9, "st_mtgp_legaci": 9, "st_mtgp_nehvi": 9, "uniform": [9, 12, 16], "models_enum": [9, 13], "after_gen": 9, "rather": [9, 14, 16], "recreat": [9, 13, 14], "TO": 9, "default_ehvi_batch_limit": 9, "composit": 9, "abl": [9, 13], "deleg": [9, 12], "get_gpei": 9, "dtype": [9, 10, 16], "devic": [9, 10, 13, 16], "cpu": 9, "get_botorch": 9, "removefix": [9, 14], "orderedchoicetointegerrang": [9, 14], "onehot": [9, 14], "inttofloat": [9, 14], "unitx": [9, 14], "standardize_i": [9, 14], "standardizei": [9, 14], "transform_config": 9, "winsorization_config": [9, 14], "winsorizationconfig": [9, 10, 14, 16], "model_constructor": [9, 10], "get_and_fit_model": [9, 10], "model_predictor": [9, 10], "predict_from_model": [9, 10], "acqf_constructor": [9, 10], "botorch_default": 9, "tacqfconstructor": [9, 10], "get_qlognei": [9, 10], "acqf_optim": [9, 10], "scipy_optim": [9, 10], "refit_on_cv": [9, 10], "botorchmodel": [9, 10, 14, 16], "get_empirical_bayes_thompson": 9, "min_weight": [9, 10], "uniform_weight": [9, 10], "discretemodelbridg": 9, "empir": [9, 10, 16], "bay": [9, 10, 16], "get_factori": 9, "init_posit": [9, 10], "fallback_to_sample_polytop": [9, 10], "quasi": [9, 13], "get_thompson": 9, "get_uniform": 9, "uniformgener": [9, 10], "factoryfunctionmodelspec": 9, "model_enum": 9, "model_cv_kwarg": 9, "_fitted_model": 9, "_cv_result": 9, "cvresult": [9, 11], "_diagnost": 9, "cvdiagnost": 9, "_last_cv_kwarg": 9, "_last_fit_arg_id": 9, "factory_funct": 9, "tmodelfactori": 9, "alongsid": [9, 13], "singleton": [9, 10], "cross_valid": [9, 10, 11], "compute_diagnost": [9, 10], "diagnost": [9, 10], "cv_result": [9, 11], "fitted_model": 9, "assert": [9, 16], "fixed_featur": [9, 10, 11, 13, 16], "modelspecjsonencod": 9, "skipkei": 9, "ensure_ascii": 9, "check_circular": 9, "allow_nan": 9, "sort_kei": 9, "indent": 9, "jsonencod": 9, "__repr__": 9, "o": [9, 10], "serializ": [9, 14], "typeerror": 9, "def": [9, 10, 12, 13, 16], "let": 9, "basegenarg": 9, "genresult": 9, "best_observation_featur": 9, "status_quo_nam": [9, 11, 16], "status_quo_featur": 9, "fit_out_of_design": [9, 10], "fit_tracking_metr": 9, "fit_on_init": 9, "sent": 9, "receiv": [9, 10, 13, 16], "cv_training_data": 9, "cv_test_point": 9, "use_posterior_predict": [9, 10], "posterior": [9, 10, 11, 13, 16], "feature_import": [9, 10, 11, 13], "approach": [9, 10], "analysi": [9, 11, 13, 14], "invers": [9, 16], "lengthscal": [9, 10, 13], "torchoptconfig": [9, 10], "model_spac": 9, "othweris": 9, "metric1": [9, 11], "metric2": 9, "status_quo_data_by_tri": 9, "statuses_to_fit": 9, "statuses_to_fit_map_metr": 9, "training_in_design": 9, "transform_observation_featur": [9, 16], "transform_observ": 9, "new_data": 9, "scratch": [9, 10], "clamp_observation_featur": 9, "gen_arm": 9, "unwrap_observation_data": 9, "discretemodel": [9, 10], "pure": [9, 16], "randommodel": [9, 10], "awkward": 9, "init": [9, 13, 14], "torchmodel": [9, 10], "torch_dtyp": 9, "torch_devic": [9, 13], "default_model_gen_opt": 9, "evaluate_acquisition_funct": [9, 10], "acq_opt": [9, 10], "joint": [9, 10], "contruct": [9, 10], "infer_objective_threshold": [9, 10], "pareto": [9, 10, 13], "frontier": [9, 10, 11, 13], "nadir": [9, 10, 11, 13], "back": [9, 10, 11, 13, 14], "model_best_point": 9, "validate_optimization_config": 9, "pairwisemodelbridg": 9, "map_torch": 9, "map_data_limit_rows_per_metr": 9, "map_data_limit_rows_per_group": 9, "parameters_with_map_kei": 9, "array_to_observation_data": 9, "check_has_multi_objective_and_data": 9, "extract_objective_threshold": 9, "Will": [9, 11], "extract_objective_weight": 9, "give": [9, 10, 16], "multipli": [9, 10], "extract_outcome_constraint": 9, "extract_parameter_constraint": 9, "riskmeasuremcobject": [9, 10], "extract_robust_digest": 9, "digest": 9, "regard": 9, "choicetonumericchoic": [9, 14], "feasible_hypervolum": 9, "get_fixed_featur": 9, "reformat": 9, "get_fixed_features_from_experi": 9, "get_pareto_frontier_and_config": 9, "modelbridge_modul": [9, 16], "trefpoint": 9, "use_model_predict": [9, 13], "frontier_evalu": [9, 10], "front": [9, 11, 13, 16], "region": [9, 11], "interest": [9, 11, 13], "four": 9, "frontier_observ": 9, "obj_w": 9, "obj_t": 9, "selected_metr": 9, "observation_data_to_arrai": 9, "observation_features_to_arrai": 9, "obsf": 9, "observed_hypervolum": 9, "hyperrectangl": [9, 10], "observed_pareto_fronti": 9, "pareto_fronti": [9, 10, 11], "descend": [9, 14, 16], "parse_observation_featur": 9, "candidate_metadata": [9, 10], "np": 9, "pending_observations_as_array_list": 9, "predicted_hypervolum": 9, "predicted_pareto_fronti": 9, "lie": [9, 10, 11], "process_contextual_dataset": 9, "parameter_decomposit": 9, "metric_decomposit": 9, "contextualdataset": 9, "context": [9, 10, 11, 13, 16], "context1": [9, 10], "p1_c1": [9, 10], "p2_c1": [9, 10], "context2": [9, 10], "p1_c2": [9, 10], "p2_c2": [9, 10], "breakdown": 9, "m1_c1": 9, "m2_c1": 9, "m3_c1": 9, "m1_c2": 9, "m2_c2": 9, "m3_c2": 9, "transform_callback": 9, "closur": [9, 10], "trip": [9, 10], "de": 9, "revers": [9, 11, 14, 16], "_model_gen": 9, "roundtrip": 9, "validate_and_apply_final_transform": 9, "linear_constraint": [9, 10], "final_transform": 9, "built": [9, 14], "prediction_util": 9, "predict_at_point": 9, "scalarized_metric_config": [9, 11], "agg": [9, 11], "metric1_c1": [9, 11], "metric1_c2": [9, 11], "predict_by_featur": 9, "label_to_feature_dict": 9, "label": [9, 10, 11, 13, 14], "assessmodelfitresult": 9, "good_fit_metrics_to_fisher_scor": 9, "bad_fit_metrics_to_fisher_scor": 9, "assess_model_fit": 9, "significance_level": 9, "bad": 9, "fisher": [9, 11], "exact": [9, 10, 11, 13, 16], "ci": [9, 11], "width": [9, 11, 16], "mape": 9, "percentag": [9, 11, 16], "wmape": 9, "smallest": [9, 13], "max": [9, 10, 13, 16], "min": [9, 10, 16], "correl": 9, "pearson": 9, "rank": [9, 16], "spearman": 9, "half": 9, "top": [9, 10], "abil": 9, "chanc": 9, "too": 9, "compute_model_fit_metrics_from_modelbridg": 9, "model_bridg": [9, 16], "fit_metrics_dict": [9, 16], "model_fit_stat": [9, 16], "modelfitmetricprotocol": [9, 16], "diagnos": 9, "calcualt": 9, "imaginari": 9, "automl": 9, "expens": [9, 11], "hyper": [9, 13], "model_fit_dict": 9, "exp": [9, 13, 16], "coefficient_of_determin": [9, 13, 16], "test_selector": 9, "repeat": [9, 11, 13, 16], "lambda": 9, "ob": 9, "leav": [9, 10, 16], "qualiti": 9, "invert": [9, 10], "logi": [9, 14], "outlier": 9, "reconsid": 9, "cross_validate_by_tri": 9, "launch": 9, "get_fit_and_std_quality_and_generalization_dict": 9, "fitted_model_bridg": 9, "analyt": [9, 14, 16], "has_good_opt_config_model_fit": 9, "assess_model_fit_result": 9, "criteria": [9, 13, 14], "incl": 9, "best_model": 9, "reductioncriterion": [9, 14], "singlediagnosticbestmodelselector": [9, 14], "functool": 9, "metric_aggreg": 9, "choos": [9, 10, 11, 13], "dispatch_util": 9, "calculate_num_initialization_tri": 9, "num_tunable_paramet": 9, "use_batch_tri": 9, "5th": 9, "twice": [9, 10, 13], "tunabl": [9, 10], "choose_generation_strategi": [9, 13], "enforce_sequential_optim": [9, 13], "no_winsor": 9, "derelativize_with_raw_status_quo": 9, "no_bayesian_optim": 9, "num_initialization_tri": [9, 15], "num_completed_initialization_tri": 9, "max_initialization_tri": 9, "min_sobol_trials_observ": 9, "max_parallelism_cap": 9, "max_parallelism_overrid": 9, "use_saasbo": 9, "verbos": [9, 14, 16], "disable_progbar": 9, "jit_compil": 9, "suggested_model_overrid": 9, "bayesopt": [9, 13], "pytorch": [9, 10, 16], "ehvi": 9, "sped": 9, "gpu": 9, "explicit": [9, 14], "upper_quantile_margin": [9, 10], "lower_quantile_margin": [9, 10], "unset": [9, 13], "randomli": [9, 16], "cap": [9, 16], "initialization_tri": 9, "ceil": 9, "hard": [9, 16], "overload": 9, "chosen": [9, 13], "Be": 9, "awar": 9, "saa": 9, "bar": [9, 11, 12, 13], "disable_probar": 9, "jit": 9, "compil": 9, "pyro": 9, "_experi": [9, 16], "tconfig": [9, 16], "potenti": [9, 10, 16], "noth": [9, 10, 16], "effort": 9, "transform_optimization_config": [9, 16], "privat": [9, 16], "_transform_search_spac": [9, 16], "_transform_parameter_distribut": [9, 16], "untransform_observation_featur": [9, 16], "untransform_observ": 9, "untransform_outcome_constraint": 9, "portion": 9, "searh": 9, "transform_": 9, "untransform_": 9, "capparamet": [9, 14], "new_upper_range_valu": 9, "centeredunitx": 9, "target_lb": 9, "target_rang": 9, "choiceencod": [9, 14], "deprecatedtransformmixin": 9, "unord": [9, 16], "n_choic": 9, "onto": [9, 10, 12, 13], "taskchoicetointtaskchoic": [9, 14], "orderedchoiceencod": [9, 14], "contigu": [9, 16], "transform_choice_valu": 9, "rescal": 9, "convertmetricnam": [9, 14], "offlin": [9, 16], "onlin": [9, 16], "turn": 9, "off": [9, 10, 11, 13], "perform_untransform": 9, "convert_mt_observ": 9, "mt": 9, "tconfig_from_mt_experi": 9, "plug": [9, 16], "use_raw_status_quo": 9, "intrangetochoic": [9, 14], "randomized_round": 9, "min_choic": 9, "varianc": [9, 10, 13, 16], "ivw_metric_merg": 9, "obsd": 9, "conflicting_noiseless": [9, 16], "correctli": [9, 10, 14], "ybar1": 9, "y_i": [9, 16], "ybar2": 9, "sum_j": 9, "w_j": 9, "y_j": 9, "infin": 9, "inversegaussiancdfi": 9, "base_modelbridg": 9, "cdf": 9, "match_ci_width": 9, "procedur": 9, "delta": [9, 16], "lognorm_to_norm": 9, "mu_ln": 9, "cov_ln": 9, "mvn": 9, "mu_n": 9, "cov_n": 9, "cov_n_": 9, "ij": 9, "cov_ln_": 9, "mu_ln_": 9, "mu_n_": 9, "ii": 9, "95": [9, 10, 11], "norm_to_lognorm": 9, "suffici": 9, "jj": 9, "mapunitx": [9, 14], "undergo": 9, "mergerepeatedmeasur": [9, 14], "intention": 9, "stationar": 9, "metricsastask": [9, 14], "metric_task_map": 9, "metric3": 9, "hot": [9, 10], "strict": 9, "With": [9, 10, 13, 16], "restor": [9, 10, 13, 14, 16], "ti": [9, 14], "broken": 9, "onehotencod": 9, "inverse_transform": 9, "encoded_label": 9, "transorm": 9, "percentilei": 9, "powertransformi": [9, 14], "yeo": 9, "johnson": 9, "www": [9, 16], "umn": 9, "edu": 9, "arc": 9, "yjpower": 9, "pdf": 9, "posit": [9, 10, 11, 13, 16], "neg": [9, 10, 11, 13, 16], "quit": 9, "sens": [9, 13, 16], "bit": 9, "remain": [9, 10, 13, 14, 16], "clip": 9, "imag": 9, "clip_mean": 9, "contains_constrained_integ": 9, "transform_paramet": 9, "randomized_onehot_round": 9, "zero": [9, 13, 16], "randomized_round_paramet": 9, "strict_onehot_round": 9, "searchspacetochoic": [9, 14], "thompsonsampl": [9, 10], "use_ord": 9, "compute_standardization_paramet": 9, "defaultdict": 9, "std": [9, 16], "stratifiedstandardizei": [9, 14], "stratifi": 9, "exactli": [9, 12, 13, 14], "stratif": 9, "taskencod": [9, 14], "timeasfeatur": [9, 14], "durat": 9, "cube": 9, "revis": 9, "trialastask": [9, 14], "trial_param1": 9, "level1": 9, "level2": 9, "trial_level_map": 9, "lowest": 9, "target_tri": 9, "l": 9, "x_tilde_i": 9, "x_i": 9, "wtx": 9, "gtx_tild": 9, "h": 9, "g_i": 9, "wtl": 9, "closestlookupdict": 9, "closest": 9, "construct_new_search_spac": 9, "derelativize_optimization_config_with_raw_status_quo": 9, "get_data": [9, 16], "raise_on_non_finite_data": 9, "finit": 9, "inf": 9, "match_ci_width_trunc": 9, "001": [9, 16], "lower_bound": 9, "upper_bound": 9, "lai": 9, "succe": 9, "30": 9, "wherea": [9, 14], "metric_1": [9, 11], "metric_2": [9, 11], "won": [9, 13], "cutoff": 9, "auto_wins_quantil": 9, "quantil": [9, 10], "boundari": 9, "lower_boundari": [9, 10], "upper_boundari": [9, 10], "discourag": [9, 16], "strongli": 9, "encourag": 9, "baserelativ": 9, "opt": 9, "control_as_const": [9, 16], "relativizewithconstantcontrol": [9, 14], "missing_status_quo_error": 9, "opt_config": 9, "unrelativ": [9, 16], "statstool": 9, "best_point": [10, 13], "vari": [10, 13], "share": [10, 13], "deserialize_st": 10, "serialized_st": 10, "serialize_st": 10, "raw_stat": 10, "_get_stat": 10, "readi": [10, 11, 13], "file": [10, 13, 14], "parameter_valu": 10, "xs_train": 10, "ys_train": 10, "yvars_train": 10, "x_test": 10, "k_i": 10, "feature_index": 10, "torchgenresult": 10, "search_space_digest": 10, "torch_opt_config": 10, "compactli": 10, "th": [10, 11, 13], "rounding_func": 10, "opt_config_metr": 10, "is_moo": 10, "domin": [10, 16], "dimension": [10, 15, 16], "commonli": [10, 16], "mimic": 10, "num_restart": [10, 16], "batch_limit": 10, "maxit": 10, "torchmodellik": 10, "stand": 10, "add_fixed_featur": 10, "tunable_point": 10, "tunable_feature_indic": 10, "as_arrai": 10, "mix": 10, "best_in_sample_point": 10, "posterior_objective_mean": 10, "baselin": [10, 13, 16], "prob": 10, "best_point_method": 10, "max_util": 10, "feasible_threshold": 10, "utility_baselin": 10, "probability_threshold": 10, "feasibility_mc_sampl": 10, "mc": [10, 16], "10k": 10, "best_observed_point": 10, "check_dupl": 10, "check_param_constraint": 10, "enumerate_discrete_combin": 10, "filter_constraints_and_fixed_featur": 10, "get_observ": [10, 16], "mk_discrete_choic": 10, "ssd": 10, "rejection_sampl": 10, "gen_unconstrain": 10, "max_draw": 10, "existing_point": 10, "unconstrain": 10, "_gen_unconstrain": 10, "attemp": 10, "draw": [10, 11], "validate_bound": 10, "fixed_feature_indic": 10, "winsor": [10, 14], "increas": [10, 13, 16], "decreas": [10, 11, 16], "80th": 10, "lesser": 10, "unaffect": 10, "empiricalbayesthompsonsampl": 10, "jame": [10, 16], "stein": [10, 16], "fullfactorialgener": 10, "max_cardin": 10, "check_cardin": 10, "suppress": [10, 13, 16], "proport": [10, 16], "winner": 10, "mont": [10, 16], "carlo": [10, 16], "generated_point": 10, "skeleton": 10, "As": 10, "_gen_sampl": 10, "altern": 10, "hitandrunpolytopesampl": 10, "permut": 10, "sobolengin": 10, "init_engin": 10, "n_tunable_featur": 10, "best_point_recommend": 10, "recommend_best_observed_point": 10, "warm_start_refit": [10, 16], "use_input_warp": 10, "use_loocv_pseudo_likelihood": 10, "customiz": 10, "qlognei": 10, "refit": [10, 13], "covar_module_prior": 10, "lengthscale_prior": 10, "gammaprior": [10, 14, 16], "lkjcovarianceprior": 10, "sd_prior": 10, "nonneg": 10, "task_covar_prior": 10, "eta": 10, "lkj": 10, "state_dict": [10, 16], "x_observ": 10, "x_pend": 10, "acq_funct": 10, "craft": 10, "inequality_constraint": 10, "equality_constraint": 10, "callback": [10, 13], "target_fidel": 10, "get_feature_importances_from_botorch_model": 10, "modulelist": 10, "get_rounding_func": 10, "get_nei": 10, "qnei": 10, "get_qei": 10, "get_acqf": 10, "acquisition_function_nam": 10, "path": [10, 13, 14, 16], "solv": 10, "wrap": [10, 16], "qei": 10, "acqf": 10, "monte_carlo": [10, 14], "qexpectedimprov": [10, 14], "refit_model": 10, "multitask_gp_rank": 10, "gpytorchmodel": 10, "modellistgp": [10, 14], "statement": [10, 13], "line": [10, 11, 14, 16], "137": 10, "modular": 10, "_get_model": 10, "bodi": [10, 16], "legaci": 10, "get_qlogei": 10, "qlogei": 10, "get_warping_transform": 10, "warp": [10, 14], "recommend_best_out_of_sample_point": 10, "un": [10, 11], "raw_sampl": [10, 16], "joint_optim": 10, "adpat": 10, "rh": 10, "knowledgegradi": 10, "cost_intercept": [10, 16], "linear_trunc": 10, "knowledg": 10, "gradient": [10, 11, 16], "shot": 10, "intercept": 10, "affin": 10, "downsampl": [10, 16], "exponenti": [10, 13], "decai": 10, "lineartruncatedfidelitykernel": 10, "maxvalueentropysearch": 10, "entropi": [10, 16], "multiobjectivebotorchmodel": 10, "get_qlognehvi": 10, "pareto_frontier_evalu": 10, "sign": [10, 11, 16], "daulton2020qehvi": 10, "differenti": 10, "33": 10, "2020": 10, "daulton2021nehvi": 10, "34": [10, 16], "ament2023logei": 10, "ament": 10, "unexpect": [10, 16], "36": 10, "2023": 10, "get_ehvi": 10, "mc_sampl": 10, "128": [10, 11, 16], "alpha": [10, 11], "qexpectedhypervolumeimprov": [10, 14], "acqusit": 10, "submit": [10, 12], "512": 10, "hyperparamet": 10, "partit": [10, 16], "complex": [10, 16], "get_nehvi": 10, "prune_baselin": 10, "marginalize_dim": 10, "cache_root": 10, "qnoisyexpectedhypervolumeimprov": [10, 14], "prune": 10, "nei": 10, "get_qlogehvi": 10, "qlogexpectedhypervolumeimprov": [10, 14], "qlognoisyexpectedhypervolumeimprov": [10, 14], "get_weighted_mc_objective_and_objective_threshold": 10, "multi_object": [10, 14, 16], "weightedmcmultioutputobject": 10, "subset_idc": 10, "relativ": [10, 11, 14, 16], "infer_reference_point": [10, 11], "matter": [10, 16], "scipy_optimizer_list": 10, "acq_function_list": 10, "adaptor": 10, "ith": 10, "acquisition_funct": 10, "botorch_acqf_class": 10, "directori": [10, 16], "subcompon": 10, "acquistitionfunct": 10, "default_botorch_acqf_class": 10, "compute_model_depend": 10, "super": 10, "multifidelityknowledgegradi": 10, "q": 10, "broadcast": 10, "get_botorch_objective_and_transform": 10, "mcacquisitionobject": 10, "posteriortransform": 10, "optimizer_opt": 10, "post": 10, "post_processing_func": 10, "max_featur": 10, "sqrt": 10, "num_tre": 10, "500": 10, "forest": 10, "bootstrap": [10, 16], "uncertainti": [10, 16], "breiman": 10, "surrogate_spec": 10, "surrogatespec": [10, 14, 16], "acquisition_class": 10, "acquisition_opt": 10, "conveni": [10, 13], "auto": 10, "liu": 10, "sole": 10, "reoptim": 10, "refit_on_": 10, "n_i": 10, "accessor": 10, "unchang": [10, 16], "additional_model_input": 10, "caveat": 10, "modellist": 10, "base_kernel": 10, "only_surrog": [10, 16], "outcomes_by_surrogate_label": 10, "output_ord": 10, "stitch": 10, "locat": [10, 16], "predict_from_surrog": 10, "surrogate_label": 10, "botorch_model_class": 10, "botorch_model_kwarg": 10, "mll_class": 10, "mll": [10, 14, 16], "marginal_log_likelihood": [10, 14, 16], "marginalloglikelihood": [10, 14, 16], "exact_marginal_log_likelihood": [10, 14], "exactmarginalloglikelihood": [10, 14], "mll_kwarg": 10, "covar_module_class": 10, "covar_module_kwarg": 10, "likelihood_class": 10, "likelihood": [10, 14], "likelihood_kwarg": 10, "input_transform_class": 10, "inputtransform": [10, 14, 16], "input_transform_opt": 10, "outcome_transform_class": 10, "outcometransform": [10, 14, 16], "outcome_transform_opt": 10, "allow_batched_model": 10, "respons": [10, 13], "requisit": 10, "single_surrogate_onli": 10, "l1_norm_func": 10, "init_point": 10, "l1_norm": 10, "l1": 10, "genericdeterministicmodel": 10, "seboacquisit": [10, 14, 16], "sparsiti": 10, "free": 10, "l0": 10, "novel": 10, "relax": 10, "homotopi": 10, "clamp_candid": 10, "target_point": 10, "clamp_tol": 10, "tkwarg": [10, 16], "clamp": 10, "get_batch_initial_condit": 10, "x_pareto": 10, "model_opt": 10, "mll_option": 10, "covar_module_opt": 10, "likelihood_opt": 10, "chain": 10, "chainedoutcometransform": [10, 14], "chainedinputtransform": [10, 14, 16], "integer_indic": 10, "pars": [10, 11, 13], "covar_module_argpars": 10, "best_out_of_sample_point": 10, "seed_inn": [10, 16], "qmc": [10, 16], "acqf_valu": 10, "1d": 10, "0d": 10, "und": 10, "some_state_dict": 10, "construct_input": 10, "training_data": 10, "check_outcome_dataset_match": 10, "exact_match": 10, "choose_botorch_acqf_class": 10, "choose_model_class": 10, "construct_acquisition_and_optimizer_opt": 10, "acqf_opt": 10, "convert_to_block_design": 10, "fit_botorch_model": 10, "get_post_processing_func": 10, "get_subset_dataset": 10, "subset_outcome_nam": 10, "subset_state_dict": 10, "submodel_index": 10, "submodel": 10, "use_model_list": 10, "scalematernkernel": [10, 14], "ard_num_dim": 10, "outputscale_prior": 10, "lengthscale_constraint": 10, "outputscale_constraint": 10, "scalekernel": 10, "temporalkernel": 10, "temporal_featur": 10, "matern_ard_num_dim": 10, "temporal_lengthscale_prior": 10, "period_length_prior": 10, "fixed_period_length": 10, "temporal_lengthscale_constraint": 10, "period_length_constraint": 10, "matern": [10, 16], "tempor": 10, "dai": 10, "lceabo": 10, "decomposit": 10, "cat_feature_dict": 10, "embs_feature_dict": 10, "context_weight_dict": 10, "embs_dim_list": 10, "gp_model_arg": 10, "latent": 10, "embed": 10, "lce": 10, "train_embed": 10, "boolen": 10, "embds_feature_dict": 10, "fidelity_model_id": 10, "lceagp": [10, 14], "get_map_model": 10, "train_x": 10, "train_i": 10, "train_yvar": 10, "lcembo": 10, "context_cat_featur": 10, "context_emb_featur": 10, "modelistgp": 10, "lcem": 10, "sacbo": 10, "sacgp": 10, "structuraladditivecontextualgp": 10, "generate_model_space_decomposit": 10, "subsetmodeldata": 10, "acquisitionobject": 10, "get_out_of_sample_best_point_acqf": 10, "normalize_indic": 10, "pick_best_out_of_sample_point_acqf_class": 10, "gaussianmixtureposterior": 10, "mixtur": 10, "ideal": 10, "randomize_objective_weight": 10, "random_scalarization_distribut": 10, "simplex": 10, "hyperspher": 10, "subset_model": [10, 16], "subset_output": 10, "tensor_callable_to_array_cal": 10, "tensor_func": 10, "plot_config_to_html": 11, "plot_config": [11, 16], "axplotconfig": [11, 13, 16], "plot_module_nam": 11, "plot_resourc": 11, "axplottyp": 11, "generic_plotli": 11, "inject_help": [11, 16], "plot_typ": 11, "_axplotconfigbas": 11, "bandit_rollout": 11, "interact_contour": [11, 13], "interact_slic": 11, "plotdata": 11, "in_sampl": 11, "plotinsamplearm": 11, "out_of_sampl": 11, "plotoutofsamplearm": 11, "y_hat": 11, "se_hat": 11, "context_stratum": 11, "plotmetr": 11, "pred": 11, "plot_bandit_rollout": 11, "generator_runs_dict": 11, "densiti": [11, 16], "slice_valu": 11, "parameters_to_us": 11, "val": [11, 14, 16], "mode": [11, 16], "interact_contour_plotli": 11, "plotli": [11, 13, 16], "graph_obj": 11, "plot_contour": 11, "param_x": [11, 13, 16], "param_i": [11, 13, 16], "axi": [11, 13], "plot_contour_plotli": 11, "short_nam": 11, "plot_feature_import": 11, "plot_feature_importance_plotli": 11, "plot_feature_importance_by_featur": [11, 16], "sensitivity_valu": [11, 16], "caption": 11, "importance_measur": 11, "label_dict": 11, "plot_feature_importance_by_feature_plotli": 11, "shown": [11, 16], "color": 11, "parameter1": 11, "value1": 11, "parameter2": 11, "value2": 11, "var": [11, 16], "short": [11, 14], "plot_feature_importance_by_metr": 11, "plot_feature_importance_by_metric_plotli": 11, "plot_relative_feature_import": 11, "plot_relative_feature_importance_plotli": 11, "chart": [11, 13], "marginal_effect": [11, 16], "plot_marginal_effect": 11, "awai": 11, "interact_batch_comparison": 11, "batch_x": 11, "batch_i": 11, "x_label": 11, "y_label": 11, "dropdown": 11, "bach": 11, "interact_cross_valid": 11, "show_context": 11, "autoset_axis_limit": 11, "hover": 11, "shorten": 11, "interact_cross_validation_plotli": 11, "interact_empirical_model_valid": 11, "tile_cross_valid": 11, "show_arm_details_on_hov": 11, "tile": 11, "include_measurement_error": 11, "measurement_error": 11, "displai": [11, 13], "interact_multiple_pareto_fronti": 11, "frontier_list": 11, "pareto_util": 11, "paretofrontierresult": 11, "ci_level": 11, "show_parameterization_on_hov": 11, "namedparetofrontierresult": 11, "confid": 11, "aeplotconfig": 11, "interact_pareto_fronti": 11, "plot_multiple_pareto_fronti": 11, "plot_pareto_fronti": 11, "scatter_plot_with_hypervolume_trace_plotli": 11, "scheme": 11, "expand": [11, 16], "stall": 11, "scatter_plot_with_pareto_fronti": 11, "y_pareto": 11, "metric_x": 11, "metric_i": 11, "reference_point": [11, 13], "scatter_plot_with_pareto_frontier_plotli": 11, "hovertext": 11, "star": 11, "project": [11, 16], "param_dict": 11, "primary_metr": 11, "secondary_metr": 11, "absolute_metr": 11, "wrt": 11, "NOT": [11, 12, 16], "compute_posterior_pareto_fronti": 11, "primary_object": 11, "secondary_object": 11, "num_point": 11, "trade": 11, "get_observed_pareto_fronti": 11, "plu": 11, "get_tensor_converter_model": 11, "thing": [11, 16], "beyond": 11, "infer_reference_point_from_experi": 11, "forth": 11, "to_nonrobust_search_spac": 11, "interact_fit": 11, "show_ci": 11, "arm_noun": 11, "data_selector": 11, "noun": 11, "interact_fitted_plotli": 11, "lattice_multiple_metr": 11, "plot_fit": [11, 16], "custom_arm_ord": 11, "custom_arm_order_nam": 11, "plot_multiple_metr": 11, "rel_x": 11, "rel_i": 11, "color_paramet": 11, "color_metr": 11, "plot_objective_vs_constraint": 11, "infer_relative_constraint": 11, "tradeoff": [11, 13], "insampl": 11, "read": [11, 14], "tile_fit": 11, "tile_observ": 11, "interact_slice_plotli": 11, "plot_slic": [11, 13], "plot_slice_plotli": 11, "table_view": 11, "get_color": 11, "table_view_plot": 11, "use_empirical_bay": 11, "only_data_fram": 11, "0_1": 11, "compute_running_feasible_optimum_df": 11, "exp_df": 11, "metric_colnam": 11, "is_feasible_colnam": 11, "optimum": 11, "get_running_trials_per_minut": 11, "show_until_latest_end_plus_timedelta": 11, "map_data_multiple_metrics_dropdown_plotli": 11, "xs_by_metr": 11, "ys_by_metr": 11, "legend_labels_by_metr": 11, "stopping_markers_by_metr": 11, "xlabels_by_metr": 11, "lower_is_better_by_metr": 11, "opac": 11, "75": 11, "color_map": 11, "viridi": 11, "button": 11, "reveal": 11, "legend": 11, "marker": 11, "xlabel": 11, "map_data_single_trace_scatt": 11, "legend_label": 11, "ylabel": 11, "plot_stopping_mark": 11, "trace_color": 11, "177": 11, "211": 11, "visibl": 11, "red": 11, "mean_markers_scatt": 11, "marker_color": 11, "190": 11, "186": 11, "218": 11, "hover_label": 11, "errorbar": 11, "rgb": 11, "light": 11, "purpl": 11, "mean_trace_scatt": 11, "blue": 11, "optimization_tim": 11, "wall": 11, "optimization_trace_all_method": 11, "y_dict": 11, "251": 11, "114": 11, "188": 11, "189": 11, "253": 11, "180": 11, "98": 11, "141": 11, "199": 11, "optimum_color": 11, "band": 11, "orang": 11, "optimization_trace_single_method": 11, "generator_change_color": 11, "optimization_direct": 11, "passthrough": 11, "plot_trial_point": 11, "trial_points_color": 11, "teal": 11, "optimization_trace_single_method_plotli": 11, "optimum_objective_scatt": 11, "num_iter": 11, "plot_objective_value_vs_trial_index": 11, "hover_data_colnam": 11, "is_feas": 11, "generation_method": [11, 13], "sem_range_scatt": 11, "parallel_coordin": 11, "plot_parallel_coordin": 11, "ignored_nam": 11, "trial_statu": [11, 13], "parellel": 11, "plot_parallel_coordinates_plotli": 11, "prepare_experiment_for_plot": 11, "desir": [11, 13, 16], "ingest": 11, "coral": 11, "light_purpl": 11, "pink": 11, "steelblu": 11, "plotly_color_scal": 11, "list_of_rgb_tupl": 11, "break": 11, "stringifi": 11, "rgba": 11, "rgb_tupl": 11, "arm_name_to_sort_kei": 11, "suitabl": 11, "1_10": 11, "1_2": 11, "10_0": 11, "arm_name_to_tupl": 11, "axis_rang": 11, "grid": [11, 16], "is_log": 11, "build_filter_tri": 11, "keep_trial_indic": 11, "compose_annot": 11, "15": [11, 14], "contour_config_to_trac": 11, "extend_rang": 11, "meaning": 11, "get_fixed_valu": 11, "get_grid_for_paramet": 11, "get_plot_data": 11, "rawdata": 11, "get_range_paramet": [11, 16], "min_num_valu": 11, "get_range_parameters_from_list": 11, "infer_is_rel": 11, "non_constraint_rel": 11, "default_rel": 11, "m_t": [11, 16], "sem_t": 11, "m_c": [11, 16], "sem_c": [11, 16], "relativize_data": [11, 16], "sd": 11, "arm_data": 11, "resize_subtitl": 11, "arr": 11, "slice_config_to_trac": 11, "arm_name_to_paramet": 11, "fit_data": 11, "setx": 11, "single_running_trial_mixin": 12, "dummy_metadata": 12, "dummi": [12, 16], "act": 12, "shell": 12, "simulated_backend": 12, "simulatedbackendrunn": 12, "backendsimul": [12, 16], "sample_runtime_func": 12, "queu": [12, 16], "sample_runtime_unif": 12, "torchxrunn": 12, "appdef": 12, "component_const_param": 12, "cfg": 12, "submiss": 12, "trial_idx": 12, "url": [12, 14], "dir": 12, "trainer_compon": 12, "breviti": 12, "And": 12, "s3": 12, "foo": 12, "barbaz": 12, "get_runn": 12, "kill": 12, "db_set": 13, "verbose_log": [13, 16], "suppress_storage_error": 13, "early_stopping_strategi": [13, 16], "global_stopping_strategi": 13, "bestpointmixin": 13, "instantiationbas": 13, "handler": [13, 14, 16], "cycl": 13, "soon": [13, 16], "tparameter": 13, "shortcut": 13, "intellig": 13, "sqa_stor": 13, "dbset": [13, 14], "switch": 13, "prescrib": 13, "reproduc": 13, "diverg": 13, "degre": 13, "thread": 13, "event": [13, 14, 15], "sql": [13, 14], "db": [13, 16], "abandon_tri": 13, "metric_definit": 13, "corrupt": 13, "my_object": 13, "objective_mean_valu": 13, "owner": 13, "objectiveproperti": 13, "overwrite_existing_experi": 13, "tracking_metric_nam": [13, 16], "choose_generation_strategy_kwarg": 13, "support_intermediate_data": 13, "3a": 13, "3b": 13, "3c": 13, "restart": 13, "protect": 13, "earlystoppingconfig": 13, "fit_model": 13, "node": [13, 14, 16], "rare": 13, "indirectli": 13, "from_json_snapshot": 13, "axclientsubclass": 13, "get_best_tri": 13, "tri": [13, 16], "tmodelpredictarm": 13, "metric_name_1": 13, "metric_name_2": 13, "cov_1_2": 13, "get_contour_plot": 13, "contour": 13, "affix": 13, "get_current_trial_generation_limit": 13, "procud": 13, "exhaust": [13, 16], "get_feature_import": 13, "get_hypervolum": 13, "get_max_parallel": 13, "profit": 13, "significantli": [13, 16], "few": 13, "doc": [13, 16], "simulten": 13, "max_parallelism_set": 13, "12": [13, 14, 16], "get_model_predict": [13, 16], "include_out_of_sampl": 13, "get_model_predictions_for_parameter": 13, "fixedfeatur": 13, "bypass": 13, "anywai": 13, "max_trial": 13, "get_optimization_trac": 13, "objective_optimum": 13, "evolut": 13, "visual": 13, "get_pareto_optimal_paramet": 13, "metric_mean": 13, "one_metric_nam": 13, "another_metric_nam": 13, "get_recommended_max_parallel": 13, "get_trac": 13, "_get_hypervolum": 13, "_get_best_tri": 13, "get_trace_by_progress": 13, "bin": 13, "final_progression_onli": 13, "num_bins_per_tri": 13, "get_trial": [13, 16], "get_trial_paramet": 13, "get_trials_data_fram": 13, "filepath": [13, 14, 16], "load_experi": [13, 14], "load_experiment_from_databas": 13, "load_from_json_fil": 13, "ax_client_snapshot": 13, "resid": 13, "log_trial_failur": 13, "save_to_json_fil": 13, "set_optimization_config": 13, "set_search_spac": 13, "set_status_quo": 13, "stop_trial_earli": 13, "to_json_snapshot": 13, "encoder_registri": [13, 14], "class_encoder_registri": [13, 14], "update_running_trial_with_intermediate_data": 13, "aris": 13, "timestep": 13, "verify_trial_parameter": 13, "managed_loop": 13, "interactive_loop": 13, "ax_client_candidate_gener": 13, "queue": [13, 16], "stop_ev": 13, "lock": 13, "allocate_lock": 13, "enqueu": 13, "ax_client_data_attach": 13, "acquir": 13, "releas": 13, "interactive_optim": 13, "candidate_queue_maxs": 13, "candidate_generator_funct": 13, "data_attacher_funct": 13, "elicitation_funct": 13, "candidate_generator_kwarg": 13, "data_attacher_kwarg": 13, "elicitation_function_kwarg": 13, "facilit": [13, 15], "pregener": 13, "especi": 13, "elicit": 13, "lag": 13, "abort": 13, "spawn": 13, "interactive_optimize_with_cli": 13, "pop": 13, "experimentstatusproperti": 13, "num_trials_run_per_cal": 13, "resumed_from_storage_timestamp": 13, "run_trials_statu": 13, "run_trials_success": 13, "failurerateexceedederror": 13, "excess": 13, "optimizationresult": 13, "runtrialsstatu": 13, "run_trials_and_": 13, "yield_result": 13, "success": [13, 16], "_skip_experiment_sav": 13, "close": [13, 16], "had": 13, "default_fetch_kwarg": 13, "candidate_tri": 13, "completion_criterion": 13, "error_if_failure_rate_exceed": 13, "force_check": 13, "five": 13, "estimate_global_stopping_sav": 13, "versu": [13, 16], "formul": 13, "actual_num_tri": 13, "total_requested_tri": 13, "from_stored_experi": 13, "reduced_st": 13, "generate_candid": 13, "reduce_state_generator_run": [13, 14], "get_default_db_set": 13, "get_improvement_over_baselin": 13, "baseline_arm_nam": 13, "logger": [13, 14], "loggeradapt": 13, "markdown_messag": 13, "pending_tri": 13, "poll_and_process_result": 13, "poll_all_trial_status": 13, "force_refit": 13, "write": [13, 14, 16], "max_new_tri": 13, "trigger": 13, "run_all_tri": 13, "idle_callback": 13, "completon": 13, "deliv": 13, "expos": 13, "print": [13, 16], "someth": [13, 16], "stdout": 13, "report_util": 13, "get_figure_and_callback": 13, "trials_info": 13, "n_complet": 13, "write_n_tri": 13, "run_n_trial": 13, "ignore_global_stopping_strategi": 13, "bulk": [13, 14], "retry_on_except": [13, 16], "retri": [13, 16], "run_trials_and_yield_result": 13, "process_result": 13, "signal": [13, 16], "whichev": 13, "running_tri": 13, "should_abort_optim": 13, "intertupt": 13, "should_consider_optimization_complet": 13, "_complete_optim": 13, "should_wait_for_running_tri": 13, "exit": [13, 16], "standard_generation_strategi": 13, "stop_trial_run": 13, "expir": 13, "poor": 13, "worth": 13, "summarize_final_result": 13, "summari": 13, "did": 13, "wait_for_completed_trials_and_report_result": 13, "backoff": 13, "schedulerinternalerror": 13, "get_fitted_model_bridg": 13, "trialtyp": [13, 14], "tolerated_trial_failure_r": 13, "min_failed_trials_for_failure_rate_check": 13, "log_filepath": 13, "logging_level": 13, "ttl_seconds_for_tri": 13, "init_seconds_between_pol": 13, "min_seconds_before_pol": 13, "seconds_between_polls_backoff_factor": 13, "run_trials_in_batch": 13, "debug_log_run_metadata": 13, "global_stop": [13, 14], "suppress_storage_errors_after_retri": 13, "wait_for_running_tri": 13, "fetch_kwarg": 13, "validate_metr": 13, "status_quo_weight": 13, "enforce_immutable_search_space_and_opt_config": 13, "guid": 13, "influenc": [13, 16], "benefici": 13, "whole": 13, "begin": 13, "ratio": [13, 16], "introduc": 13, "io": 13, "paralel": 13, "best_point_mixin": 13, "get_best_paramet": 13, "extract_y_from_data": 13, "block": 13, "fill_missing_thresholds_from_nadir": 13, "get_best_by_raw_object": 13, "get_best_by_raw_objective_with_trial_index": 13, "get_best_parameters_from_model_predict": 13, "get_best_parameters_from_model_predictions_with_trial_index": 13, "get_best_parameters_with_trial_index": 13, "get_best_raw_objective_point": 13, "get_best_raw_objective_point_with_trial_index": 13, "stateless": 13, "bundl": [13, 16], "build_objective_threshold": 13, "objective_properti": 13, "make_experi": 13, "constraint_from_str": 13, "make_fixed_observation_featur": 13, "make_objective_threshold": 13, "status_quo_defin": 13, "make_object": 13, "make_optimization_config": 13, "make_optimization_config_from_properti": 13, "make_outcome_constraint": 13, "make_search_spac": 13, "objective_threshold_constraint_from_str": 13, "optimization_config_from_object": 13, "outcome_constraint_from_str": 13, "parameter_from_json": 13, "metricobject": 13, "moo_experi": 13, "ref_point": 13, "resp": 13, "valuabl": 13, "literatur": 13, "volum": 13, "compare_to_baselin": 13, "comparison_arm_nam": 13, "compare_to_baseline_impl": 13, "comparison_list": 13, "maybe_extract_baseline_comparison_valu": 13, "compute_maximum_map_valu": 13, "exp_to_df": 13, "run_metadata_field": 13, "trial_properties_field": 13, "trial_attribute_field": 13, "additional_fields_cal": 13, "always_include_field_column": 13, "pivot": 13, "_properti": 13, "prepend": [13, 16], "trial_properties_": 13, "trials_dict": 13, "Such": 13, "ouput": 13, "plot_fn": 13, "forwardref": 13, "runtimeerror": 13, "wil": 13, "_plot": 13, "standard_plot": 13, "get_standard_plot": 13, "fig": 13, "true_objective_metric_nam": 13, "limit_points_per_plot": 13, "global_sensitivity_analysi": 13, "_get_curve_plot_dropdown": 13, "kernel": [13, 14, 16], "baseline_valu": 13, "comparison_arm_valu": 13, "pareto_frontier_scatter_2d_plotli": 13, "select_baseline_arm": 13, "arms_df": 13, "sweep": 13, "warn_if_unpredictable_metr": 13, "model_fit_threshold": 13, "model_fit_metric_nam": 13, "unpredict": 13, "with_db_settings_bas": 13, "suppress_all_error": [13, 16], "ax_object_field_overrid": [13, 14], "db_settings_set": 13, "get_early_stopping_metr": 13, "ax_class_from_json_dict": 14, "_class": 14, "object_json": 14, "autotransitionaftergen": 14, "domaintyp": 14, "torch_prior": 14, "groundtruthbotorchtestproblemmetr": 14, "improvementglobalstoppingstrategi": [14, 16], "listsurrog": [14, 16], "lognormalprior": 14, "maxgenerationparallel": 14, "minimumpreferenceoccur": 14, "minimumtrialsinstatu": 14, "modelspec": [14, 16], "parameterconstrainttyp": 14, "parameterdistribut": [14, 16], "pathlib_from_json": 14, "percentileearlystoppingstrategi": [14, 16], "posixpath": 14, "purepath": 14, "pureposixpath": 14, "purewindowspath": 14, "torchvis": 14, "sobolqmcnormalsampl": 14, "surrogatemetr": 14, "thresholdearlystoppingstrategi": [14, 16], "windowspath": 14, "class_from_json": 14, "input_transform_type_from_json": 14, "outcome_transform_type_from_json": 14, "transform_type_from_json": 14, "_defaulttyp": 14, "default_from_json": 14, "data_from_json": 14, "data_by_trial_json": 14, "experiment_from_json": 14, "generation_node_from_json": 14, "generation_node_json": 14, "generation_step_from_json": 14, "generation_step_json": 14, "generation_strategy_from_json": 14, "generation_strategy_json": 14, "generator_run_from_json": 14, "get_input_transform_json_compon": 14, "input_transforms_json": 14, "get_outcome_transform_json_compon": 14, "outcome_transforms_json": 14, "model_spec_from_json": 14, "model_spec_json": 14, "multi_type_experiment_from_json": 14, "ae": 14, "object_from_json": 14, "recurs": [14, 16], "objective_from_json": 14, "conflict": [14, 16], "parameter_constraints_from_json": 14, "parameter_constraint_json": 14, "search_space_from_json": 14, "search_space_json": 14, "surrogate_from_list_surrogate_json": 14, "list_surrogate_json": 14, "trial_transition_criteria_from_json": 14, "class_": [14, 16], "transition_criteria_json": 14, "carefulli": 14, "unpack": [14, 16], "trials_from_json": 14, "trials_json": 14, "batch_trial_from_json": 14, "num_arms_cr": 14, "status_quo_weight_overrid": 14, "botorch_component_from_json": 14, "botorch_class": 14, "pathseg": 14, "tensor_from_json": 14, "tensor_or_size_from_json": 14, "trial_from_json": 14, "object_to_json": 14, "arm_to_dict": 14, "logical_early_stopping_strategy_to_dict": 14, "metric_to_dict": 14, "transition_criterion_to_dict": 14, "batch_to_dict": 14, "botorch_model_to_dict": 14, "runner_to_dict": 14, "botorch_component_to_dict": 14, "choice_parameter_to_dict": 14, "data_to_dict": 14, "experiment_to_dict": 14, "fixed_parameter_to_dict": 14, "generation_step_to_dict": 14, "generation_node_to_dict": 14, "generation_strategy_to_dict": 14, "generator_run_to_dict": 14, "improvement_global_stopping_strategy_to_dict": 14, "map_data_to_dict": 14, "map_key_info_to_dict": 14, "model_spec_to_dict": 14, "multi_objective_to_dict": 14, "multi_objective_optimization_config_to_dict": 14, "multi_type_experiment_to_dict": 14, "percentile_early_stopping_strategy_to_dict": 14, "objective_to_dict": 14, "outcome_constraint_to_dict": 14, "optimization_config_to_dict": 14, "order_parameter_constraint_to_dict": 14, "parameter_constraint_to_dict": 14, "parameter_distribution_to_dict": 14, "pathlib": 14, "pathlib_to_dict": 14, "pytorch_cnn_torchvision_benchmark_problem_to_dict": 14, "range_parameter_to_dict": 14, "risk_measure_to_dict": 14, "robust_search_space_to_dict": 14, "scalarized_objective_to_dict": 14, "search_space_to_dict": 14, "best_model_selector_to_dict": 14, "sum_parameter_constraint_to_dict": 14, "surrogate_to_dict": 14, "threshold_early_stopping_strategy_to_dict": 14, "trial_to_dict": 14, "observation_features_to_dict": 14, "winsorization_config_to_dict": 14, "botorch_modular_to_dict": 14, "transform_type_to_dict": 14, "default_to_dict": 14, "builtin": 14, "sub": 14, "object_dict": 14, "_type": 14, "shallow": 14, "subfield": 14, "unconvert": 14, "input_obj": 14, "botorch_input_transform_to_init_arg": 14, "input_transform": [14, 16], "class_typ": 14, "generation_step": 14, "gss": 14, "mki": 14, "multi_objective_optimization_config": 14, "multityp": 14, "obs_featur": 14, "dist": 14, "rss": 14, "tensor_to_dict": 14, "transform_typ": 14, "save_experi": 14, "sqaconfig": 14, "abandoned_arm_from_sqa": 14, "abandoned_arm_sqa": 14, "sqaabandonedarm": 14, "analysis_card_from_sqa": 14, "analysis_card_sqa": 14, "sqaanalysiscard": 14, "arm_from_sqa": 14, "arm_sqa": 14, "sqaarm": 14, "data_from_sqa": 14, "data_sqa": 14, "sqadata": 14, "environmental_variable_from_sqa": 14, "parameter_sqa": 14, "sqaparamet": 14, "experiment_from_sqa": 14, "experiment_sqa": 14, "sqaexperi": 14, "slightli": 14, "generation_strategy_from_sqa": 14, "gs_sqa": 14, "sqagenerationstrategi": 14, "sqalchemi": 14, "generator_run_from_sqa": 14, "generator_run_sqa": 14, "sqageneratorrun": 14, "get_enum_nam": 14, "metric_from_sqa": 14, "metric_sqa": 14, "sqametr": 14, "opt_config_and_tracking_metrics_from_sqa": 14, "metrics_sqa": 14, "parameter_constraint_from_sqa": 14, "parameter_constraint_sqa": 14, "sqaparameterconstraint": 14, "parameter_distributions_from_sqa": 14, "parameter_constraint_sqa_list": 14, "parameter_from_sqa": 14, "runner_from_sqa": 14, "runner_sqa": 14, "sqarunn": 14, "runner_kwarg": 14, "search_space_from_sqa": 14, "parameters_sqa": 14, "parameter_constraints_sqa": 14, "trial_from_sqa": 14, "trial_sqa": 14, "sqatrial": 14, "abandoned_arm_to_sqa": 14, "analysis_card_to_sqa": 14, "analysis_card": 14, "experiment_id": 14, "arm_to_sqa": 14, "data_to_sqa": 14, "environmental_variable_to_sqa": 14, "experiment_data_to_sqa": 14, "experiment_to_sqa": 14, "generation_strategy_to_sqa": 14, "generator_run_reduced_st": 14, "generator_run_to_sqa": 14, "get_children_metrics_by_nam": 14, "get_enum_valu": 14, "get_metric_type_and_properti": 14, "metrictyp": 14, "metric_to_sqa": 14, "multi_objective_to_sqa": 14, "children": 14, "placehold": 14, "objective_threshold_to_sqa": 14, "objective_to_sqa": 14, "optimization_config_to_sqa": 14, "outcome_constraint_to_sqa": 14, "parameter_constraint_to_sqa": 14, "parameter_distribution_to_sqa": 14, "parameter_to_sqa": 14, "risk_measure_to_sqa": 14, "robust_search_space_to_sqa": 14, "runner_to_sqa": 14, "scalarized_objective_to_sqa": 14, "scalarized_outcome_constraint_to_sqa": 14, "search_space_to_sqa": 14, "trial_to_sqa": 14, "validate_experiment_metadata": 14, "existing_sqa_experiment_id": 14, "sqabas": 14, "metaclass": [14, 16], "create_all_t": 14, "create_mysql_engine_from_cr": 14, "creator": 14, "echo": 14, "pool_recycl": 14, "dialect": 14, "dbapi": 14, "recycl": 14, "create_engin": 14, "create_mysql_engine_from_url": 14, "usernam": 14, "password": 14, "hostnam": 14, "driver": 14, "host": 14, "port": 14, "create_test_engin": 14, "memori": 14, "get_engin": 14, "init_engine_and_session_factori": 14, "get_sess": 14, "explicitli": [14, 16], "orm": 14, "force_init": 14, "session_factori": 14, "init_test_engine_and_session_factori": 14, "tier_or_path": 14, "tier": 14, "session_scop": 14, "transact": 14, "scope": 14, "delete_experi": 14, "exp_nam": 14, "delete_generation_strategi": 14, "jsonencodeddict": 14, "jsonencodedobject": 14, "jsonencodedlist": 14, "jsonencodedlongtext": 14, "mediumtext": 14, "impl": 14, "varchar": 14, "4294967295": 14, "jsonencodedlongtextdict": 14, "jsonencodedmediumtext": 14, "16777215": 14, "typedecor": 14, "marshal": 14, "unmarshal": 14, "cache_ok": 14, "4096": 14, "process_bind_param": 14, "process_result_valu": 14, "jsonencodedtext": 14, "jsonencodedtextdict": 14, "get_generation_strategy_id": 14, "get_generation_strategy_sqa": 14, "gs_id": 14, "query_opt": 14, "get_generation_strategy_sqa_reduced_st": 14, "get_generator_runs_by_id": 14, "generator_run_id": 14, "load_analysis_cards_by_experiment_nam": 14, "load_trials_in_batches_of_s": 14, "skip_runners_and_metr": 14, "withoug": 14, "load_generation_strategy_by_experiment_nam": 14, "load_generation_strategy_by_id": 14, "save_analysis_card": 14, "save_generation_strategi": 14, "save_or_update_tri": 14, "update_generation_strategi": 14, "update_outcome_constraint_on_experi": 14, "update_properties_on_experi": 14, "experiment_with_updated_properti": 14, "update_properties_on_tri": 14, "trial_with_updated_properti": 14, "update_runner_on_experi": 14, "declarative_bas": 14, "time_abandon": 14, "inttimestamp": 14, "scalarized_objective_children_metr": 14, "scalarized_outcome_constraint_children_metr": 14, "fixed_valu": 14, "is_batch": 14, "class_to_sqa_class": 14, "experiment_type_enum": 14, "generator_run_type_enum": 14, "json_encoder_registri": 14, "json_class_encoder_registri": 14, "json_decoder_registri": 14, "json_class_decoder_registri": 14, "metric_registri": 14, "runner_registri": 14, "face": 14, "reverse_metric_registri": 14, "reverse_runner_registri": 14, "basenullableenum": 14, "stringenum": 14, "copy_db_id": 14, "_db_id": 14, "is_foreign_key_field": 14, "foreign": 14, "_id": 14, "consistency_exactly_on": 14, "exactly_one_field": 14, "do_not_set_existing_value_to_nul": 14, "new_valu": 14, "old_valu": 14, "initiator_ev": 14, "listens_for_multipl": 14, "instrumentedattribut": 14, "listen_for": 14, "listen": 14, "get_query_options_to_defer_immutable_dupl": 14, "strategy_opt": 14, "get_query_options_to_defer_large_model_col": 14, "botorch_modular_registri": 14, "acquisition_function_registri": 14, "expectedimprov": 14, "analyticexpectedutilityofbestopt": 14, "noisyexpectedimprov": 14, "knowledge_gradi": 14, "qknowledgegradi": 14, "max_value_entropy_search": 14, "qmaxvalueentropi": 14, "qmultifidelityknowledgegradi": 14, "qmultifidelitymaxvalueentropi": 14, "qnoisyexpectedimprov": 14, "logexpectedimprov": 14, "lognoisyexpectedimprov": 14, "logei": 14, "qlogexpectedimprov": 14, "acquisition_registri": 14, "sebo": [14, 16], "class_to_registri": 14, "rbf_kernel": 14, "rbfkernel": 14, "gaussian_likelihood": 14, "gaussianlikelihood": 14, "leave_one_out_pseudo_likelihood": 14, "leaveoneoutpseudolikelihood": 14, "sum_marginal_log_likelihood": 14, "summarginalloglikelihood": 14, "gp_regress": 14, "fixednoisegp": 14, "gp_regression_fidel": 14, "fixednoisemultifidelitygp": 14, "singletaskmultifidelitygp": 14, "gp_regression_mix": 14, "mixedsingletaskgp": 14, "model_list_gp_regress": 14, "multitask": 14, "multitaskgp": 14, "fully_bayesian": 14, "saasfullybayesiansingletaskgp": 14, "fully_bayesian_multitask": 14, "saasfullybayesianmultitaskgp": 14, "inputperturb": 14, "gpytorch_component_registri": 14, "input_transform_registri": 14, "model_registri": 14, "outcome_transform_registri": 14, "overarch": 14, "reverse_outcome_transform_registri": 14, "register_acquisit": 14, "acq_class": 14, "register_acquisition_funct": 14, "acqf_class": 14, "register_kernel": 14, "kernel_class": 14, "register_model": 14, "register_metr": 14, "metric_clss": 14, "register_runn": 14, "runner_cl": [14, 15], "runner_clss": 14, "registry_bundl": 14, "registrybundl": 14, "registrybundlebas": 14, "concret": 14, "sensibl": 14, "from_registry_bundl": 14, "transform_registri": 14, "convert_metric_nam": 14, "derelativ": 14, "int_range_to_choic": 14, "int_to_float": 14, "one_hot": 14, "choice_encod": 14, "remove_fix": 14, "search_space_to_choic": 14, "stratified_standardize_i": 14, "task_encod": 14, "13": 14, "trial_as_task": 14, "14": 14, "unit_x": 14, "16": 14, "cap_paramet": 14, "power_transform_i": 14, "18": 14, "19": 14, "map_unit_x": 14, "21": 14, "metrics_as_task": 14, "22": 14, "log_i": 14, "23": 14, "24": 14, "25": [14, 16], "merge_repeated_measur": 14, "time_as_featur": 14, "27": 14, "site": 14, "environmental_rang": 14, "metricint": 14, "additional_object": 14, "scalarized_object": 14, "scalarized_outcome_constraint": 14, "stable_hash": 14, "invoc": 14, "salt": 14, "experimentcompletedrecord": 15, "num_bayesopt_tri": 15, "num_other_tri": 15, "num_completed_tri": 15, "num_failed_tri": 15, "num_abandoned_tri": 15, "num_early_stopped_tri": 15, "total_fit_tim": 15, "total_gen_tim": 15, "programat": 15, "from_experi": 15, "experimentcreatedrecord": 15, "num_continuous_range_paramet": 15, "num_int_range_parameters_smal": 15, "num_int_range_parameters_medium": 15, "num_int_range_parameters_larg": 15, "num_log_scale_range_paramet": 15, "num_unordered_choice_parameters_smal": 15, "num_unordered_choice_parameters_medium": 15, "num_unordered_choice_parameters_larg": 15, "num_fixed_paramet": 15, "hierarchical_tree_height": 15, "num_parameter_constraint": 15, "num_object": [15, 16], "num_tracking_metr": 15, "num_outcome_constraint": 15, "num_map_metr": 15, "metric_cls_to_quant": 15, "generationstrategycreatedrecord": 15, "generation_strategy_nam": 15, "num_requested_initialization_tri": 15, "num_requested_bayesopt_tri": 15, "num_requested_other_tri": 15, "from_generation_strategi": 15, "schedulercompletedrecord": 15, "experiment_completed_record": 15, "best_point_qu": 15, "model_fit_qu": 15, "model_std_qu": 15, "model_fit_gener": 15, "model_std_gener": 15, "improvement_over_baselin": 15, "num_metric_fetch_e_encount": 15, "num_trials_bad_due_to_err": 15, "tabular": 15, "from_schedul": 15, "schedulercreatedrecord": 15, "experiment_created_record": 15, "generation_strategy_created_record": 15, "scheduler_total_tri": 15, "scheduler_max_pending_tri": 15, "early_stopping_strategy_cl": 15, "global_stopping_strategy_cl": 15, "transformed_dimension": 15, "db_id": 16, "reserv": 16, "alphabet": 16, "acqf_kwarg": 16, "acquisition_function_kwarg": 16, "autoset_surrog": 16, "batch_init_condit": 16, "batch_initial_condit": 16, "candidate_set": 16, "candidate_s": 16, "cost_aware_util": 16, "current_valu": 16, "expected_acqf_v": 16, "expected_acquisition_valu": 16, "fidelity_weight": 16, "frac_random": 16, "immutable_search_space_and_opt_conf": 16, "num_fantasi": 16, "num_inner_restart": 16, "num_trace_observ": 16, "pairwise_preference_queri": 16, "pairwise_pref_queri": 16, "preference_data": 16, "primary_surrog": 16, "raw_inner_sampl": 16, "trial_completion_timestamp": 16, "x_baselin": 16, "classdecor": 16, "templat": 16, "decorate_cal": 16, "disable_logg": 16, "_call_func": 16, "imperfect": 16, "lot": 16, "staticmethod": 16, "decorate_priv": 16, "But": 16, "escap": 16, "decorate_class": 16, "klass": 16, "sphinx": 16, "copy_doc": 16, "src": 16, "_t": 16, "cat": 16, "mamal": 16, "is_felin": 16, "dataframe_equ": 16, "df1": 16, "df2": 16, "datetime_equ": 16, "dt1": 16, "dt2": 16, "microsecond": 16, "equality_typecheck": 16, "eq_func": 16, "__eq__": 16, "is_ax_equ": 16, "one_v": 16, "other_v": 16, "same_el": 16, "object_attribute_dicts_equ": 16, "one_dict": 16, "other_dict": 16, "skip_db_id_check": 16, "_model": 16, "__dict__": 16, "confirm": 16, "object_attribute_dicts_find_unequal_field": 16, "fast_return": 16, "unequ": 16, "list1": 16, "list2": 16, "handle_exceptions_in_retri": 16, "no_retry_except": 16, "retry_except": 16, "suppress_error": 16, "check_message_contain": 16, "last_retri": 16, "wrap_error_message_in": 16, "exception_typ": 16, "no_retry_on_exception_typ": 16, "default_return_on_suppress": 16, "initial_wait_second": 16, "catch": 16, "baseclass": 16, "supertyp": 16, "caught": 16, "default_return_on_suppres": 16, "original_error_typ": 16, "original_error_msg": 16, "doubl": 16, "minut": 16, "consolidate_kwarg": 16, "kwargs_iter": 16, "earlier": 16, "referenc": 16, "somewhat": 16, "redund": 16, "filter_kwarg": 16, "get_function_argument_nam": 16, "get_function_default_argu": 16, "validate_kwarg_typ": 16, "typed_cal": 16, "warn_on_kwarg": 16, "callable_with_kwarg": 16, "cater": 16, "axoutputnamefilt": 16, "output_nam": 16, "logrecord": 16, "build_file_handl": 16, "streamhandl": 16, "build": 16, "stream": 16, "filehandl": 16, "build_stream_handl": 16, "40": 16, "get_logg": 16, "force_nam": 16, "axlogg": 16, "my_output_nam": 16, "stderr": 16, "hander": 16, "setlevel": 16, "make_indices_str": 16, "min_idx": 16, "max_idx": 16, "idx_1": 16, "idx_2": 16, "idx_n": 16, "set_stderr_log_level": 16, "mock_patch_method_origin": 16, "mock_path": 16, "original_method": 16, "magicmock": 16, "patch": 16, "set_rng_se": 16, "with_rng_se": 16, "is_err": 16, "is_ok": 16, "ok": 16, "untouch": 16, "map_err": 16, "map_or": 16, "map_or_els": 16, "default_op": 16, "unwrap": 16, "noreturn": 16, "unwraperror": 16, "unwrap_or": 16, "unwrap_or_els": 16, "unwrap_or_default": 16, "unwrap_err": 16, "rusti": 16, "monad": 16, "rust": 16, "lang": 16, "org": 16, "gone": 16, "world": 16, "impropperli": 16, "enrol": 16, "core_encod": 16, "circular": 16, "inplement": 16, "json_stor": 16, "callable_from_refer": 16, "callable_to_refer": 16, "extract_init_arg": 16, "named_tuple_to_dict": 16, "exclude_field": 16, "testcas": 16, "methodnam": 16, "runtest": 16, "unittest": 16, "assertaxbaseequ": 16, "msg": 16, "assertdictsalmostequ": 16, "consider_nans_equ": 16, "assertequ": 16, "assertraiseson": 16, "exc": 16, "regex": 16, "abstractcontextmanag": 16, "silenc": 16, "silence_stderr": 16, "current_timestamp_in_milli": 16, "timestamps_in_rang": 16, "to_d": 16, "to_t": 16, "unixtime_to_pandas_t": 16, "unixtim": 16, "utc": 16, "checked_cast": 16, "typ": 16, "safeti": 16, "typecheck": 16, "check_cast": 16, "checked_cast_dict": 16, "key_typ": 16, "checked_cast_list": 16, "old_l": 16, "checked_cast_opt": 16, "checked_cast_to_tupl": 16, "not_non": 16, "unbox": 16, "typeutils_nonn": 16, "numpy_type_to_python_typ": 16, "coerc": 16, "version_safe_check_typ": 16, "argnam": 16, "expected_typ": 16, "excecut": 16, "typeguard": 16, "typeutils_torch": 16, "torch_type_from_str": 16, "type_nam": 16, "torch_type_to_str": 16, "flake8_plugin": 16, "docstring_check": 16, "a000": 16, "ast": 16, "docstringcheck": 16, "filenam": 16, "sure": 16, "public": 16, "fikenam": 16, "docstringcheckervisitor": 16, "nodevisitor": 16, "check_a000": 16, "visit_asyncfunctiondef": 16, "classdef": 16, "visit_classdef": 16, "visit_functiondef": 16, "functiondef": 16, "lineno": 16, "col": 16, "is_copy_doc_cal": 16, "guess": 16, "syntact": 16, "alias": 16, "new_error": 16, "errorid": 16, "should_check": 16, "synthetic_funct": 16, "aug_branin": 16, "syntheticfunct": 16, "augment": 16, "minima": 16, "aug_hartmann6": 16, "frombotorch": 16, "botorch_synthetic_funct": 16, "fmax": 16, "fmin": 16, "informative_failure_on_non": 16, "attr": 16, "required_dimension": 16, "from_botorch": 16, "init_notebook_plot": 16, "h2_html": 16, "emb": 16, "subhead": 16, "h3_html": 16, "subsubhead": 16, "link_html": 16, "href": 16, "address": 16, "list_item_html": 16, "p_html": 16, "render_report_el": 16, "html_element": 16, "header": 16, "notebook_env": 16, "jinja2": 16, "subsect": 16, "plot_html": 16, "gp_model": 16, "perf_metr": 16, "pandas_html": 16, "my": 16, "email": 16, "serv": 16, "librari": 16, "700px": 16, "table_cell_html": 16, "table_heading_cell_html": 16, "head": 16, "table_html": 16, "table_row": 16, "table_row_html": 16, "table_cel": 16, "unordered_list_html": 16, "list_item": 16, "derivative_gp": 16, "get_kxx_inv": 16, "get_kxx_dx": 16, "kernel_typ": 16, "rbf": 16, "get_kxx_dx2": 16, "posterior_deriv": 16, "multivariatenorm": 16, "gibo": 16, "sarah": 16, "muller": 16, "alexand": 16, "von": 16, "rohr": 16, "sebastian": 16, "trimp": 16, "polici": 16, "neurip": 16, "derivative_measur": 16, "gpdgsmgpmean": 16, "y_scale": 16, "num_mc_sampl": 16, "input_qmc": 16, "num_bootstrap_sampl": 16, "discrete_featur": 16, "transform_fun": 16, "bootstrap_indic": 16, "gradient_absolute_measur": 16, "var_mc": 16, "stderr_mc": 16, "gradient_measur": 16, "gradients_square_measur": 16, "squar": 16, "mean_gradi": 16, "mean_gradients_btsp": 16, "gpdgsmgpsampl": 16, "num_gp_sampl": 16, "gp_sample_qmc": 16, "samples_gradi": 16, "samples_gradients_btsp": 16, "compute_derivatives_from_model_list": 16, "model_list": 16, "pseudo": 16, "sample_discrete_paramet": 16, "input_mc_sampl": 16, "uniformli": 16, "sobol_measur": 16, "gaussianlinkmean": 16, "probitlinkmean": 16, "sobolsensit": 16, "input_funct": 16, "second_ord": 16, "bootstrap_arrai": 16, "evalute_funct": 16, "f_a_b_abi": 16, "devid": 16, "first_order_indic": 16, "generate_all_input_matrix": 16, "second_order_indic": 16, "first_order_idx": 16, "first_order_idxs_btsp": 16, "total_order_indic": 16, "sobolsensitivitygpmean": 16, "link_funct": 16, "mini_batch_s": 16, "sobolsensitivitygpsampl": 16, "1000": 16, "var_gp": 16, "stderr_gp": 16, "ax_parameter_sen": 16, "sobol_kwarg": 16, "unimport": 16, "compute_sobol_indices_from_model_list": 16, "agresti_coull_sem": 16, "n_numer": 16, "n_denom": 16, "prior_success": 16, "prior_failur": 16, "agresti": 16, "coull": 16, "style": 16, "binomi": 16, "alan": 16, "brent": 16, "american": 16, "statistician": 16, "vol": 16, "52": 16, "1998": 16, "pp": 16, "119": 16, "126": 16, "jstor": 16, "stabl": 16, "2685469": 16, "inverse_variance_weight": 16, "positive_part_james_stein": 16, "sigma_i": 16, "shrunk": 16, "shrink": 16, "constitu": 16, "grand": 16, "phi_i": 16, "ybar": 16, "shrinkag": 16, "mu_hat": 16, "unrestrict": 16, "sigma2_i": 16, "s2": 16, "precis": 16, "tightli": 16, "cluster": 16, "phi": 16, "third": 16, "sem_i": 16, "mu_hat_i": 16, "means_t": 16, "sems_t": 16, "mean_c": 16, "bias_correct": 16, "cov_mean": 16, "as_perc": 16, "taylor": 16, "mu_t": 16, "mu_c": 16, "expans": 16, "sigma_c": 16, "sigma_t": 16, "sigma_tc": 16, "s_c": 16, "s_t": 16, "s_tc": 16, "divis": 16, "bia": 16, "mean_t": 16, "ab": 16, "sem_hat": 16, "rel_hat": 16, "total_vari": 16, "default_kde_bandwidth": 16, "y_ob": 16, "y_pred": 16, "se_pr": 16, "ep": 16, "1e": 16, "small": 16, "denomin": 16, "stabil": 16, "compute_model_fit_metr": 16, "entropy_of_observ": 16, "bandwidth": 16, "quantifi": 16, "held": 16, "mean_of_the_standardized_error": 16, "practic": 16, "std_of_the_standardized_error": 16, "backend_schedul": 16, "asyncsimulatedbackendschedul": 16, "backend_simul": 16, "backendsimulatoropt": 16, "simtrial": 16, "concurr": 16, "all_trial": 16, "from_stat": 16, "backendsimulatorst": 16, "get_sim_trial_by_index": 16, "lookup_trial_index_statu": 16, "_queu": 16, "_run": 16, "num_complet": 16, "num_fail": 16, "num_queu": 16, "time_sc": 16, "arbitrarili": 16, "simstatu": 16, "stop_trial": 16, "use_internal_clock": 16, "clock": 16, "max_concurr": 16, "failure_r": 16, "internal_clock": 16, "use_update_as_start_tim": 16, "coin": 16, "flip": 16, "time_remain": 16, "sim": 16, "sim_runtim": 16, "sim_start_tim": 16, "sim_queued_tim": 16, "sim_completed_tim": 16, "stopper": 16, "trial_list": 16, "benchmark_stub": 16, "get_aggregated_benchmark_result": 16, "get_benchmark_result": 16, "get_constrained_multi_objective_benchmark_problem": 16, "get_moo_surrog": 16, "get_multi_objective_benchmark_problem": 16, "get_single_objective_benchmark_problem": 16, "get_sobol_gpei_benchmark_method": 16, "get_soo_surrog": 16, "core_stub": 16, "customtestmetr": 16, "test_attribut": 16, "customtestrunn": 16, "dummyearlystoppingstrategi": 16, "early_stop_tri": 16, "dummyglobalstoppingstrategi": 16, "trial_to_stop": 16, "specialgenerationstrategi": 16, "respond": 16, "subtyp": 16, "testtrial": 16, "get_abandoned_arm": 16, "get_acquisition_function_typ": 16, "get_acquisition_typ": 16, "get_and_early_stopping_strategi": 16, "get_arm": 16, "get_arm_weights1": 16, "get_arm_weights2": 16, "get_arms_from_dict": 16, "arm_weights_dict": 16, "get_augmented_branin_metr": 16, "get_augmented_branin_object": 16, "get_augmented_branin_optimization_config": 16, "get_augmented_hartmann_metr": 16, "aug_hartmann": 16, "get_augmented_hartmann_object": 16, "get_augmented_hartmann_optimization_config": 16, "get_batch_tri": 16, "abandon_arm": 16, "constrain_search_spac": 16, "get_batch_trial_with_repeated_arm": 16, "num_repeated_arm": 16, "get_botorch_model": 16, "get_botorch_model_with_default_acquisition_class": 16, "get_botorch_model_with_surrogate_spec": 16, "get_branin_arm": 16, "get_branin_data": 16, "get_branin_data_batch": 16, "get_branin_data_multi_object": 16, "get_branin_experi": 16, "has_optimization_config": 16, "with_batch": 16, "with_trial": 16, "with_status_quo": 16, "with_fidelity_paramet": 16, "with_choice_paramet": 16, "with_str_choice_param": 16, "num_batch_tri": 16, "with_completed_batch": 16, "with_completed_tri": 16, "get_branin_experiment_with_multi_object": 16, "has_objective_threshold": 16, "get_branin_experiment_with_status_quo_tri": 16, "get_branin_experiment_with_timestamp_map_metr": 16, "map_tracking_metr": 16, "get_branin_metr": 16, "get_branin_multi_object": 16, "get_branin_multi_objective_optimization_config": 16, "get_branin_object": 16, "get_branin_optimization_config": 16, "get_branin_outcome_constraint": 16, "get_branin_search_spac": 16, "get_branin_with_multi_task": 16, "with_multi_object": 16, "get_chained_input_transform": 16, "get_choice_paramet": 16, "get_custom_multi_object": 16, "ax_test_metr": 16, "num_non_sq_arm": 16, "get_dataset": 16, "has_observation_nois": 16, "x0": 16, "y0": 16, "y1": 16, "get_default_scheduler_opt": 16, "get_dict_lookup_metr": 16, "get_discrete_search_spac": 16, "get_experi": 16, "get_experiment_with_batch_and_single_tri": 16, "get_experiment_with_batch_tri": 16, "get_experiment_with_custom_runner_and_metr": 16, "has_outcome_constraint": 16, "get_experiment_with_data": 16, "get_experiment_with_map_data": 16, "get_experiment_with_map_data_typ": 16, "get_experiment_with_multi_object": 16, "get_experiment_with_observ": 16, "with_tracking_metr": 16, "get_experiment_with_repeated_arm": 16, "get_experiment_with_scalarized_objective_and_outcome_constraint": 16, "get_experiment_with_tri": 16, "get_experiment_with_trial_with_ttl": 16, "get_factorial_experi": 16, "get_factorial_metr": 16, "success_metr": 16, "get_factorial_search_spac": 16, "get_fixed_paramet": 16, "get_gamma_prior": 16, "get_generator_run": 16, "get_generator_run2": 16, "get_hartmann_metr": 16, "get_hartmann_object": 16, "get_hartmann_optimization_config": 16, "get_hartmann_search_spac": 16, "get_hierarchical_search_spac": 16, "with_fixed_paramet": 16, "get_hierarchical_search_space_experi": 16, "num_observ": 16, "get_high_dimensional_branin_experi": 16, "get_hss_trials_with_fixed_paramet": 16, "get_improvement_global_stopping_strategi": 16, "get_interv": 16, "get_l2_reg_weight_paramet": 16, "get_large_factorial_search_spac": 16, "num_level": 16, "num_paramet": 16, "get_large_ordinal_search_spac": 16, "n_ordinal_choice_paramet": 16, "n_continuous_range_paramet": 16, "get_lr_paramet": 16, "get_many_branin_objective_opt_config": 16, "n_object": 16, "get_map_data": 16, "get_map_key_info": 16, "get_map_object": 16, "get_map_optimization_config": 16, "get_metr": 16, "get_mll_typ": 16, "get_model_covari": 16, "get_model_mean": 16, "get_model_paramet": 16, "get_model_predictions_per_arm": 16, "get_model_typ": 16, "get_multi_object": 16, "get_multi_objective_optimization_config": 16, "custom_metr": 16, "get_multi_type_experi": 16, "add_trial": 16, "num_arm": 16, "get_multi_type_experiment_with_multi_object": 16, "get_non_monolithic_branin_moo_data": 16, "get_num_boost_rounds_paramet": 16, "get_object": 16, "get_objective_threshold": 16, "comparison_op": 16, "get_observations_with_invalid_valu": 16, "invalid_valu": 16, "get_online_sobol_gpei_generation_strategi": 16, "sobol_step": 16, "get_optimization_config": 16, "get_optimization_config_no_constraint": 16, "get_or_early_stopping_strategi": 16, "get_order_constraint": 16, "get_ordered_choice_paramet": 16, "get_outcome_constraint": 16, "get_parameter_constraint": 16, "get_parameter_distribut": 16, "get_pathlib_path": 16, "get_percentile_early_stopping_strategi": 16, "get_percentile_early_stopping_strategy_with_non_objective_metric_nam": 16, "get_range_parameter2": 16, "get_risk_measur": 16, "get_robust_branin_experi": 16, "get_robust_search_spac": 16, "lb": 16, "ub": 16, "multivari": 16, "use_discret": 16, "get_robust_search_space_environment": 16, "get_scalarized_object": 16, "get_scalarized_outcome_constraint": 16, "get_scheduler_options_batch_tri": 16, "get_search_spac": 16, "get_search_space_for_range_valu": 16, "get_search_space_for_valu": 16, "get_search_space_with_choice_paramet": 16, "num_ordered_paramet": 16, "num_unordered_choic": 16, "get_sebo_acquisition_class": 16, "get_small_discrete_search_spac": 16, "get_status_quo": 16, "get_sum_constraint1": 16, "get_sum_constraint2": 16, "get_surrog": 16, "get_surrogate_spec_with_default": 16, "get_surrogate_spec_with_lognorm": 16, "get_synthetic_runn": 16, "get_task_choice_paramet": 16, "get_test_map_data_experi": 16, "num_fetch": 16, "get_threshold_early_stopping_strategi": 16, "get_trial_based_criterion": 16, "get_weight": 16, "get_weights_from_dict": 16, "get_winsorization_config": 16, "run_branin_experiment_with_generation_strategi": 16, "kwargs_for_get_branin_experi": 16, "modeling_stub": 16, "get_experiment_for_valu": 16, "get_generation_strategi": 16, "with_experi": 16, "with_callable_model_kwarg": 16, "with_completion_criteria": 16, "with_generation_nod": 16, "get_input_transform_typ": 16, "get_legacy_list_surrogate_generation_step_as_dict": 16, "first_metric_nam": 16, "second_metric_nam": 16, "get_observation1": 16, "get_observation1tran": 16, "get_observation2": 16, "get_observation2tran": 16, "get_observation_featur": 16, "get_observation_status_quo0": 16, "get_observation_status_quo1": 16, "get_outcome_transfrom_typ": 16, "get_surrogate_as_dict": 16, "outcome_transform": 16, "get_surrogate_generation_step": 16, "get_surrogate_spec_as_dict": 16, "with_legacy_input_transform": 16, "get_transform_typ": 16, "sobol_gpei_generation_node_g": 16, "with_model_select": 16, "with_auto_transit": 16, "transform_1": 16, "transform_2": 16, "preference_stub": 16, "experimental_metric_ev": 16, "get_pbo_experi": 16, "num_experimental_metr": 16, "num_experimental_tri": 16, "num_preference_tri": 16, "num_preference_trials_w_repeated_arm": 16, "partial_data": 16, "preferenti": 16, "bo": 16, "pairwise_pref_metric_ev": 16, "utility_func": 16, "sum_util": 16, "pairwis": 16, "fast_botorch_optim": 16, "fast_botorch_optimize_context_manag": 16, "tactic": 16, "assertionerror": 16, "responsibli": 16, "skip_fit_gpytorch_ml": 16, "skip_fit_gpytorch_mll_context_manag": 16, "fit_gpytorch_ml": 16, "test_init_fil": 16, "inittest": 16, "test_initfil": 16, "buck": 16, "torch_stub": 16, "get_torch_test_data": 16, "float32": 16, "cuda": 16, "constant_nois": 16, "offset": 16, "generic_equ": 16, "backend_simulator_map": 16, "backendsimulatortimestampmapmetr": 16, "convert_to_timestamp": 16, "branin_backend_map": 16, "braninbackendmapmetr": 16, "delta_t": 16, "cnn_util": 16, "convolut": 16, "network": 16, "data_load": 16, "dataload": 16, "accuraci": 16, "get_partition_data_load": 16, "train_valid_set": 16, "downsample_pct": 16, "train_pct": 16, "num_work": 16, "deterministic_partit": 16, "downsample_pct_test": 16, "worker": 16, "subprocess": 16, "fashion": 16, "load_mnist": 16, "data_path": 16, "mnist": 16, "pt": 16, "split_dataset": 16, "train_load": 16, "num_epoch": 16}, "objects": {"ax": [[0, 0, 0, "-", "analysis"], [2, 0, 0, "-", "benchmark"], [3, 0, 0, "-", "core"], [4, 0, 0, "-", "early_stopping"], [5, 0, 0, "-", "exceptions"], [6, 0, 0, "-", "global_stopping"], [8, 0, 0, "-", "metrics"], [9, 0, 0, "-", "modelbridge"], [10, 0, 0, "-", "models"], [11, 0, 0, "-", "plot"], [12, 0, 0, "-", "runners"], [13, 0, 0, "-", "service"], [14, 0, 0, "-", "storage"], [15, 0, 0, "-", "telemetry"], [16, 0, 0, "-", "utils"]], "ax.analysis": [[0, 0, 0, "-", "analysis"]], "ax.analysis.analysis": [[0, 1, 1, "", "Analysis"], [0, 1, 1, "", "AnalysisCard"], [0, 1, 1, "", "AnalysisCardLevel"]], "ax.analysis.analysis.Analysis": [[0, 2, 1, "", "compute"]], "ax.analysis.analysis.AnalysisCard": [[0, 3, 1, "", "blob"], [0, 3, 1, "", "blob_annotation"], [0, 3, 1, "", "df"], [0, 3, 1, "", "level"], [0, 3, 1, "", "name"], [0, 3, 1, "", "subtitle"], [0, 3, 1, "", "title"]], "ax.analysis.analysis.AnalysisCardLevel": [[0, 3, 1, "", "CRITICAL"], [0, 3, 1, "", "DEBUG"], [0, 3, 1, "", "HIGH"], [0, 3, 1, "", "LOW"], [0, 3, 1, "", "MID"]], "ax.analysis.healthcheck": [[0, 0, 0, "-", "healthcheck_analysis"]], "ax.analysis.healthcheck.healthcheck_analysis": [[0, 1, 1, "", "HealthcheckAnalysis"], [0, 1, 1, "", "HealthcheckAnalysisCard"], [0, 1, 1, "", "HealthcheckStatus"]], "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckAnalysis": [[0, 2, 1, "", "compute"]], "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckAnalysisCard": [[0, 3, 1, "", "blob_annotation"], [0, 2, 1, "", "get_status"]], "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckStatus": [[0, 3, 1, "", "FAIL"], [0, 3, 1, "", "PASS"], [0, 3, 1, "", "WARNING"]], "ax.analysis.markdown": [[0, 0, 0, "-", "markdown_analysis"]], "ax.analysis.markdown.markdown_analysis": [[0, 1, 1, "", "MarkdownAnalysis"], [0, 1, 1, "", "MarkdownAnalysisCard"]], "ax.analysis.markdown.markdown_analysis.MarkdownAnalysis": [[0, 2, 1, "", "compute"]], "ax.analysis.markdown.markdown_analysis.MarkdownAnalysisCard": [[0, 3, 1, "", "blob_annotation"], [0, 2, 1, "", "get_markdown"]], "ax.analysis.plotly": [[0, 0, 0, "-", "plotly_analysis"]], "ax.analysis.plotly.plotly_analysis": [[0, 1, 1, "", "PlotlyAnalysis"], [0, 1, 1, "", "PlotlyAnalysisCard"]], "ax.analysis.plotly.plotly_analysis.PlotlyAnalysis": [[0, 2, 1, "", "compute"]], "ax.analysis.plotly.plotly_analysis.PlotlyAnalysisCard": [[0, 3, 1, "", "blob_annotation"], [0, 2, 1, "", "get_figure"]], "ax.benchmark": [[2, 0, 0, "-", "benchmark"], [2, 0, 0, "-", "benchmark_method"], [2, 0, 0, "-", "benchmark_problem"], [2, 0, 0, "-", "benchmark_result"]], "ax.benchmark.benchmark": [[2, 4, 1, "", "benchmark_multiple_problems_methods"], [2, 4, 1, "", "benchmark_one_method_problem"], [2, 4, 1, "", "benchmark_replication"], [2, 4, 1, "", "compute_score_trace"], [2, 4, 1, "", "make_ground_truth_metrics"], [2, 4, 1, "", "make_ground_truth_optimization_config"]], "ax.benchmark.benchmark_method": [[2, 1, 1, "", "BenchmarkMethod"], [2, 4, 1, "", "get_benchmark_scheduler_options"]], "ax.benchmark.benchmark_method.BenchmarkMethod": [[2, 3, 1, "", "distribute_replications"], [2, 3, 1, "", "generation_strategy"], [2, 3, 1, "", "name"], [2, 3, 1, "", "scheduler_options"]], "ax.benchmark.benchmark_problem": [[2, 1, 1, "", "BenchmarkProblem"], [2, 1, 1, "", "MultiObjectiveBenchmarkProblem"], [2, 4, 1, "", "create_multi_objective_problem_from_botorch"], [2, 4, 1, "", "create_single_objective_problem_from_botorch"]], "ax.benchmark.benchmark_problem.BenchmarkProblem": [[2, 3, 1, "", "has_ground_truth"], [2, 3, 1, "", "is_noiseless"], [2, 3, 1, "", "name"], [2, 3, 1, "", "num_trials"], [2, 3, 1, "", "observe_noise_stds"], [2, 3, 1, "", "optimal_value"], [2, 3, 1, "", "optimization_config"], [2, 3, 1, "", "runner"], [2, 3, 1, "", "search_space"], [2, 3, 1, "", "tracking_metrics"]], "ax.benchmark.benchmark_problem.MultiObjectiveBenchmarkProblem": [[2, 3, 1, "", "optimization_config"]], "ax.benchmark.benchmark_result": [[2, 1, 1, "", "AggregatedBenchmarkResult"], [2, 1, 1, "", "BenchmarkResult"]], "ax.benchmark.benchmark_result.AggregatedBenchmarkResult": [[2, 3, 1, "", "fit_time"], [2, 2, 1, "", "from_benchmark_results"], [2, 3, 1, "", "gen_time"], [2, 3, 1, "", "name"], [2, 3, 1, "", "optimization_trace"], [2, 3, 1, "", "results"], [2, 3, 1, "", "score_trace"]], "ax.benchmark.benchmark_result.BenchmarkResult": [[2, 3, 1, "", "experiment"], [2, 3, 1, "", "experiment_storage_id"], [2, 3, 1, "", "fit_time"], [2, 3, 1, "", "gen_time"], [2, 3, 1, "", "name"], [2, 3, 1, "", "optimization_trace"], [2, 3, 1, "", "score_trace"], [2, 3, 1, "", "seed"]], "ax.benchmark.methods": [[2, 0, 0, "-", "modular_botorch"], [2, 0, 0, "-", "sobol"]], "ax.benchmark.methods.modular_botorch": [[2, 4, 1, "", "get_sobol_botorch_modular_acquisition"]], "ax.benchmark.methods.sobol": [[2, 4, 1, "", "get_sobol_benchmark_method"]], "ax.benchmark.metrics": [[2, 0, 0, "-", "base"], [2, 0, 0, "-", "benchmark"], [2, 0, 0, "-", "jenatton"], [2, 0, 0, "-", "utils"]], "ax.benchmark.metrics.base": [[2, 1, 1, "", "BenchmarkMetricBase"], [2, 1, 1, "", "GroundTruthMetricMixin"]], "ax.benchmark.metrics.base.BenchmarkMetricBase": [[2, 3, 1, "id0", "has_ground_truth"], [2, 2, 1, "", "make_ground_truth_metric"]], "ax.benchmark.metrics.base.GroundTruthMetricMixin": [[2, 2, 1, "", "get_ground_truth_name"], [2, 2, 1, "", "get_original_name"], [2, 3, 1, "", "is_ground_truth"]], "ax.benchmark.metrics.benchmark": [[2, 1, 1, "", "BenchmarkMetric"], [2, 1, 1, "", "GroundTruthBenchmarkMetric"]], "ax.benchmark.metrics.benchmark.BenchmarkMetric": [[2, 2, 1, "", "fetch_trial_data"], [2, 3, 1, "id6", "has_ground_truth"], [2, 2, 1, "", "make_ground_truth_metric"]], "ax.benchmark.metrics.benchmark.GroundTruthBenchmarkMetric": [[2, 2, 1, "", "fetch_trial_data"], [2, 2, 1, "", "make_ground_truth_metric"]], "ax.benchmark.metrics.jenatton": [[2, 1, 1, "", "GroundTruthJenattonMetric"], [2, 1, 1, "", "JenattonMetric"], [2, 4, 1, "", "jenatton_test_function"]], "ax.benchmark.metrics.jenatton.JenattonMetric": [[2, 2, 1, "", "fetch_trial_data"], [2, 3, 1, "", "has_ground_truth"], [2, 2, 1, "", "make_ground_truth_metric"]], "ax.benchmark.problems": [[2, 0, 0, "-", "hd_embedding"], [2, 0, 0, "-", "registry"], [2, 0, 0, "-", "surrogate"]], "ax.benchmark.problems.hd_embedding": [[2, 4, 1, "", "embed_higher_dimension"]], "ax.benchmark.problems.hpo": [[2, 0, 0, "-", "pytorch_cnn"], [2, 0, 0, "-", "torchvision"]], "ax.benchmark.problems.hpo.pytorch_cnn": [[2, 1, 1, "", "PyTorchCNNBenchmarkProblem"], [2, 1, 1, "", "PyTorchCNNMetric"], [2, 1, 1, "", "PyTorchCNNRunner"]], "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNBenchmarkProblem": [[2, 2, 1, "", "from_datasets"]], "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNMetric": [[2, 2, 1, "", "fetch_trial_data"]], "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner": [[2, 1, 1, "", "CNN"], [2, 2, 1, "", "poll_trial_status"], [2, 2, 1, "", "run"], [2, 2, 1, "", "train_and_evaluate"]], "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.CNN": [[2, 2, 1, "", "forward"]], "ax.benchmark.problems.hpo.torchvision": [[2, 1, 1, "", "PyTorchCNNTorchvisionBenchmarkProblem"], [2, 1, 1, "", "PyTorchCNNTorchvisionRunner"]], "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionBenchmarkProblem": [[2, 2, 1, "", "from_dataset_name"]], "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionRunner": [[2, 2, 1, "", "deserialize_init_args"], [2, 2, 1, "", "serialize_init_args"]], "ax.benchmark.problems.registry": [[2, 1, 1, "", "BenchmarkProblemRegistryEntry"], [2, 4, 1, "", "get_problem"]], "ax.benchmark.problems.registry.BenchmarkProblemRegistryEntry": [[2, 3, 1, "", "factory_fn"], [2, 3, 1, "", "factory_kwargs"]], "ax.benchmark.problems.surrogate": [[2, 1, 1, "", "MOOSurrogateBenchmarkProblem"], [2, 1, 1, "", "SOOSurrogateBenchmarkProblem"], [2, 1, 1, "", "SurrogateBenchmarkProblemBase"]], "ax.benchmark.problems.surrogate.MOOSurrogateBenchmarkProblem": [[2, 3, 1, "", "optimization_config"]], "ax.benchmark.problems.surrogate.SurrogateBenchmarkProblemBase": [[2, 3, 1, "", "runner"]], "ax.benchmark.problems.synthetic.discretized": [[2, 0, 0, "-", "mixed_integer"]], "ax.benchmark.problems.synthetic.discretized.mixed_integer": [[2, 4, 1, "", "get_discrete_ackley"], [2, 4, 1, "", "get_discrete_hartmann"], [2, 4, 1, "", "get_discrete_rosenbrock"]], "ax.benchmark.problems.synthetic.hss": [[2, 0, 0, "-", "jenatton"]], "ax.benchmark.problems.synthetic.hss.jenatton": [[2, 4, 1, "", "get_jenatton_benchmark_problem"]], "ax.benchmark.runners": [[2, 0, 0, "-", "base"], [2, 0, 0, "-", "botorch_test"], [2, 0, 0, "-", "surrogate"]], "ax.benchmark.runners.base": [[2, 1, 1, "", "BenchmarkRunner"]], "ax.benchmark.runners.base.BenchmarkRunner": [[2, 2, 1, "", "get_Y_Ystd"], [2, 2, 1, "", "get_Y_true"], [2, 2, 1, "", "get_noise_stds"], [2, 5, 1, "", "outcome_names"], [2, 2, 1, "", "run"]], "ax.benchmark.runners.botorch_test": [[2, 1, 1, "", "BotorchTestProblemRunner"]], "ax.benchmark.runners.botorch_test.BotorchTestProblemRunner": [[2, 2, 1, "", "deserialize_init_args"], [2, 2, 1, "", "get_Y_true"], [2, 2, 1, "", "get_noise_stds"], [2, 5, 1, "", "outcome_names"], [2, 2, 1, "", "poll_trial_status"], [2, 2, 1, "", "serialize_init_args"], [2, 3, 1, "", "test_problem"]], "ax.benchmark.runners.surrogate": [[2, 1, 1, "", "SurrogateRunner"]], "ax.benchmark.runners.surrogate.SurrogateRunner": [[2, 5, 1, "", "datasets"], [2, 2, 1, "", "deserialize_init_args"], [2, 2, 1, "", "get_Y_true"], [2, 2, 1, "", "get_noise_stds"], [2, 5, 1, "", "is_noiseless"], [2, 5, 1, "", "outcome_names"], [2, 2, 1, "", "poll_trial_status"], [2, 2, 1, "", "run"], [2, 2, 1, "", "serialize_init_args"], [2, 2, 1, "", "set_surrogate_and_datasets"], [2, 5, 1, "", "surrogate"]], "ax.core": [[3, 0, 0, "-", "arm"], [3, 0, 0, "-", "base_trial"], [3, 0, 0, "-", "batch_trial"], [3, 0, 0, "-", "experiment"], [3, 0, 0, "-", "formatting_utils"], [3, 0, 0, "-", "generation_strategy_interface"], [3, 0, 0, "-", "generator_run"], [3, 0, 0, "-", "multi_type_experiment"], [3, 0, 0, "-", "observation"], [3, 0, 0, "-", "optimization_config"], [3, 0, 0, "-", "parameter"], [3, 0, 0, "-", "parameter_constraint"], [3, 0, 0, "-", "parameter_distribution"], [3, 0, 0, "-", "risk_measures"], [3, 0, 0, "-", "runner"], [3, 0, 0, "-", "trial"], [3, 0, 0, "-", "types"], [3, 0, 0, "-", "utils"]], "ax.core.arm": [[3, 1, 1, "", "Arm"]], "ax.core.arm.Arm": [[3, 2, 1, "", "clone"], [3, 5, 1, "", "has_name"], [3, 2, 1, "", "md5hash"], [3, 5, 1, "", "name"], [3, 5, 1, "", "name_or_short_signature"], [3, 5, 1, "", "parameters"], [3, 5, 1, "", "signature"]], "ax.core.base_trial": [[3, 1, 1, "", "BaseTrial"], [3, 1, 1, "", "TrialStatus"], [3, 4, 1, "", "immutable_once_run"]], "ax.core.base_trial.BaseTrial": [[3, 5, 1, "", "abandoned_arms"], [3, 5, 1, "", "abandoned_reason"], [3, 5, 1, "", "arms"], [3, 5, 1, "", "arms_by_name"], [3, 2, 1, "", "assign_runner"], [3, 2, 1, "", "complete"], [3, 5, 1, "", "completed_successfully"], [3, 5, 1, "", "deployed_name"], [3, 5, 1, "", "did_not_complete"], [3, 5, 1, "", "experiment"], [3, 5, 1, "", "failed_reason"], [3, 2, 1, "", "fetch_data"], [3, 2, 1, "", "fetch_data_results"], [3, 5, 1, "", "generator_runs"], [3, 5, 1, "", "index"], [3, 5, 1, "", "is_abandoned"], [3, 2, 1, "", "lookup_data"], [3, 2, 1, "", "mark_abandoned"], [3, 2, 1, "", "mark_arm_abandoned"], [3, 2, 1, "", "mark_as"], [3, 2, 1, "", "mark_completed"], [3, 2, 1, "", "mark_early_stopped"], [3, 2, 1, "", "mark_failed"], [3, 2, 1, "", "mark_running"], [3, 2, 1, "", "mark_staged"], [3, 2, 1, "", "run"], [3, 5, 1, "", "run_metadata"], [3, 5, 1, "", "runner"], [3, 5, 1, "", "status"], [3, 2, 1, "", "stop"], [3, 5, 1, "", "stop_metadata"], [3, 5, 1, "", "time_completed"], [3, 5, 1, "", "time_created"], [3, 5, 1, "", "time_run_started"], [3, 5, 1, "", "time_staged"], [3, 5, 1, "", "trial_type"], [3, 5, 1, "", "ttl_seconds"], [3, 2, 1, "", "update_run_metadata"], [3, 2, 1, "", "update_stop_metadata"]], "ax.core.base_trial.TrialStatus": [[3, 3, 1, "", "ABANDONED"], [3, 3, 1, "", "CANDIDATE"], [3, 3, 1, "", "COMPLETED"], [3, 3, 1, "", "DISPATCHED"], [3, 3, 1, "", "EARLY_STOPPED"], [3, 3, 1, "", "FAILED"], [3, 3, 1, "", "RUNNING"], [3, 3, 1, "", "STAGED"], [3, 5, 1, "", "expecting_data"], [3, 5, 1, "", "is_abandoned"], [3, 5, 1, "", "is_candidate"], [3, 5, 1, "", "is_completed"], [3, 5, 1, "", "is_deployed"], [3, 5, 1, "", "is_early_stopped"], [3, 5, 1, "", "is_failed"], [3, 5, 1, "", "is_running"], [3, 5, 1, "", "is_terminal"]], "ax.core.batch_trial": [[3, 1, 1, "", "AbandonedArm"], [3, 1, 1, "", "BatchTrial"], [3, 1, 1, "", "GeneratorRunStruct"], [3, 1, 1, "", "LifecycleStage"]], "ax.core.batch_trial.AbandonedArm": [[3, 3, 1, "", "name"], [3, 3, 1, "", "reason"], [3, 3, 1, "", "time"]], "ax.core.batch_trial.BatchTrial": [[3, 5, 1, "", "abandoned_arm_names"], [3, 5, 1, "", "abandoned_arms"], [3, 5, 1, "", "abandoned_arms_metadata"], [3, 2, 1, "", "add_arm"], [3, 2, 1, "", "add_arms_and_weights"], [3, 2, 1, "", "add_generator_run"], [3, 5, 1, "", "arm_weights"], [3, 5, 1, "", "arms"], [3, 5, 1, "", "arms_by_name"], [3, 2, 1, "", "attach_batch_trial_data"], [3, 2, 1, "", "clone"], [3, 2, 1, "", "clone_to"], [3, 5, 1, "", "experiment"], [3, 5, 1, "", "generator_run_structs"], [3, 5, 1, "", "generator_runs"], [3, 5, 1, "", "in_design_arms"], [3, 5, 1, "", "index"], [3, 5, 1, "", "is_factorial"], [3, 5, 1, "", "lifecycle_stage"], [3, 2, 1, "", "mark_arm_abandoned"], [3, 2, 1, "", "normalized_arm_weights"], [3, 2, 1, "", "run"], [3, 2, 1, "", "set_status_quo_and_optimize_power"], [3, 2, 1, "", "set_status_quo_with_weight"], [3, 5, 1, "", "status_quo"], [3, 2, 1, "", "unset_status_quo"], [3, 5, 1, "", "weights"]], "ax.core.batch_trial.GeneratorRunStruct": [[3, 3, 1, "", "generator_run"], [3, 3, 1, "", "weight"]], "ax.core.batch_trial.LifecycleStage": [[3, 3, 1, "", "BAKEOFF"], [3, 3, 1, "", "EXPLORATION"], [3, 3, 1, "", "EXPLORATION_CONCURRENT"], [3, 3, 1, "", "ITERATION"], [3, 3, 1, "", "OFFLINE_OPTIMIZED"]], "ax.core.experiment": [[3, 1, 1, "", "Experiment"], [3, 4, 1, "", "add_arm_and_prevent_naming_collision"]], "ax.core.experiment.Experiment": [[3, 2, 1, "", "add_tracking_metric"], [3, 2, 1, "", "add_tracking_metrics"], [3, 5, 1, "", "arms_by_name"], [3, 5, 1, "", "arms_by_signature"], [3, 5, 1, "", "arms_by_signature_for_deduplication"], [3, 2, 1, "", "attach_data"], [3, 2, 1, "", "attach_fetch_results"], [3, 2, 1, "", "attach_trial"], [3, 2, 1, "", "clone_with"], [3, 5, 1, "", "completed_trials"], [3, 5, 1, "", "data_by_trial"], [3, 5, 1, "", "default_data_constructor"], [3, 5, 1, "", "default_data_type"], [3, 5, 1, "", "default_trial_type"], [3, 5, 1, "", "experiment_type"], [3, 2, 1, "", "fetch_data"], [3, 2, 1, "", "fetch_data_results"], [3, 2, 1, "", "fetch_trials_data"], [3, 2, 1, "", "fetch_trials_data_results"], [3, 2, 1, "", "get_trials_by_indices"], [3, 5, 1, "", "has_name"], [3, 5, 1, "", "immutable_search_space_and_opt_config"], [3, 5, 1, "", "is_moo_problem"], [3, 5, 1, "", "is_test"], [3, 2, 1, "", "lookup_data"], [3, 2, 1, "", "lookup_data_for_trial"], [3, 2, 1, "", "lookup_data_for_ts"], [3, 5, 1, "", "metric_config_summary_df"], [3, 5, 1, "", "metrics"], [3, 5, 1, "", "name"], [3, 2, 1, "", "new_batch_trial"], [3, 2, 1, "", "new_trial"], [3, 5, 1, "", "num_abandoned_arms"], [3, 5, 1, "", "num_trials"], [3, 5, 1, "", "optimization_config"], [3, 5, 1, "", "parameters"], [3, 2, 1, "", "remove_tracking_metric"], [3, 2, 1, "", "reset_runners"], [3, 2, 1, "", "runner_for_trial"], [3, 5, 1, "", "running_trial_indices"], [3, 5, 1, "", "search_space"], [3, 5, 1, "", "status_quo"], [3, 5, 1, "", "sum_trial_sizes"], [3, 2, 1, "", "supports_trial_type"], [3, 5, 1, "", "time_created"], [3, 5, 1, "", "tracking_metrics"], [3, 5, 1, "", "trial_indices_by_status"], [3, 5, 1, "", "trials"], [3, 5, 1, "", "trials_by_status"], [3, 5, 1, "", "trials_expecting_data"], [3, 2, 1, "", "update_tracking_metric"], [3, 2, 1, "", "validate_trials"], [3, 2, 1, "", "warm_start_from_old_experiment"]], "ax.core.formatting_utils": [[3, 1, 1, "", "DataType"], [3, 4, 1, "", "data_and_evaluations_from_raw_data"], [3, 4, 1, "", "raw_data_to_evaluation"]], "ax.core.formatting_utils.DataType": [[3, 3, 1, "", "DATA"], [3, 3, 1, "", "MAP_DATA"]], "ax.core.generation_strategy_interface": [[3, 1, 1, "", "GenerationStrategyInterface"]], "ax.core.generation_strategy_interface.GenerationStrategyInterface": [[3, 2, 1, "", "clone_reset"], [3, 5, 1, "", "experiment"], [3, 2, 1, "", "gen_for_multiple_trials_with_multiple_models"], [3, 5, 1, "", "name"]], "ax.core.generator_run": [[3, 1, 1, "", "ArmWeight"], [3, 1, 1, "", "GeneratorRun"], [3, 1, 1, "", "GeneratorRunType"], [3, 4, 1, "", "extract_arm_predictions"]], "ax.core.generator_run.ArmWeight": [[3, 3, 1, "", "arm"], [3, 3, 1, "", "weight"]], "ax.core.generator_run.GeneratorRun": [[3, 2, 1, "", "add_arm"], [3, 5, 1, "", "arm_signatures"], [3, 5, 1, "", "arm_weights"], [3, 5, 1, "", "arms"], [3, 5, 1, "", "best_arm_predictions"], [3, 5, 1, "", "candidate_metadata_by_arm_signature"], [3, 2, 1, "", "clone"], [3, 5, 1, "", "fit_time"], [3, 5, 1, "", "gen_metadata"], [3, 5, 1, "", "gen_time"], [3, 5, 1, "", "generator_run_type"], [3, 5, 1, "", "index"], [3, 5, 1, "", "model_predictions"], [3, 5, 1, "", "model_predictions_by_arm"], [3, 5, 1, "", "optimization_config"], [3, 5, 1, "", "param_df"], [3, 5, 1, "", "search_space"], [3, 5, 1, "", "time_created"], [3, 5, 1, "", "weights"]], "ax.core.generator_run.GeneratorRunType": [[3, 3, 1, "", "MANUAL"], [3, 3, 1, "", "STATUS_QUO"]], "ax.core.multi_type_experiment": [[3, 1, 1, "", "MultiTypeExperiment"]], "ax.core.multi_type_experiment.MultiTypeExperiment": [[3, 2, 1, "", "add_tracking_metric"], [3, 2, 1, "", "add_trial_type"], [3, 5, 1, "", "default_trial_type"], [3, 5, 1, "", "default_trials"], [3, 3, 1, "", "description"], [3, 2, 1, "", "fetch_data"], [3, 5, 1, "", "metric_to_trial_type"], [3, 3, 1, "", "name"], [3, 2, 1, "", "remove_tracking_metric"], [3, 2, 1, "", "reset_runners"], [3, 2, 1, "", "runner_for_trial"], [3, 2, 1, "", "supports_trial_type"], [3, 2, 1, "", "update_runner"], [3, 2, 1, "", "update_tracking_metric"]], "ax.core.observation": [[3, 1, 1, "", "Observation"], [3, 1, 1, "", "ObservationData"], [3, 1, 1, "", "ObservationFeatures"], [3, 4, 1, "", "get_feature_cols"], [3, 4, 1, "", "observations_from_data"], [3, 4, 1, "", "observations_from_map_data"], [3, 4, 1, "", "recombine_observations"], [3, 4, 1, "", "separate_observations"]], "ax.core.observation.Observation": [[3, 3, 1, "", "arm_name"], [3, 3, 1, "", "data"], [3, 3, 1, "", "features"]], "ax.core.observation.ObservationData": [[3, 3, 1, "", "covariance"], [3, 5, 1, "", "covariance_matrix"], [3, 3, 1, "", "means"], [3, 5, 1, "", "means_dict"], [3, 3, 1, "", "metric_names"]], "ax.core.observation.ObservationFeatures": [[3, 2, 1, "", "clone"], [3, 3, 1, "", "end_time"], [3, 2, 1, "", "from_arm"], [3, 3, 1, "", "parameters"], [3, 3, 1, "", "random_split"], [3, 3, 1, "", "start_time"], [3, 3, 1, "", "trial_index"], [3, 2, 1, "", "update_features"]], "ax.core.optimization_config": [[3, 1, 1, "", "MultiObjectiveOptimizationConfig"], [3, 1, 1, "", "OptimizationConfig"], [3, 4, 1, "", "check_objective_thresholds_match_objectives"]], "ax.core.optimization_config.MultiObjectiveOptimizationConfig": [[3, 5, 1, "", "all_constraints"], [3, 2, 1, "", "clone_with_args"], [3, 5, 1, "", "metrics"], [3, 5, 1, "", "objective"], [3, 5, 1, "", "objective_thresholds"], [3, 5, 1, "", "objective_thresholds_dict"]], "ax.core.optimization_config.OptimizationConfig": [[3, 5, 1, "", "all_constraints"], [3, 2, 1, "", "clone"], [3, 2, 1, "", "clone_with_args"], [3, 5, 1, "", "is_moo_problem"], [3, 5, 1, "", "metrics"], [3, 5, 1, "", "objective"], [3, 5, 1, "", "outcome_constraints"]], "ax.core.parameter": [[3, 1, 1, "", "ChoiceParameter"], [3, 1, 1, "", "FixedParameter"], [3, 1, 1, "", "Parameter"], [3, 1, 1, "", "ParameterType"], [3, 1, 1, "", "RangeParameter"]], "ax.core.parameter.ChoiceParameter": [[3, 2, 1, "", "add_values"], [3, 5, 1, "", "available_flags"], [3, 2, 1, "", "cardinality"], [3, 2, 1, "", "clone"], [3, 5, 1, "", "dependents"], [3, 5, 1, "", "domain_repr"], [3, 5, 1, "", "is_ordered"], [3, 5, 1, "", "is_task"], [3, 2, 1, "", "set_values"], [3, 5, 1, "", "sort_values"], [3, 2, 1, "", "validate"], [3, 5, 1, "", "values"]], "ax.core.parameter.FixedParameter": [[3, 5, 1, "", "available_flags"], [3, 2, 1, "", "cardinality"], [3, 2, 1, "", "clone"], [3, 5, 1, "", "dependents"], [3, 5, 1, "", "domain_repr"], [3, 2, 1, "", "set_value"], [3, 2, 1, "", "validate"], [3, 5, 1, "", "value"]], "ax.core.parameter.Parameter": [[3, 5, 1, "", "available_flags"], [3, 2, 1, "", "cardinality"], [3, 2, 1, "", "cast"], [3, 2, 1, "", "clone"], [3, 5, 1, "", "dependents"], [3, 5, 1, "", "domain_repr"], [3, 5, 1, "", "is_fidelity"], [3, 5, 1, "", "is_hierarchical"], [3, 5, 1, "", "is_numeric"], [3, 2, 1, "", "is_valid_type"], [3, 5, 1, "", "name"], [3, 5, 1, "", "parameter_type"], [3, 5, 1, "", "python_type"], [3, 5, 1, "", "summary_dict"], [3, 5, 1, "", "target_value"], [3, 2, 1, "", "validate"]], "ax.core.parameter.ParameterType": [[3, 3, 1, "", "BOOL"], [3, 3, 1, "", "FLOAT"], [3, 3, 1, "", "INT"], [3, 3, 1, "", "STRING"], [3, 5, 1, "", "is_numeric"]], "ax.core.parameter.RangeParameter": [[3, 5, 1, "", "available_flags"], [3, 2, 1, "", "cardinality"], [3, 2, 1, "", "cast"], [3, 2, 1, "", "clone"], [3, 5, 1, "", "digits"], [3, 5, 1, "", "domain_repr"], [3, 2, 1, "", "is_valid_type"], [3, 5, 1, "", "log_scale"], [3, 5, 1, "", "logit_scale"], [3, 5, 1, "", "lower"], [3, 2, 1, "", "set_digits"], [3, 2, 1, "", "set_log_scale"], [3, 2, 1, "", "set_logit_scale"], [3, 2, 1, "", "update_range"], [3, 5, 1, "", "upper"], [3, 2, 1, "", "validate"]], "ax.core.parameter_constraint": [[3, 1, 1, "", "OrderConstraint"], [3, 1, 1, "", "ParameterConstraint"], [3, 1, 1, "", "SumConstraint"], [3, 4, 1, "", "validate_constraint_parameters"]], "ax.core.parameter_constraint.OrderConstraint": [[3, 2, 1, "", "clone"], [3, 2, 1, "", "clone_with_transformed_parameters"], [3, 5, 1, "", "constraint_dict"], [3, 5, 1, "", "lower_parameter"], [3, 5, 1, "", "parameters"], [3, 5, 1, "", "upper_parameter"]], "ax.core.parameter_constraint.ParameterConstraint": [[3, 5, 1, "", "bound"], [3, 2, 1, "", "check"], [3, 2, 1, "", "clone"], [3, 2, 1, "", "clone_with_transformed_parameters"], [3, 5, 1, "", "constraint_dict"]], "ax.core.parameter_constraint.SumConstraint": [[3, 2, 1, "", "clone"], [3, 2, 1, "", "clone_with_transformed_parameters"], [3, 5, 1, "", "constraint_dict"], [3, 5, 1, "", "is_upper_bound"], [3, 5, 1, "", "op"], [3, 5, 1, "", "parameters"]], "ax.core.parameter_distribution": [[3, 1, 1, "", "ParameterDistribution"]], "ax.core.parameter_distribution.ParameterDistribution": [[3, 2, 1, "", "clone"], [3, 5, 1, "", "distribution"], [3, 5, 1, "", "distribution_class"], [3, 5, 1, "", "distribution_parameters"], [3, 2, 1, "", "is_environmental"]], "ax.core.risk_measures": [[3, 1, 1, "", "RiskMeasure"]], "ax.core.risk_measures.RiskMeasure": [[3, 2, 1, "", "clone"]], "ax.core.runner": [[3, 1, 1, "", "Runner"]], "ax.core.runner.Runner": [[3, 2, 1, "", "clone"], [3, 2, 1, "", "poll_available_capacity"], [3, 2, 1, "", "poll_exception"], [3, 2, 1, "", "poll_trial_status"], [3, 2, 1, "", "run"], [3, 5, 1, "", "run_metadata_report_keys"], [3, 2, 1, "", "run_multiple"], [3, 5, 1, "", "staging_required"], [3, 2, 1, "", "stop"]], "ax.core.trial": [[3, 1, 1, "", "Trial"]], "ax.core.trial.Trial": [[3, 5, 1, "", "abandoned_arms"], [3, 2, 1, "", "add_arm"], [3, 2, 1, "", "add_generator_run"], [3, 5, 1, "", "arm"], [3, 5, 1, "", "arms"], [3, 5, 1, "", "arms_by_name"], [3, 2, 1, "", "clone_to"], [3, 5, 1, "", "generator_run"], [3, 5, 1, "", "generator_runs"], [3, 2, 1, "", "get_metric_mean"], [3, 5, 1, "", "objective_mean"], [3, 2, 1, "", "update_trial_data"], [3, 2, 1, "", "validate_data_for_trial"]], "ax.core.types": [[3, 1, 1, "", "ComparisonOp"], [3, 4, 1, "", "merge_model_predict"], [3, 4, 1, "", "validate_evaluation_outcome"], [3, 4, 1, "", "validate_fidelity_trial_evaluation"], [3, 4, 1, "", "validate_floatlike"], [3, 4, 1, "", "validate_map_dict"], [3, 4, 1, "", "validate_map_trial_evaluation"], [3, 4, 1, "", "validate_param_value"], [3, 4, 1, "", "validate_parameterization"], [3, 4, 1, "", "validate_single_metric_data"], [3, 4, 1, "", "validate_trial_evaluation"]], "ax.core.types.ComparisonOp": [[3, 3, 1, "", "GEQ"], [3, 3, 1, "", "LEQ"]], "ax.core.utils": [[3, 1, 1, "", "MissingMetrics"], [3, 4, 1, "", "best_feasible_objective"], [3, 4, 1, "", "extend_pending_observations"], [3, 4, 1, "", "extract_pending_observations"], [3, 4, 1, "", "get_missing_metrics"], [3, 4, 1, "", "get_missing_metrics_by_name"], [3, 4, 1, "", "get_model_times"], [3, 4, 1, "", "get_model_trace_of_times"], [3, 4, 1, "", "get_pending_observation_features"], [3, 4, 1, "", "get_pending_observation_features_based_on_trial_status"]], "ax.core.utils.MissingMetrics": [[3, 3, 1, "", "objective"], [3, 3, 1, "", "outcome_constraints"], [3, 3, 1, "", "tracking_metrics"]], "ax.early_stopping.strategies": [[4, 0, 0, "-", "base"], [4, 0, 0, "-", "logical"], [4, 0, 0, "-", "percentile"], [4, 0, 0, "-", "threshold"]], "ax.early_stopping.strategies.base": [[4, 1, 1, "", "BaseEarlyStoppingStrategy"], [4, 1, 1, "", "EarlyStoppingTrainingData"], [4, 1, 1, "", "ModelBasedEarlyStoppingStrategy"], [4, 4, 1, "", "get_transform_helper_model"]], "ax.early_stopping.strategies.base.BaseEarlyStoppingStrategy": [[4, 2, 1, "", "is_eligible"], [4, 2, 1, "", "is_eligible_any"], [4, 2, 1, "", "should_stop_trials_early"]], "ax.early_stopping.strategies.base.EarlyStoppingTrainingData": [[4, 3, 1, "", "X"], [4, 3, 1, "", "Y"], [4, 3, 1, "", "Yvar"], [4, 3, 1, "", "arm_names"]], "ax.early_stopping.strategies.base.ModelBasedEarlyStoppingStrategy": [[4, 2, 1, "", "get_training_data"]], "ax.early_stopping.strategies.logical": [[4, 1, 1, "", "AndEarlyStoppingStrategy"], [4, 1, 1, "", "LogicalEarlyStoppingStrategy"], [4, 1, 1, "", "OrEarlyStoppingStrategy"]], "ax.early_stopping.strategies.logical.AndEarlyStoppingStrategy": [[4, 2, 1, "", "should_stop_trials_early"]], "ax.early_stopping.strategies.logical.OrEarlyStoppingStrategy": [[4, 2, 1, "", "from_early_stopping_strategies"], [4, 2, 1, "", "should_stop_trials_early"]], "ax.early_stopping.strategies.percentile": [[4, 1, 1, "", "PercentileEarlyStoppingStrategy"]], "ax.early_stopping.strategies.percentile.PercentileEarlyStoppingStrategy": [[4, 2, 1, "", "should_stop_trials_early"]], "ax.early_stopping.strategies.threshold": [[4, 1, 1, "", "ThresholdEarlyStoppingStrategy"]], "ax.early_stopping.strategies.threshold.ThresholdEarlyStoppingStrategy": [[4, 2, 1, "", "should_stop_trials_early"]], "ax.early_stopping": [[4, 0, 0, "-", "utils"]], "ax.early_stopping.utils": [[4, 4, 1, "", "align_partial_results"], [4, 4, 1, "", "estimate_early_stopping_savings"]], "ax.exceptions": [[5, 0, 0, "-", "constants"], [5, 0, 0, "-", "core"], [5, 0, 0, "-", "data_provider"], [5, 0, 0, "-", "generation_strategy"], [5, 0, 0, "-", "model"], [5, 0, 0, "-", "storage"]], "ax.exceptions.core": [[5, 6, 1, "", "AxError"], [5, 6, 1, "", "AxParameterWarning"], [5, 6, 1, "", "AxStorageWarning"], [5, 6, 1, "", "AxWarning"], [5, 6, 1, "", "DataRequiredError"], [5, 6, 1, "", "ExperimentNotFoundError"], [5, 6, 1, "", "ExperimentNotReadyError"], [5, 6, 1, "", "IncompatibleDependencyVersion"], [5, 6, 1, "", "MetricDataNotReadyError"], [5, 6, 1, "", "MisconfiguredExperiment"], [5, 6, 1, "", "NoDataError"], [5, 6, 1, "", "ObjectNotFoundError"], [5, 6, 1, "", "OptimizationComplete"], [5, 6, 1, "", "OptimizationShouldStop"], [5, 6, 1, "", "SearchSpaceExhausted"], [5, 6, 1, "", "UnsupportedError"], [5, 6, 1, "", "UnsupportedPlotError"], [5, 6, 1, "", "UserInputError"]], "ax.exceptions.data_provider": [[5, 6, 1, "", "DataProviderError"], [5, 6, 1, "", "MissingDataError"]], "ax.exceptions.generation_strategy": [[5, 6, 1, "", "AxGenerationException"], [5, 6, 1, "", "GenerationStrategyCompleted"], [5, 6, 1, "", "GenerationStrategyMisconfiguredException"], [5, 6, 1, "", "GenerationStrategyRepeatedPoints"], [5, 6, 1, "", "MaxParallelismReachedException"], [5, 6, 1, "", "OptimizationConfigRequired"]], "ax.exceptions.model": [[5, 6, 1, "", "CVNotSupportedError"], [5, 6, 1, "", "ModelError"]], "ax.exceptions.storage": [[5, 6, 1, "", "ImmutabilityError"], [5, 6, 1, "", "IncorrectDBConfigurationError"], [5, 6, 1, "", "JSONDecodeError"], [5, 6, 1, "", "JSONEncodeError"], [5, 6, 1, "", "SQADecodeError"], [5, 6, 1, "", "SQAEncodeError"]], "ax.global_stopping.strategies": [[6, 0, 0, "-", "base"], [6, 0, 0, "-", "improvement"]], "ax.global_stopping.strategies.base": [[6, 1, 1, "", "BaseGlobalStoppingStrategy"]], "ax.global_stopping.strategies.base.BaseGlobalStoppingStrategy": [[6, 2, 1, "", "should_stop_optimization"]], "ax.global_stopping.strategies.improvement": [[6, 1, 1, "", "ImprovementGlobalStoppingStrategy"], [6, 4, 1, "", "constraint_satisfaction"]], "ax.metrics": [[8, 0, 0, "-", "botorch_test_problem"], [8, 0, 0, "-", "branin"], [8, 0, 0, "-", "branin_map"], [8, 0, 0, "-", "chemistry"], [8, 0, 0, "-", "curve"], [8, 0, 0, "-", "dict_lookup"], [8, 0, 0, "-", "factorial"], [8, 0, 0, "-", "hartmann6"], [8, 0, 0, "-", "l2norm"], [8, 0, 0, "-", "noisy_function"], [8, 0, 0, "-", "noisy_function_map"], [8, 0, 0, "-", "sklearn"], [8, 0, 0, "-", "tensorboard"], [8, 0, 0, "-", "torchx"]], "ax.metrics.botorch_test_problem": [[8, 1, 1, "", "BotorchTestProblemMetric"]], "ax.metrics.botorch_test_problem.BotorchTestProblemMetric": [[8, 2, 1, "", "fetch_trial_data"]], "ax.metrics.branin": [[8, 1, 1, "", "AugmentedBraninMetric"], [8, 1, 1, "", "BraninMetric"], [8, 1, 1, "", "NegativeBraninMetric"]], "ax.metrics.branin.AugmentedBraninMetric": [[8, 2, 1, "", "f"]], "ax.metrics.branin.BraninMetric": [[8, 2, 1, "", "f"]], "ax.metrics.branin.NegativeBraninMetric": [[8, 2, 1, "", "f"]], "ax.metrics.branin_map": [[8, 1, 1, "", "BraninFidelityMapMetric"], [8, 1, 1, "", "BraninTimestampMapMetric"], [8, 4, 1, "", "random"]], "ax.metrics.branin_map.BraninFidelityMapMetric": [[8, 2, 1, "", "f"], [8, 2, 1, "", "fetch_trial_data"], [8, 3, 1, "", "map_key_info"]], "ax.metrics.branin_map.BraninTimestampMapMetric": [[8, 2, 1, "", "f"], [8, 2, 1, "", "fetch_trial_data"]], "ax.metrics.chemistry": [[8, 1, 1, "", "ChemistryData"], [8, 1, 1, "", "ChemistryMetric"], [8, 1, 1, "", "ChemistryProblemType"]], "ax.metrics.chemistry.ChemistryData": [[8, 2, 1, "", "evaluate"], [8, 3, 1, "", "objective_dict"], [8, 3, 1, "", "param_names"]], "ax.metrics.chemistry.ChemistryMetric": [[8, 2, 1, "", "clone"], [8, 2, 1, "", "fetch_trial_data"], [8, 3, 1, "", "lower_is_better"], [8, 3, 1, "", "noiseless"]], "ax.metrics.chemistry.ChemistryProblemType": [[8, 3, 1, "", "DIRECT_ARYLATION"], [8, 3, 1, "", "SUZUKI"]], "ax.metrics.curve": [[8, 1, 1, "", "AbstractCurveMetric"], [8, 4, 1, "", "get_df_from_curve_series"]], "ax.metrics.curve.AbstractCurveMetric": [[8, 2, 1, "", "bulk_fetch_experiment_data"], [8, 2, 1, "", "bulk_fetch_trial_data"], [8, 5, 1, "", "curve_names"], [8, 2, 1, "", "fetch_trial_data"], [8, 2, 1, "", "get_curves_from_ids"], [8, 2, 1, "", "get_df_from_curve_series"], [8, 2, 1, "", "get_ids_from_trials"], [8, 2, 1, "", "is_available_while_running"], [8, 3, 1, "", "map_key_info"]], "ax.metrics.dict_lookup": [[8, 1, 1, "", "DictLookupMetric"]], "ax.metrics.dict_lookup.DictLookupMetric": [[8, 2, 1, "", "clone"], [8, 2, 1, "", "fetch_trial_data"], [8, 2, 1, "", "is_available_while_running"]], "ax.metrics.factorial": [[8, 1, 1, "", "FactorialMetric"], [8, 4, 1, "", "evaluation_function"]], "ax.metrics.factorial.FactorialMetric": [[8, 2, 1, "", "fetch_trial_data"], [8, 2, 1, "", "is_available_while_running"]], "ax.metrics.hartmann6": [[8, 1, 1, "", "AugmentedHartmann6Metric"], [8, 1, 1, "", "Hartmann6Metric"]], "ax.metrics.hartmann6.AugmentedHartmann6Metric": [[8, 2, 1, "", "f"]], "ax.metrics.hartmann6.Hartmann6Metric": [[8, 2, 1, "", "f"]], "ax.metrics.l2norm": [[8, 1, 1, "", "L2NormMetric"]], "ax.metrics.l2norm.L2NormMetric": [[8, 2, 1, "", "f"]], "ax.metrics.noisy_function": [[8, 1, 1, "", "GenericNoisyFunctionMetric"], [8, 1, 1, "", "NoisyFunctionMetric"]], "ax.metrics.noisy_function.GenericNoisyFunctionMetric": [[8, 2, 1, "", "clone"], [8, 5, 1, "", "param_names"]], "ax.metrics.noisy_function.NoisyFunctionMetric": [[8, 2, 1, "", "clone"], [8, 2, 1, "", "f"], [8, 2, 1, "", "fetch_trial_data"], [8, 2, 1, "", "is_available_while_running"]], "ax.metrics.noisy_function_map": [[8, 1, 1, "", "NoisyFunctionMapMetric"]], "ax.metrics.noisy_function_map.NoisyFunctionMapMetric": [[8, 2, 1, "", "clone"], [8, 2, 1, "", "f"], [8, 2, 1, "", "fetch_trial_data"], [8, 2, 1, "", "is_available_while_running"], [8, 3, 1, "", "map_key_info"], [8, 2, 1, "", "overwrite_existing_data"]], "ax.metrics.sklearn": [[8, 1, 1, "", "SklearnDataset"], [8, 1, 1, "", "SklearnMetric"], [8, 1, 1, "", "SklearnModelType"]], "ax.metrics.sklearn.SklearnDataset": [[8, 3, 1, "", "BOSTON"], [8, 3, 1, "", "CANCER"], [8, 3, 1, "", "DIGITS"]], "ax.metrics.sklearn.SklearnMetric": [[8, 2, 1, "", "clone"], [8, 2, 1, "", "fetch_trial_data"], [8, 2, 1, "", "train_eval"]], "ax.metrics.sklearn.SklearnModelType": [[8, 3, 1, "", "NN"], [8, 3, 1, "", "RF"]], "ax.metrics.tensorboard": [[8, 1, 1, "", "TensorboardMetric"]], "ax.metrics.tensorboard.TensorboardMetric": [[8, 2, 1, "", "bulk_fetch_trial_data"], [8, 2, 1, "", "fetch_trial_data"], [8, 2, 1, "", "is_available_while_running"], [8, 3, 1, "", "map_key_info"]], "ax.metrics.torchx": [[8, 1, 1, "", "TorchXMetric"]], "ax.metrics.torchx.TorchXMetric": [[8, 2, 1, "", "fetch_trial_data"]], "ax.modelbridge": [[9, 0, 0, "-", "base"], [9, 0, 0, "-", "best_model_selector"], [9, 0, 0, "-", "cross_validation"], [9, 0, 0, "-", "discrete"], [9, 0, 0, "-", "dispatch_utils"], [9, 0, 0, "-", "external_generation_node"], [9, 0, 0, "-", "factory"], [9, 0, 0, "-", "generation_node"], [9, 0, 0, "-", "generation_strategy"], [9, 0, 0, "-", "map_torch"], [9, 0, 0, "-", "model_spec"], [9, 0, 0, "-", "modelbridge_utils"], [9, 0, 0, "-", "pairwise"], [9, 0, 0, "-", "prediction_utils"], [9, 0, 0, "-", "registry"], [9, 0, 0, "-", "torch"]], "ax.modelbridge.base": [[9, 1, 1, "", "BaseGenArgs"], [9, 1, 1, "", "GenResults"], [9, 1, 1, "", "ModelBridge"], [9, 4, 1, "", "clamp_observation_features"], [9, 4, 1, "", "gen_arms"], [9, 4, 1, "", "unwrap_observation_data"]], "ax.modelbridge.base.BaseGenArgs": [[9, 3, 1, "", "fixed_features"], [9, 3, 1, "", "optimization_config"], [9, 3, 1, "", "pending_observations"], [9, 3, 1, "", "search_space"]], "ax.modelbridge.base.GenResults": [[9, 3, 1, "", "best_observation_features"], [9, 3, 1, "", "gen_metadata"], [9, 3, 1, "", "observation_features"], [9, 3, 1, "", "weights"]], "ax.modelbridge.base.ModelBridge": [[9, 2, 1, "", "cross_validate"], [9, 2, 1, "", "feature_importances"], [9, 2, 1, "", "gen"], [9, 2, 1, "", "get_training_data"], [9, 5, 1, "", "metric_names"], [9, 5, 1, "", "model_space"], [9, 2, 1, "", "predict"], [9, 5, 1, "", "status_quo"], [9, 5, 1, "", "status_quo_data_by_trial"], [9, 5, 1, "", "statuses_to_fit"], [9, 5, 1, "", "statuses_to_fit_map_metric"], [9, 5, 1, "", "training_in_design"], [9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "transform_observations"], [9, 2, 1, "", "update"]], "ax.modelbridge.best_model_selector": [[9, 1, 1, "", "BestModelSelector"], [9, 1, 1, "", "ReductionCriterion"], [9, 1, 1, "", "SingleDiagnosticBestModelSelector"]], "ax.modelbridge.best_model_selector.BestModelSelector": [[9, 2, 1, "", "best_model"]], "ax.modelbridge.best_model_selector.ReductionCriterion": [[9, 3, 1, "", "MAX"], [9, 3, 1, "", "MEAN"], [9, 3, 1, "", "MIN"]], "ax.modelbridge.best_model_selector.SingleDiagnosticBestModelSelector": [[9, 2, 1, "", "best_model"]], "ax.modelbridge.cross_validation": [[9, 1, 1, "", "AssessModelFitResult"], [9, 1, 1, "", "CVResult"], [9, 4, 1, "", "assess_model_fit"], [9, 4, 1, "", "compute_diagnostics"], [9, 4, 1, "", "compute_model_fit_metrics_from_modelbridge"], [9, 4, 1, "", "cross_validate"], [9, 4, 1, "", "cross_validate_by_trial"], [9, 4, 1, "", "get_fit_and_std_quality_and_generalization_dict"], [9, 4, 1, "", "has_good_opt_config_model_fit"]], "ax.modelbridge.cross_validation.AssessModelFitResult": [[9, 3, 1, "", "bad_fit_metrics_to_fisher_score"], [9, 3, 1, "", "good_fit_metrics_to_fisher_score"]], "ax.modelbridge.cross_validation.CVResult": [[9, 3, 1, "", "observed"], [9, 3, 1, "", "predicted"]], "ax.modelbridge.discrete": [[9, 1, 1, "", "DiscreteModelBridge"]], "ax.modelbridge.discrete.DiscreteModelBridge": [[9, 3, 1, "", "model"], [9, 3, 1, "", "outcomes"], [9, 3, 1, "", "parameters"], [9, 3, 1, "", "search_space"]], "ax.modelbridge.dispatch_utils": [[9, 4, 1, "", "calculate_num_initialization_trials"], [9, 4, 1, "", "choose_generation_strategy"]], "ax.modelbridge.external_generation_node": [[9, 1, 1, "", "ExternalGenerationNode"]], "ax.modelbridge.external_generation_node.ExternalGenerationNode": [[9, 2, 1, "", "fit"], [9, 2, 1, "", "get_next_candidate"], [9, 5, 1, "", "model_spec_to_gen_from"], [9, 2, 1, "", "update_generator_state"]], "ax.modelbridge.factory": [[9, 7, 1, "", "DEFAULT_EHVI_BATCH_LIMIT"], [9, 4, 1, "", "get_GPEI"], [9, 4, 1, "", "get_botorch"], [9, 4, 1, "", "get_empirical_bayes_thompson"], [9, 4, 1, "", "get_factorial"], [9, 4, 1, "", "get_sobol"], [9, 4, 1, "", "get_thompson"], [9, 4, 1, "", "get_uniform"]], "ax.modelbridge.generation_node": [[9, 1, 1, "", "GenerationNode"], [9, 1, 1, "", "GenerationStep"]], "ax.modelbridge.generation_node.GenerationNode": [[9, 5, 1, "", "experiment"], [9, 2, 1, "", "fit"], [9, 2, 1, "", "gen"], [9, 5, 1, "", "generation_strategy"], [9, 2, 1, "", "generator_run_limit"], [9, 5, 1, "", "is_completed"], [9, 5, 1, "", "model_spec_to_gen_from"], [9, 3, 1, "", "model_specs"], [9, 5, 1, "", "model_to_gen_from_name"], [9, 5, 1, "", "node_name"], [9, 5, 1, "", "node_that_generated_last_gr"], [9, 3, 1, "", "should_deduplicate"], [9, 2, 1, "", "should_transition_to_next_node"], [9, 5, 1, "", "transition_criteria"], [9, 5, 1, "", "transition_edges"], [9, 5, 1, "", "trials_from_node"]], "ax.modelbridge.generation_node.GenerationStep": [[9, 3, 1, "", "completion_criteria"], [9, 3, 1, "", "enforce_num_trials"], [9, 2, 1, "", "gen"], [9, 3, 1, "", "index"], [9, 3, 1, "", "max_parallelism"], [9, 3, 1, "", "min_trials_observed"], [9, 3, 1, "", "model"], [9, 3, 1, "", "model_gen_kwargs"], [9, 3, 1, "", "model_kwargs"], [9, 3, 1, "", "model_name"], [9, 5, 1, "", "model_spec"], [9, 3, 1, "", "num_trials"], [9, 3, 1, "", "should_deduplicate"], [9, 3, 1, "", "use_update"]], "ax.modelbridge.generation_strategy": [[9, 1, 1, "", "GenerationStrategy"], [9, 4, 1, "", "step_based_gs_only"]], "ax.modelbridge.generation_strategy.GenerationStrategy": [[9, 2, 1, "", "clone_reset"], [9, 2, 1, "", "current_generator_run_limit"], [9, 5, 1, "", "current_node"], [9, 5, 1, "", "current_node_name"], [9, 5, 1, "", "current_step"], [9, 5, 1, "", "current_step_index"], [9, 5, 1, "", "experiment"], [9, 2, 1, "", "gen"], [9, 2, 1, "", "gen_for_multiple_trials_with_multiple_models"], [9, 2, 1, "", "gen_with_multiple_nodes"], [9, 5, 1, "", "is_node_based"], [9, 5, 1, "", "last_generator_run"], [9, 5, 1, "", "model"], [9, 5, 1, "", "model_transitions"], [9, 5, 1, "", "name"], [9, 5, 1, "", "optimization_complete"], [9, 5, 1, "", "trials_as_df"], [9, 5, 1, "", "uses_non_registered_models"]], "ax.modelbridge.map_torch": [[9, 1, 1, "", "MapTorchModelBridge"]], "ax.modelbridge.map_torch.MapTorchModelBridge": [[9, 5, 1, "", "parameters_with_map_keys"], [9, 5, 1, "", "statuses_to_fit_map_metric"]], "ax.modelbridge.model_spec": [[9, 1, 1, "", "FactoryFunctionModelSpec"], [9, 1, 1, "", "ModelSpec"], [9, 1, 1, "", "ModelSpecJSONEncoder"]], "ax.modelbridge.model_spec.FactoryFunctionModelSpec": [[9, 3, 1, "", "factory_function"], [9, 2, 1, "", "fit"], [9, 3, 1, "", "model_enum"], [9, 5, 1, "", "model_key"]], "ax.modelbridge.model_spec.ModelSpec": [[9, 2, 1, "", "copy"], [9, 2, 1, "", "cross_validate"], [9, 5, 1, "", "cv_results"], [9, 5, 1, "", "diagnostics"], [9, 2, 1, "", "fit"], [9, 5, 1, "", "fitted_model"], [9, 5, 1, "", "fixed_features"], [9, 2, 1, "", "gen"], [9, 3, 1, "", "model_cv_kwargs"], [9, 3, 1, "", "model_enum"], [9, 3, 1, "", "model_gen_kwargs"], [9, 5, 1, "", "model_key"], [9, 3, 1, "", "model_kwargs"]], "ax.modelbridge.model_spec.ModelSpecJSONEncoder": [[9, 2, 1, "", "default"]], "ax.modelbridge.modelbridge_utils": [[9, 4, 1, "", "array_to_observation_data"], [9, 4, 1, "", "check_has_multi_objective_and_data"], [9, 4, 1, "", "extract_objective_thresholds"], [9, 4, 1, "", "extract_objective_weights"], [9, 4, 1, "", "extract_outcome_constraints"], [9, 4, 1, "", "extract_parameter_constraints"], [9, 4, 1, "", "extract_risk_measure"], [9, 4, 1, "", "extract_robust_digest"], [9, 4, 1, "", "extract_search_space_digest"], [9, 4, 1, "", "feasible_hypervolume"], [9, 4, 1, "", "get_fixed_features"], [9, 4, 1, "", "get_fixed_features_from_experiment"], [9, 4, 1, "", "get_pareto_frontier_and_configs"], [9, 4, 1, "", "hypervolume"], [9, 4, 1, "", "observation_data_to_array"], [9, 4, 1, "", "observation_features_to_array"], [9, 4, 1, "", "observed_hypervolume"], [9, 4, 1, "", "observed_pareto_frontier"], [9, 4, 1, "", "pareto_frontier"], [9, 4, 1, "", "parse_observation_features"], [9, 4, 1, "", "pending_observations_as_array_list"], [9, 4, 1, "", "predicted_hypervolume"], [9, 4, 1, "", "predicted_pareto_frontier"], [9, 4, 1, "", "process_contextual_datasets"], [9, 4, 1, "", "transform_callback"], [9, 4, 1, "", "transform_search_space"], [9, 4, 1, "", "validate_and_apply_final_transform"]], "ax.modelbridge.pairwise": [[9, 1, 1, "", "PairwiseModelBridge"]], "ax.modelbridge.prediction_utils": [[9, 4, 1, "", "predict_at_point"], [9, 4, 1, "", "predict_by_features"]], "ax.modelbridge.registry": [[9, 1, 1, "", "ModelRegistryBase"], [9, 1, 1, "", "ModelSetup"], [9, 1, 1, "", "Models"], [9, 4, 1, "", "get_model_from_generator_run"]], "ax.modelbridge.registry.ModelRegistryBase": [[9, 5, 1, "", "model_bridge_class"], [9, 5, 1, "", "model_class"], [9, 2, 1, "", "view_defaults"], [9, 2, 1, "", "view_kwargs"]], "ax.modelbridge.registry.ModelSetup": [[9, 3, 1, "", "bridge_class"], [9, 3, 1, "", "default_model_kwargs"], [9, 3, 1, "", "model_class"], [9, 3, 1, "", "not_saved_model_kwargs"], [9, 3, 1, "", "standard_bridge_kwargs"], [9, 3, 1, "", "transforms"]], "ax.modelbridge.registry.Models": [[9, 3, 1, "", "BOTORCH_MODULAR"], [9, 3, 1, "", "BO_MIXED"], [9, 3, 1, "", "CONTEXT_SACBO"], [9, 3, 1, "", "EMPIRICAL_BAYES_THOMPSON"], [9, 3, 1, "", "FACTORIAL"], [9, 5, 1, "", "FULLYBAYESIAN"], [9, 5, 1, "", "FULLYBAYESIANMOO"], [9, 5, 1, "", "FULLYBAYESIANMOO_MTGP"], [9, 5, 1, "", "FULLYBAYESIAN_MTGP"], [9, 3, 1, "", "GPEI"], [9, 3, 1, "", "LEGACY_BOTORCH"], [9, 3, 1, "", "MOO"], [9, 3, 1, "", "SAASBO"], [9, 3, 1, "", "SAAS_MTGP"], [9, 3, 1, "", "SOBOL"], [9, 3, 1, "", "ST_MTGP"], [9, 3, 1, "", "ST_MTGP_LEGACY"], [9, 3, 1, "", "ST_MTGP_NEHVI"], [9, 3, 1, "", "THOMPSON"], [9, 3, 1, "", "UNIFORM"]], "ax.modelbridge.torch": [[9, 1, 1, "", "TorchModelBridge"], [9, 4, 1, "", "validate_optimization_config"]], "ax.modelbridge.torch.TorchModelBridge": [[9, 2, 1, "", "evaluate_acquisition_function"], [9, 2, 1, "", "feature_importances"], [9, 2, 1, "", "infer_objective_thresholds"], [9, 3, 1, "", "model"], [9, 2, 1, "", "model_best_point"], [9, 3, 1, "", "outcomes"], [9, 3, 1, "", "parameters"]], "ax.modelbridge.transforms": [[9, 0, 0, "-", "base"], [9, 0, 0, "-", "cap_parameter"], [9, 0, 0, "-", "cast"], [9, 0, 0, "-", "centered_unit_x"], [9, 0, 0, "-", "choice_encode"], [9, 0, 0, "-", "convert_metric_names"], [9, 0, 0, "-", "deprecated_transform_mixin"], [9, 0, 0, "-", "derelativize"], [9, 0, 0, "-", "int_range_to_choice"], [9, 0, 0, "-", "int_to_float"], [9, 0, 0, "-", "inverse_gaussian_cdf_y"], [9, 0, 0, "-", "ivw"], [9, 0, 0, "-", "log"], [9, 0, 0, "-", "log_y"], [9, 0, 0, "-", "logit"], [9, 0, 0, "-", "map_unit_x"], [9, 0, 0, "-", "merge_repeated_measurements"], [9, 0, 0, "-", "metrics_as_task"], [9, 0, 0, "-", "one_hot"], [9, 0, 0, "-", "percentile_y"], [9, 0, 0, "-", "power_transform_y"], [9, 0, 0, "-", "relativize"], [9, 0, 0, "-", "remove_fixed"], [9, 0, 0, "-", "rounding"], [9, 0, 0, "-", "search_space_to_choice"], [9, 0, 0, "-", "standardize_y"], [9, 0, 0, "-", "stratified_standardize_y"], [9, 0, 0, "-", "task_encode"], [9, 0, 0, "-", "time_as_feature"], [9, 0, 0, "-", "trial_as_task"], [9, 0, 0, "-", "unit_x"], [9, 0, 0, "-", "utils"], [9, 0, 0, "-", "winsorize"]], "ax.modelbridge.transforms.base": [[9, 1, 1, "", "Transform"]], "ax.modelbridge.transforms.base.Transform": [[9, 3, 1, "", "config"], [9, 3, 1, "", "modelbridge"], [9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "transform_observations"], [9, 2, 1, "", "transform_optimization_config"], [9, 2, 1, "", "transform_search_space"], [9, 2, 1, "", "untransform_observation_features"], [9, 2, 1, "", "untransform_observations"], [9, 2, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.cap_parameter": [[9, 1, 1, "", "CapParameter"]], "ax.modelbridge.transforms.cast": [[9, 1, 1, "", "Cast"]], "ax.modelbridge.transforms.cast.Cast": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.centered_unit_x": [[9, 1, 1, "", "CenteredUnitX"]], "ax.modelbridge.transforms.centered_unit_x.CenteredUnitX": [[9, 3, 1, "", "target_lb"], [9, 3, 1, "", "target_range"]], "ax.modelbridge.transforms.choice_encode": [[9, 1, 1, "", "ChoiceEncode"], [9, 1, 1, "", "ChoiceToNumericChoice"], [9, 1, 1, "", "OrderedChoiceEncode"], [9, 1, 1, "", "OrderedChoiceToIntegerRange"], [9, 4, 1, "", "transform_choice_values"]], "ax.modelbridge.transforms.choice_encode.ChoiceToNumericChoice": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.convert_metric_names": [[9, 1, 1, "", "ConvertMetricNames"], [9, 4, 1, "", "convert_mt_observations"], [9, 4, 1, "", "tconfig_from_mt_experiment"]], "ax.modelbridge.transforms.convert_metric_names.ConvertMetricNames": [[9, 2, 1, "", "untransform_observations"]], "ax.modelbridge.transforms.derelativize": [[9, 1, 1, "", "Derelativize"]], "ax.modelbridge.transforms.derelativize.Derelativize": [[9, 2, 1, "", "transform_optimization_config"], [9, 2, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.int_range_to_choice": [[9, 1, 1, "", "IntRangeToChoice"]], "ax.modelbridge.transforms.int_to_float": [[9, 1, 1, "", "IntToFloat"]], "ax.modelbridge.transforms.int_to_float.IntToFloat": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.inverse_gaussian_cdf_y": [[9, 1, 1, "", "InverseGaussianCdfY"]], "ax.modelbridge.transforms.ivw": [[9, 1, 1, "", "IVW"], [9, 4, 1, "", "ivw_metric_merge"]], "ax.modelbridge.transforms.log": [[9, 1, 1, "", "Log"]], "ax.modelbridge.transforms.log.Log": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.log_y": [[9, 1, 1, "", "LogY"], [9, 4, 1, "", "lognorm_to_norm"], [9, 4, 1, "", "match_ci_width"], [9, 4, 1, "", "norm_to_lognorm"]], "ax.modelbridge.transforms.log_y.LogY": [[9, 2, 1, "", "transform_optimization_config"], [9, 2, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.logit": [[9, 1, 1, "", "Logit"]], "ax.modelbridge.transforms.logit.Logit": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.map_unit_x": [[9, 1, 1, "", "MapUnitX"]], "ax.modelbridge.transforms.map_unit_x.MapUnitX": [[9, 3, 1, "", "target_lb"], [9, 3, 1, "", "target_range"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.merge_repeated_measurements": [[9, 1, 1, "", "MergeRepeatedMeasurements"]], "ax.modelbridge.transforms.merge_repeated_measurements.MergeRepeatedMeasurements": [[9, 2, 1, "", "transform_observations"]], "ax.modelbridge.transforms.metrics_as_task": [[9, 1, 1, "", "MetricsAsTask"]], "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "transform_observations"], [9, 2, 1, "", "untransform_observation_features"], [9, 2, 1, "", "untransform_observations"]], "ax.modelbridge.transforms.one_hot": [[9, 1, 1, "", "OneHot"], [9, 1, 1, "", "OneHotEncoder"]], "ax.modelbridge.transforms.one_hot.OneHot": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.one_hot.OneHotEncoder": [[9, 2, 1, "", "inverse_transform"], [9, 2, 1, "", "transform"]], "ax.modelbridge.transforms.percentile_y": [[9, 1, 1, "", "PercentileY"]], "ax.modelbridge.transforms.power_transform_y": [[9, 1, 1, "", "PowerTransformY"]], "ax.modelbridge.transforms.power_transform_y.PowerTransformY": [[9, 2, 1, "", "transform_optimization_config"], [9, 2, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.relativize": [[9, 1, 1, "", "BaseRelativize"], [9, 1, 1, "", "Relativize"], [9, 1, 1, "", "RelativizeWithConstantControl"]], "ax.modelbridge.transforms.relativize.BaseRelativize": [[9, 3, 1, "", "MISSING_STATUS_QUO_ERROR"], [9, 5, 1, "", "control_as_constant"], [9, 2, 1, "", "transform_observations"], [9, 2, 1, "", "transform_optimization_config"], [9, 2, 1, "", "untransform_observations"], [9, 2, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.relativize.Relativize": [[9, 5, 1, "", "control_as_constant"]], "ax.modelbridge.transforms.relativize.RelativizeWithConstantControl": [[9, 5, 1, "", "control_as_constant"]], "ax.modelbridge.transforms.remove_fixed": [[9, 1, 1, "", "RemoveFixed"]], "ax.modelbridge.transforms.remove_fixed.RemoveFixed": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.rounding": [[9, 4, 1, "", "contains_constrained_integer"], [9, 4, 1, "", "randomized_onehot_round"], [9, 4, 1, "", "randomized_round"], [9, 4, 1, "", "randomized_round_parameters"], [9, 4, 1, "", "strict_onehot_round"]], "ax.modelbridge.transforms.search_space_to_choice": [[9, 1, 1, "", "SearchSpaceToChoice"]], "ax.modelbridge.transforms.search_space_to_choice.SearchSpaceToChoice": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.standardize_y": [[9, 1, 1, "", "StandardizeY"], [9, 4, 1, "", "compute_standardization_parameters"]], "ax.modelbridge.transforms.standardize_y.StandardizeY": [[9, 2, 1, "", "transform_optimization_config"], [9, 2, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.stratified_standardize_y": [[9, 1, 1, "", "StratifiedStandardizeY"]], "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY": [[9, 2, 1, "", "transform_observations"], [9, 2, 1, "", "transform_optimization_config"], [9, 2, 1, "", "untransform_observations"], [9, 2, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.task_encode": [[9, 1, 1, "", "TaskChoiceToIntTaskChoice"], [9, 1, 1, "", "TaskEncode"]], "ax.modelbridge.transforms.time_as_feature": [[9, 1, 1, "", "TimeAsFeature"]], "ax.modelbridge.transforms.time_as_feature.TimeAsFeature": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.trial_as_task": [[9, 1, 1, "", "TrialAsTask"]], "ax.modelbridge.transforms.trial_as_task.TrialAsTask": [[9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.unit_x": [[9, 1, 1, "", "UnitX"]], "ax.modelbridge.transforms.unit_x.UnitX": [[9, 3, 1, "", "target_lb"], [9, 3, 1, "", "target_range"], [9, 2, 1, "", "transform_observation_features"], [9, 2, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.utils": [[9, 1, 1, "", "ClosestLookupDict"], [9, 4, 1, "", "construct_new_search_space"], [9, 4, 1, "", "derelativize_optimization_config_with_raw_status_quo"], [9, 4, 1, "", "get_data"], [9, 4, 1, "", "match_ci_width_truncated"]], "ax.modelbridge.transforms.winsorize": [[9, 1, 1, "", "Winsorize"]], "ax.modelbridge.transforms.winsorize.Winsorize": [[9, 3, 1, "", "cutoffs"]], "ax.models": [[10, 0, 0, "-", "base"], [10, 0, 0, "-", "discrete_base"], [10, 0, 0, "-", "model_utils"], [10, 0, 0, "-", "torch_base"], [10, 0, 0, "-", "types"], [10, 0, 0, "-", "winsorization_config"]], "ax.models.base": [[10, 1, 1, "", "Model"]], "ax.models.base.Model": [[10, 2, 1, "", "deserialize_state"], [10, 2, 1, "", "feature_importances"], [10, 2, 1, "", "serialize_state"]], "ax.models.discrete": [[10, 0, 0, "-", "eb_thompson"], [10, 0, 0, "-", "full_factorial"], [10, 0, 0, "-", "thompson"]], "ax.models.discrete.eb_thompson": [[10, 1, 1, "", "EmpiricalBayesThompsonSampler"]], "ax.models.discrete.full_factorial": [[10, 1, 1, "", "FullFactorialGenerator"]], "ax.models.discrete.full_factorial.FullFactorialGenerator": [[10, 2, 1, "", "gen"]], "ax.models.discrete.thompson": [[10, 1, 1, "", "ThompsonSampler"]], "ax.models.discrete.thompson.ThompsonSampler": [[10, 2, 1, "", "fit"], [10, 2, 1, "", "gen"], [10, 2, 1, "", "predict"]], "ax.models.discrete_base": [[10, 1, 1, "", "DiscreteModel"]], "ax.models.discrete_base.DiscreteModel": [[10, 2, 1, "", "best_point"], [10, 2, 1, "", "cross_validate"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "gen"], [10, 2, 1, "", "predict"]], "ax.models.model_utils": [[10, 1, 1, "", "TorchModelLike"], [10, 4, 1, "", "add_fixed_features"], [10, 4, 1, "", "as_array"], [10, 4, 1, "", "best_in_sample_point"], [10, 4, 1, "", "best_observed_point"], [10, 4, 1, "", "check_duplicate"], [10, 4, 1, "", "check_param_constraints"], [10, 4, 1, "", "enumerate_discrete_combinations"], [10, 4, 1, "", "filter_constraints_and_fixed_features"], [10, 4, 1, "", "get_observed"], [10, 4, 1, "", "mk_discrete_choices"], [10, 4, 1, "", "rejection_sample"], [10, 4, 1, "", "tunable_feature_indices"], [10, 4, 1, "", "validate_bounds"]], "ax.models.model_utils.TorchModelLike": [[10, 2, 1, "", "predict"]], "ax.models.random": [[10, 0, 0, "-", "base"], [10, 0, 0, "-", "sobol"], [10, 0, 0, "-", "uniform"]], "ax.models.random.base": [[10, 1, 1, "", "RandomModel"]], "ax.models.random.base.RandomModel": [[10, 3, 1, "", "deduplicate"], [10, 3, 1, "", "fallback_to_sample_polytope"], [10, 2, 1, "", "gen"], [10, 3, 1, "", "generated_points"], [10, 3, 1, "", "seed"]], "ax.models.random.sobol": [[10, 1, 1, "", "SobolGenerator"]], "ax.models.random.sobol.SobolGenerator": [[10, 5, 1, "", "engine"], [10, 2, 1, "", "gen"], [10, 2, 1, "", "init_engine"], [10, 3, 1, "", "init_position"], [10, 3, 1, "", "scramble"]], "ax.models.random.uniform": [[10, 1, 1, "", "UniformGenerator"]], "ax.models.torch": [[10, 0, 0, "-", "botorch"], [10, 0, 0, "-", "botorch_defaults"], [10, 0, 0, "-", "botorch_kg"], [10, 0, 0, "-", "botorch_mes"], [10, 0, 0, "-", "botorch_moo"], [10, 0, 0, "-", "botorch_moo_defaults"], [10, 0, 0, "-", "cbo_lcea"], [10, 0, 0, "-", "cbo_lcem"], [10, 0, 0, "-", "cbo_sac"], [10, 0, 0, "-", "randomforest"], [10, 0, 0, "-", "utils"]], "ax.models.torch.botorch": [[10, 1, 1, "", "BotorchModel"], [10, 4, 1, "", "get_feature_importances_from_botorch_model"], [10, 4, 1, "", "get_rounding_func"]], "ax.models.torch.botorch.BotorchModel": [[10, 3, 1, "", "Xs"], [10, 3, 1, "", "Ys"], [10, 3, 1, "", "Yvars"], [10, 2, 1, "", "best_point"], [10, 2, 1, "", "cross_validate"], [10, 2, 1, "", "feature_importances"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "gen"], [10, 5, 1, "", "model"], [10, 2, 1, "", "predict"], [10, 5, 1, "", "search_space_digest"]], "ax.models.torch.botorch_defaults": [[10, 1, 1, "", "TAcqfConstructor"], [10, 4, 1, "", "get_NEI"], [10, 4, 1, "", "get_acqf"], [10, 4, 1, "", "get_and_fit_model"], [10, 4, 1, "", "get_qEI"], [10, 4, 1, "", "get_qLogEI"], [10, 4, 1, "", "get_qLogNEI"], [10, 4, 1, "", "get_warping_transform"], [10, 4, 1, "", "recommend_best_observed_point"], [10, 4, 1, "", "recommend_best_out_of_sample_point"], [10, 4, 1, "", "scipy_optimizer"]], "ax.models.torch.botorch_kg": [[10, 1, 1, "", "KnowledgeGradient"]], "ax.models.torch.botorch_kg.KnowledgeGradient": [[10, 2, 1, "", "gen"]], "ax.models.torch.botorch_mes": [[10, 1, 1, "", "MaxValueEntropySearch"]], "ax.models.torch.botorch_mes.MaxValueEntropySearch": [[10, 2, 1, "", "gen"]], "ax.models.torch.botorch_modular": [[10, 0, 0, "-", "acquisition"], [10, 0, 0, "-", "kernels"], [10, 0, 0, "-", "model"], [10, 0, 0, "-", "optimizer_argparse"], [10, 0, 0, "-", "sebo"], [10, 0, 0, "-", "surrogate"], [10, 0, 0, "-", "utils"]], "ax.models.torch.botorch_modular.acquisition": [[10, 1, 1, "", "Acquisition"]], "ax.models.torch.botorch_modular.acquisition.Acquisition": [[10, 3, 1, "", "acqf"], [10, 5, 1, "", "botorch_acqf_class"], [10, 2, 1, "", "compute_model_dependencies"], [10, 5, 1, "", "device"], [10, 5, 1, "", "dtype"], [10, 2, 1, "", "evaluate"], [10, 2, 1, "", "get_botorch_objective_and_transform"], [10, 5, 1, "", "objective_thresholds"], [10, 5, 1, "", "objective_weights"], [10, 2, 1, "", "optimize"], [10, 3, 1, "", "options"], [10, 3, 1, "", "surrogates"]], "ax.models.torch.botorch_modular.input_constructors": [[10, 0, 0, "-", "covar_modules"], [10, 0, 0, "-", "input_transforms"], [10, 0, 0, "-", "outcome_transform"]], "ax.models.torch.botorch_modular.kernels": [[10, 1, 1, "", "ScaleMaternKernel"], [10, 1, 1, "", "TemporalKernel"]], "ax.models.torch.botorch_modular.model": [[10, 1, 1, "", "BoTorchModel"], [10, 1, 1, "", "SurrogateSpec"], [10, 4, 1, "", "single_surrogate_only"]], "ax.models.torch.botorch_modular.model.BoTorchModel": [[10, 5, 1, "", "Xs"], [10, 3, 1, "", "acquisition_class"], [10, 3, 1, "", "acquisition_options"], [10, 2, 1, "", "best_point"], [10, 5, 1, "", "botorch_acqf_class"], [10, 2, 1, "", "cross_validate"], [10, 5, 1, "", "device"], [10, 5, 1, "", "dtype"], [10, 2, 1, "", "evaluate_acquisition_function"], [10, 2, 1, "", "feature_importances"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "gen"], [10, 5, 1, "", "outcomes_by_surrogate_label"], [10, 5, 1, "", "output_order"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "predict_from_surrogate"], [10, 5, 1, "", "search_space_digest"], [10, 5, 1, "", "surrogate"], [10, 3, 1, "", "surrogate_specs"], [10, 5, 1, "", "surrogates"]], "ax.models.torch.botorch_modular.model.SurrogateSpec": [[10, 3, 1, "", "allow_batched_models"], [10, 3, 1, "", "botorch_model_class"], [10, 3, 1, "", "botorch_model_kwargs"], [10, 3, 1, "", "covar_module_class"], [10, 3, 1, "", "covar_module_kwargs"], [10, 3, 1, "", "input_transform_classes"], [10, 3, 1, "", "input_transform_options"], [10, 3, 1, "", "likelihood_class"], [10, 3, 1, "", "likelihood_kwargs"], [10, 3, 1, "", "mll_class"], [10, 3, 1, "", "mll_kwargs"], [10, 3, 1, "", "outcome_transform_classes"], [10, 3, 1, "", "outcome_transform_options"], [10, 3, 1, "", "outcomes"]], "ax.models.torch.botorch_modular.sebo": [[10, 4, 1, "", "L1_norm_func"], [10, 1, 1, "", "SEBOAcquisition"], [10, 4, 1, "", "clamp_candidates"], [10, 4, 1, "", "get_batch_initial_conditions"]], "ax.models.torch.botorch_modular.sebo.SEBOAcquisition": [[10, 2, 1, "", "optimize"]], "ax.models.torch.botorch_modular.surrogate": [[10, 1, 1, "", "Surrogate"]], "ax.models.torch.botorch_modular.surrogate.Surrogate": [[10, 5, 1, "", "Xs"], [10, 2, 1, "", "best_in_sample_point"], [10, 2, 1, "", "best_out_of_sample_point"], [10, 2, 1, "", "clone_reset"], [10, 2, 1, "", "compute_diagnostics"], [10, 5, 1, "", "device"], [10, 5, 1, "", "dtype"], [10, 2, 1, "", "fit"], [10, 5, 1, "", "model"], [10, 5, 1, "", "outcomes"], [10, 2, 1, "", "pareto_frontier"], [10, 2, 1, "", "predict"], [10, 5, 1, "", "training_data"]], "ax.models.torch.botorch_modular.utils": [[10, 4, 1, "", "check_outcome_dataset_match"], [10, 4, 1, "", "choose_botorch_acqf_class"], [10, 4, 1, "", "choose_model_class"], [10, 4, 1, "", "construct_acquisition_and_optimizer_options"], [10, 4, 1, "", "convert_to_block_design"], [10, 4, 1, "", "fit_botorch_model"], [10, 4, 1, "", "get_post_processing_func"], [10, 4, 1, "", "get_subset_datasets"], [10, 4, 1, "", "subset_state_dict"], [10, 4, 1, "", "use_model_list"]], "ax.models.torch.botorch_moo": [[10, 1, 1, "", "MultiObjectiveBotorchModel"]], "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel": [[10, 3, 1, "", "Xs"], [10, 3, 1, "", "Ys"], [10, 3, 1, "", "Yvars"], [10, 2, 1, "", "gen"]], "ax.models.torch.botorch_moo_defaults": [[10, 4, 1, "", "get_EHVI"], [10, 4, 1, "", "get_NEHVI"], [10, 4, 1, "", "get_qLogEHVI"], [10, 4, 1, "", "get_qLogNEHVI"], [10, 4, 1, "", "get_weighted_mc_objective_and_objective_thresholds"], [10, 4, 1, "", "infer_objective_thresholds"], [10, 4, 1, "", "pareto_frontier_evaluator"], [10, 4, 1, "", "scipy_optimizer_list"]], "ax.models.torch.cbo_lcea": [[10, 1, 1, "", "LCEABO"], [10, 4, 1, "", "get_map_model"]], "ax.models.torch.cbo_lcea.LCEABO": [[10, 2, 1, "", "best_point"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "get_and_fit_model"], [10, 5, 1, "", "model"]], "ax.models.torch.cbo_lcem": [[10, 1, 1, "", "LCEMBO"]], "ax.models.torch.cbo_lcem.LCEMBO": [[10, 2, 1, "", "get_and_fit_model"]], "ax.models.torch.cbo_sac": [[10, 1, 1, "", "SACBO"], [10, 4, 1, "", "generate_model_space_decomposition"]], "ax.models.torch.cbo_sac.SACBO": [[10, 2, 1, "", "fit"], [10, 2, 1, "", "get_and_fit_model"]], "ax.models.torch.randomforest": [[10, 1, 1, "", "RandomForest"]], "ax.models.torch.randomforest.RandomForest": [[10, 2, 1, "", "cross_validate"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "predict"]], "ax.models.torch.utils": [[10, 1, 1, "", "SubsetModelData"], [10, 4, 1, "", "get_botorch_objective_and_transform"], [10, 4, 1, "", "get_out_of_sample_best_point_acqf"], [10, 4, 1, "", "is_noiseless"], [10, 4, 1, "", "normalize_indices"], [10, 4, 1, "", "pick_best_out_of_sample_point_acqf_class"], [10, 4, 1, "", "predict_from_model"], [10, 4, 1, "", "randomize_objective_weights"], [10, 4, 1, "", "subset_model"], [10, 4, 1, "", "tensor_callable_to_array_callable"]], "ax.models.torch.utils.SubsetModelData": [[10, 3, 1, "", "indices"], [10, 3, 1, "", "model"], [10, 3, 1, "", "objective_thresholds"], [10, 3, 1, "", "objective_weights"], [10, 3, 1, "", "outcome_constraints"]], "ax.models.torch_base": [[10, 1, 1, "", "TorchGenResults"], [10, 1, 1, "", "TorchModel"], [10, 1, 1, "", "TorchOptConfig"]], "ax.models.torch_base.TorchGenResults": [[10, 3, 1, "", "candidate_metadata"], [10, 3, 1, "", "gen_metadata"], [10, 3, 1, "", "points"], [10, 3, 1, "", "weights"]], "ax.models.torch_base.TorchModel": [[10, 2, 1, "", "best_point"], [10, 2, 1, "", "cross_validate"], [10, 3, 1, "", "device"], [10, 3, 1, "", "dtype"], [10, 2, 1, "", "evaluate_acquisition_function"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "gen"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "update"]], "ax.models.torch_base.TorchOptConfig": [[10, 3, 1, "", "fit_out_of_design"], [10, 3, 1, "id0", "fixed_features"], [10, 3, 1, "id1", "is_moo"], [10, 3, 1, "id2", "linear_constraints"], [10, 3, 1, "id3", "model_gen_options"], [10, 3, 1, "id4", "objective_thresholds"], [10, 3, 1, "id5", "objective_weights"], [10, 3, 1, "id6", "opt_config_metrics"], [10, 3, 1, "id7", "outcome_constraints"], [10, 3, 1, "id8", "pending_observations"], [10, 3, 1, "id9", "risk_measure"], [10, 3, 1, "id10", "rounding_func"]], "ax.models.winsorization_config": [[10, 1, 1, "", "WinsorizationConfig"]], "ax.models.winsorization_config.WinsorizationConfig": [[10, 3, 1, "", "lower_boundary"], [10, 3, 1, "", "lower_quantile_margin"], [10, 3, 1, "", "upper_boundary"], [10, 3, 1, "", "upper_quantile_margin"]], "ax.plot": [[11, 0, 0, "-", "bandit_rollout"], [11, 0, 0, "-", "base"], [11, 0, 0, "-", "color"], [11, 0, 0, "-", "contour"], [11, 0, 0, "-", "diagnostic"], [11, 0, 0, "-", "feature_importances"], [11, 0, 0, "-", "helper"], [11, 0, 0, "-", "marginal_effects"], [11, 0, 0, "-", "parallel_coordinates"], [11, 0, 0, "-", "pareto_frontier"], [11, 0, 0, "-", "pareto_utils"], [11, 0, 0, "-", "render"], [11, 0, 0, "-", "scatter"], [11, 0, 0, "-", "slice"], [11, 0, 0, "-", "table_view"], [11, 0, 0, "-", "trace"]], "ax.plot.bandit_rollout": [[11, 4, 1, "", "plot_bandit_rollout"]], "ax.plot.base": [[11, 1, 1, "", "AxPlotConfig"], [11, 1, 1, "", "AxPlotTypes"], [11, 1, 1, "", "PlotData"], [11, 1, 1, "", "PlotInSampleArm"], [11, 1, 1, "", "PlotMetric"], [11, 1, 1, "", "PlotOutOfSampleArm"]], "ax.plot.base.AxPlotTypes": [[11, 3, 1, "", "BANDIT_ROLLOUT"], [11, 3, 1, "", "CONTOUR"], [11, 3, 1, "", "GENERIC"], [11, 3, 1, "", "HTML"], [11, 3, 1, "", "INTERACT_CONTOUR"], [11, 3, 1, "", "INTERACT_SLICE"], [11, 3, 1, "", "SLICE"]], "ax.plot.base.PlotData": [[11, 3, 1, "", "in_sample"], [11, 3, 1, "", "metrics"], [11, 3, 1, "", "out_of_sample"], [11, 3, 1, "", "status_quo_name"]], "ax.plot.base.PlotInSampleArm": [[11, 3, 1, "", "context_stratum"], [11, 3, 1, "", "name"], [11, 3, 1, "", "parameters"], [11, 3, 1, "", "se"], [11, 3, 1, "", "se_hat"], [11, 3, 1, "", "y"], [11, 3, 1, "", "y_hat"]], "ax.plot.base.PlotMetric": [[11, 3, 1, "", "metric"], [11, 3, 1, "", "pred"], [11, 3, 1, "", "rel"]], "ax.plot.base.PlotOutOfSampleArm": [[11, 3, 1, "", "context_stratum"], [11, 3, 1, "", "name"], [11, 3, 1, "", "parameters"], [11, 3, 1, "", "se_hat"], [11, 3, 1, "", "y_hat"]], "ax.plot.color": [[11, 1, 1, "", "COLORS"], [11, 4, 1, "", "plotly_color_scale"], [11, 4, 1, "", "rgba"]], "ax.plot.color.COLORS": [[11, 3, 1, "", "CORAL"], [11, 3, 1, "", "LIGHT_PURPLE"], [11, 3, 1, "", "ORANGE"], [11, 3, 1, "", "PINK"], [11, 3, 1, "", "STEELBLUE"], [11, 3, 1, "", "TEAL"]], "ax.plot.contour": [[11, 4, 1, "", "interact_contour"], [11, 4, 1, "", "interact_contour_plotly"], [11, 4, 1, "", "plot_contour"], [11, 4, 1, "", "plot_contour_plotly"], [11, 4, 1, "", "short_name"]], "ax.plot.diagnostic": [[11, 4, 1, "", "interact_batch_comparison"], [11, 4, 1, "", "interact_cross_validation"], [11, 4, 1, "", "interact_cross_validation_plotly"], [11, 4, 1, "", "interact_empirical_model_validation"], [11, 4, 1, "", "tile_cross_validation"]], "ax.plot.feature_importances": [[11, 4, 1, "", "plot_feature_importance"], [11, 4, 1, "", "plot_feature_importance_by_feature"], [11, 4, 1, "", "plot_feature_importance_by_feature_plotly"], [11, 4, 1, "", "plot_feature_importance_by_metric"], [11, 4, 1, "", "plot_feature_importance_by_metric_plotly"], [11, 4, 1, "", "plot_feature_importance_plotly"], [11, 4, 1, "", "plot_relative_feature_importance"], [11, 4, 1, "", "plot_relative_feature_importance_plotly"]], "ax.plot.helper": [[11, 4, 1, "", "arm_name_to_sort_key"], [11, 4, 1, "", "arm_name_to_tuple"], [11, 4, 1, "", "axis_range"], [11, 4, 1, "", "build_filter_trial"], [11, 4, 1, "", "compose_annotation"], [11, 4, 1, "", "contour_config_to_trace"], [11, 4, 1, "", "extend_range"], [11, 4, 1, "", "get_fixed_values"], [11, 4, 1, "", "get_grid_for_parameter"], [11, 4, 1, "", "get_plot_data"], [11, 4, 1, "", "get_range_parameter"], [11, 4, 1, "", "get_range_parameters"], [11, 4, 1, "", "get_range_parameters_from_list"], [11, 4, 1, "", "infer_is_relative"], [11, 4, 1, "", "relativize"], [11, 4, 1, "", "relativize_data"], [11, 4, 1, "", "resize_subtitles"], [11, 4, 1, "", "rgb"], [11, 4, 1, "", "slice_config_to_trace"]], "ax.plot.marginal_effects": [[11, 4, 1, "", "plot_marginal_effects"]], "ax.plot.parallel_coordinates": [[11, 4, 1, "", "plot_parallel_coordinates"], [11, 4, 1, "", "plot_parallel_coordinates_plotly"], [11, 4, 1, "", "prepare_experiment_for_plotting"]], "ax.plot.pareto_frontier": [[11, 4, 1, "", "interact_multiple_pareto_frontier"], [11, 4, 1, "", "interact_pareto_frontier"], [11, 4, 1, "", "plot_multiple_pareto_frontiers"], [11, 4, 1, "", "plot_pareto_frontier"], [11, 4, 1, "", "scatter_plot_with_hypervolume_trace_plotly"], [11, 4, 1, "", "scatter_plot_with_pareto_frontier"], [11, 4, 1, "", "scatter_plot_with_pareto_frontier_plotly"]], "ax.plot.pareto_utils": [[11, 1, 1, "", "ParetoFrontierResults"], [11, 4, 1, "", "compute_posterior_pareto_frontier"], [11, 4, 1, "", "get_observed_pareto_frontiers"], [11, 4, 1, "", "get_tensor_converter_model"], [11, 4, 1, "", "infer_reference_point_from_experiment"], [11, 4, 1, "", "to_nonrobust_search_space"]], "ax.plot.pareto_utils.ParetoFrontierResults": [[11, 3, 1, "", "absolute_metrics"], [11, 3, 1, "", "arm_names"], [11, 3, 1, "", "means"], [11, 3, 1, "", "objective_thresholds"], [11, 3, 1, "", "param_dicts"], [11, 3, 1, "", "primary_metric"], [11, 3, 1, "", "secondary_metric"], [11, 3, 1, "", "sems"]], "ax.plot.render": [[11, 4, 1, "", "plot_config_to_html"]], "ax.plot.scatter": [[11, 4, 1, "", "interact_fitted"], [11, 4, 1, "", "interact_fitted_plotly"], [11, 4, 1, "", "lattice_multiple_metrics"], [11, 4, 1, "", "plot_fitted"], [11, 4, 1, "", "plot_multiple_metrics"], [11, 4, 1, "", "plot_objective_vs_constraints"], [11, 4, 1, "", "tile_fitted"], [11, 4, 1, "", "tile_observations"]], "ax.plot.slice": [[11, 4, 1, "", "interact_slice"], [11, 4, 1, "", "interact_slice_plotly"], [11, 4, 1, "", "plot_slice"], [11, 4, 1, "", "plot_slice_plotly"]], "ax.plot.table_view": [[11, 4, 1, "", "get_color"], [11, 4, 1, "", "table_view_plot"]], "ax.plot.trace": [[11, 4, 1, "", "compute_running_feasible_optimum_df"], [11, 4, 1, "", "get_running_trials_per_minute"], [11, 4, 1, "", "map_data_multiple_metrics_dropdown_plotly"], [11, 4, 1, "", "map_data_single_trace_scatters"], [11, 4, 1, "", "mean_markers_scatter"], [11, 4, 1, "", "mean_trace_scatter"], [11, 4, 1, "", "optimization_times"], [11, 4, 1, "", "optimization_trace_all_methods"], [11, 4, 1, "", "optimization_trace_single_method"], [11, 4, 1, "", "optimization_trace_single_method_plotly"], [11, 4, 1, "", "optimum_objective_scatter"], [11, 4, 1, "", "plot_objective_value_vs_trial_index"], [11, 4, 1, "", "sem_range_scatter"]], "ax.runners": [[12, 0, 0, "-", "simulated_backend"], [12, 0, 0, "-", "single_running_trial_mixin"], [12, 0, 0, "-", "synthetic"], [12, 0, 0, "-", "torchx"]], "ax.runners.simulated_backend": [[12, 1, 1, "", "SimulatedBackendRunner"], [12, 4, 1, "", "sample_runtime_unif"]], "ax.runners.simulated_backend.SimulatedBackendRunner": [[12, 2, 1, "", "poll_trial_status"], [12, 2, 1, "", "run"], [12, 2, 1, "", "stop"]], "ax.runners.single_running_trial_mixin": [[12, 1, 1, "", "SingleRunningTrialMixin"]], "ax.runners.single_running_trial_mixin.SingleRunningTrialMixin": [[12, 2, 1, "", "poll_trial_status"]], "ax.runners.synthetic": [[12, 1, 1, "", "SyntheticRunner"]], "ax.runners.synthetic.SyntheticRunner": [[12, 2, 1, "", "poll_trial_status"], [12, 2, 1, "", "run"], [12, 5, 1, "", "run_metadata_report_keys"]], "ax.runners.torchx": [[12, 1, 1, "", "TorchXRunner"]], "ax.runners.torchx.TorchXRunner": [[12, 2, 1, "", "poll_trial_status"], [12, 2, 1, "", "run"], [12, 2, 1, "", "stop"]], "ax.service": [[13, 0, 0, "-", "ax_client"], [13, 0, 0, "-", "interactive_loop"], [13, 0, 0, "-", "managed_loop"], [13, 0, 0, "-", "scheduler"]], "ax.service.ax_client": [[13, 1, 1, "", "AxClient"]], "ax.service.ax_client.AxClient": [[13, 2, 1, "", "abandon_trial"], [13, 2, 1, "", "add_tracking_metrics"], [13, 2, 1, "", "attach_trial"], [13, 2, 1, "", "complete_trial"], [13, 2, 1, "", "create_experiment"], [13, 5, 1, "", "early_stopping_strategy"], [13, 2, 1, "", "estimate_early_stopping_savings"], [13, 5, 1, "", "experiment"], [13, 2, 1, "", "fit_model"], [13, 2, 1, "", "from_json_snapshot"], [13, 5, 1, "", "generation_strategy"], [13, 2, 1, "", "get_best_trial"], [13, 2, 1, "", "get_contour_plot"], [13, 2, 1, "", "get_current_trial_generation_limit"], [13, 2, 1, "", "get_feature_importances"], [13, 2, 1, "", "get_hypervolume"], [13, 2, 1, "", "get_max_parallelism"], [13, 2, 1, "", "get_model_predictions"], [13, 2, 1, "", "get_model_predictions_for_parameterizations"], [13, 2, 1, "", "get_next_trial"], [13, 2, 1, "", "get_next_trials"], [13, 2, 1, "", "get_optimization_trace"], [13, 2, 1, "", "get_pareto_optimal_parameters"], [13, 2, 1, "", "get_recommended_max_parallelism"], [13, 2, 1, "", "get_trace"], [13, 2, 1, "", "get_trace_by_progression"], [13, 2, 1, "", "get_trial"], [13, 2, 1, "", "get_trial_parameters"], [13, 2, 1, "", "get_trials_data_frame"], [13, 5, 1, "", "global_stopping_strategy"], [13, 2, 1, "", "load"], [13, 2, 1, "", "load_experiment"], [13, 2, 1, "", "load_experiment_from_database"], [13, 2, 1, "", "load_from_json_file"], [13, 2, 1, "", "log_trial_failure"], [13, 5, 1, "", "metric_definitions"], [13, 5, 1, "", "metric_names"], [13, 5, 1, "", "objective"], [13, 5, 1, "", "objective_name"], [13, 5, 1, "", "objective_names"], [13, 2, 1, "", "remove_tracking_metric"], [13, 2, 1, "", "save"], [13, 2, 1, "", "save_to_json_file"], [13, 2, 1, "", "set_optimization_config"], [13, 2, 1, "", "set_search_space"], [13, 2, 1, "", "set_status_quo"], [13, 2, 1, "", "should_stop_trials_early"], [13, 5, 1, "", "status_quo"], [13, 2, 1, "", "stop_trial_early"], [13, 2, 1, "", "to_json_snapshot"], [13, 2, 1, "", "update_running_trial_with_intermediate_data"], [13, 2, 1, "", "update_trial_data"], [13, 2, 1, "", "verify_trial_parameterization"]], "ax.service.interactive_loop": [[13, 4, 1, "", "ax_client_candidate_generator"], [13, 4, 1, "", "ax_client_data_attacher"], [13, 4, 1, "", "interactive_optimize"], [13, 4, 1, "", "interactive_optimize_with_client"]], "ax.service.managed_loop": [[13, 1, 1, "", "OptimizationLoop"], [13, 4, 1, "", "optimize"]], "ax.service.managed_loop.OptimizationLoop": [[13, 2, 1, "", "full_run"], [13, 2, 1, "", "get_best_point"], [13, 2, 1, "", "get_current_model"], [13, 2, 1, "", "run_trial"], [13, 2, 1, "", "with_evaluation_function"], [13, 2, 1, "", "with_runners_and_metrics"]], "ax.service.scheduler": [[13, 1, 1, "", "ExperimentStatusProperties"], [13, 6, 1, "", "FailureRateExceededError"], [13, 1, 1, "", "OptimizationResult"], [13, 1, 1, "", "RunTrialsStatus"], [13, 1, 1, "", "Scheduler"], [13, 6, 1, "", "SchedulerInternalError"], [13, 4, 1, "", "get_fitted_model_bridge"]], "ax.service.scheduler.ExperimentStatusProperties": [[13, 3, 1, "", "NUM_TRIALS_RUN_PER_CALL"], [13, 3, 1, "", "RESUMED_FROM_STORAGE_TIMESTAMPS"], [13, 3, 1, "", "RUN_TRIALS_STATUS"]], "ax.service.scheduler.RunTrialsStatus": [[13, 3, 1, "", "ABORTED"], [13, 3, 1, "", "STARTED"], [13, 3, 1, "", "SUCCESS"]], "ax.service.scheduler.Scheduler": [[13, 3, 1, "", "DEFAULT_FETCH_KWARGS"], [13, 3, 1, "", "_skip_experiment_save"], [13, 5, 1, "", "candidate_trials"], [13, 2, 1, "", "completion_criterion"], [13, 3, 1, "", "db_settings"], [13, 2, 1, "", "error_if_failure_rate_exceeded"], [13, 2, 1, "", "estimate_early_stopping_savings"], [13, 2, 1, "", "estimate_global_stopping_savings"], [13, 3, 1, "id0", "experiment"], [13, 2, 1, "", "from_stored_experiment"], [13, 2, 1, "", "generate_candidates"], [13, 3, 1, "id1", "generation_strategy"], [13, 2, 1, "", "get_best_trial"], [13, 2, 1, "", "get_default_db_settings"], [13, 2, 1, "", "get_hypervolume"], [13, 2, 1, "", "get_improvement_over_baseline"], [13, 2, 1, "", "get_pareto_optimal_parameters"], [13, 2, 1, "", "get_trace"], [13, 2, 1, "", "get_trace_by_progression"], [13, 3, 1, "", "logger"], [13, 3, 1, "", "markdown_messages"], [13, 5, 1, "id2", "options"], [13, 5, 1, "", "pending_trials"], [13, 2, 1, "", "poll_and_process_results"], [13, 2, 1, "", "poll_trial_status"], [13, 2, 1, "", "report_results"], [13, 2, 1, "", "run"], [13, 2, 1, "", "run_all_trials"], [13, 2, 1, "", "run_n_trials"], [13, 2, 1, "", "run_trials"], [13, 2, 1, "", "run_trials_and_yield_results"], [13, 5, 1, "", "runner"], [13, 5, 1, "", "running_trials"], [13, 2, 1, "", "should_abort_optimization"], [13, 2, 1, "", "should_consider_optimization_complete"], [13, 2, 1, "", "should_stop_trials_early"], [13, 5, 1, "", "should_wait_for_running_trials"], [13, 5, 1, "", "standard_generation_strategy"], [13, 2, 1, "", "stop_trial_runs"], [13, 2, 1, "", "summarize_final_result"], [13, 2, 1, "", "wait_for_completed_trials_and_report_results"]], "ax.service.utils": [[13, 0, 0, "-", "best_point"], [13, 0, 0, "-", "best_point_mixin"], [13, 0, 0, "-", "early_stopping"], [13, 0, 0, "-", "instantiation"], [13, 0, 0, "-", "report_utils"], [13, 0, 0, "-", "scheduler_options"], [13, 0, 0, "-", "with_db_settings_base"]], "ax.service.utils.best_point": [[13, 4, 1, "", "extract_Y_from_data"], [13, 4, 1, "", "fill_missing_thresholds_from_nadir"], [13, 4, 1, "", "get_best_by_raw_objective"], [13, 4, 1, "", "get_best_by_raw_objective_with_trial_index"], [13, 4, 1, "", "get_best_parameters"], [13, 4, 1, "", "get_best_parameters_from_model_predictions"], [13, 4, 1, "", "get_best_parameters_from_model_predictions_with_trial_index"], [13, 4, 1, "", "get_best_parameters_with_trial_index"], [13, 4, 1, "", "get_best_raw_objective_point"], [13, 4, 1, "", "get_best_raw_objective_point_with_trial_index"], [13, 4, 1, "", "get_pareto_optimal_parameters"]], "ax.service.utils.best_point_mixin": [[13, 1, 1, "", "BestPointMixin"]], "ax.service.utils.best_point_mixin.BestPointMixin": [[13, 2, 1, "", "get_best_parameters"], [13, 2, 1, "", "get_best_trial"], [13, 2, 1, "", "get_hypervolume"], [13, 2, 1, "", "get_pareto_optimal_parameters"], [13, 2, 1, "", "get_trace"], [13, 2, 1, "", "get_trace_by_progression"]], "ax.service.utils.early_stopping": [[13, 4, 1, "", "get_early_stopping_metrics"], [13, 4, 1, "", "should_stop_trials_early"]], "ax.service.utils.instantiation": [[13, 1, 1, "", "FixedFeatures"], [13, 1, 1, "", "InstantiationBase"], [13, 1, 1, "", "MetricObjective"], [13, 1, 1, "", "ObjectiveProperties"], [13, 7, 1, "", "logger"]], "ax.service.utils.instantiation.FixedFeatures": [[13, 3, 1, "", "parameters"], [13, 3, 1, "", "trial_index"]], "ax.service.utils.instantiation.InstantiationBase": [[13, 2, 1, "", "build_objective_threshold"], [13, 2, 1, "", "build_objective_thresholds"], [13, 2, 1, "", "constraint_from_str"], [13, 2, 1, "", "make_experiment"], [13, 2, 1, "", "make_fixed_observation_features"], [13, 2, 1, "", "make_objective_thresholds"], [13, 2, 1, "", "make_objectives"], [13, 2, 1, "", "make_optimization_config"], [13, 2, 1, "", "make_optimization_config_from_properties"], [13, 2, 1, "", "make_outcome_constraints"], [13, 2, 1, "", "make_search_space"], [13, 2, 1, "", "objective_threshold_constraint_from_str"], [13, 2, 1, "", "optimization_config_from_objectives"], [13, 2, 1, "", "outcome_constraint_from_str"], [13, 2, 1, "", "parameter_from_json"]], "ax.service.utils.instantiation.MetricObjective": [[13, 3, 1, "", "MAXIMIZE"], [13, 3, 1, "", "MINIMIZE"]], "ax.service.utils.instantiation.ObjectiveProperties": [[13, 3, 1, "", "minimize"], [13, 3, 1, "", "threshold"]], "ax.service.utils.report_utils": [[13, 4, 1, "", "compare_to_baseline"], [13, 4, 1, "", "compare_to_baseline_impl"], [13, 4, 1, "", "compute_maximum_map_values"], [13, 4, 1, "", "exp_to_df"], [13, 4, 1, "", "get_figure_and_callback"], [13, 4, 1, "", "get_standard_plots"], [13, 4, 1, "", "maybe_extract_baseline_comparison_values"], [13, 4, 1, "", "pareto_frontier_scatter_2d_plotly"], [13, 4, 1, "", "select_baseline_arm"], [13, 4, 1, "", "warn_if_unpredictable_metrics"]], "ax.service.utils.scheduler_options": [[13, 1, 1, "", "SchedulerOptions"], [13, 1, 1, "", "TrialType"]], "ax.service.utils.scheduler_options.SchedulerOptions": [[13, 3, 1, "id3", "batch_size"], [13, 3, 1, "id4", "debug_log_run_metadata"], [13, 3, 1, "id5", "early_stopping_strategy"], [13, 3, 1, "id6", "enforce_immutable_search_space_and_opt_config"], [13, 3, 1, "id7", "fetch_kwargs"], [13, 3, 1, "id8", "global_stopping_strategy"], [13, 3, 1, "id9", "init_seconds_between_polls"], [13, 3, 1, "id10", "log_filepath"], [13, 3, 1, "id11", "logging_level"], [13, 3, 1, "id12", "max_pending_trials"], [13, 3, 1, "id13", "min_failed_trials_for_failure_rate_check"], [13, 3, 1, "id14", "min_seconds_before_poll"], [13, 3, 1, "id15", "run_trials_in_batches"], [13, 3, 1, "id16", "seconds_between_polls_backoff_factor"], [13, 3, 1, "id17", "status_quo_weight"], [13, 3, 1, "id18", "suppress_storage_errors_after_retries"], [13, 3, 1, "id19", "timeout_hours"], [13, 3, 1, "id20", "tolerated_trial_failure_rate"], [13, 3, 1, "id21", "total_trials"], [13, 3, 1, "id22", "trial_type"], [13, 3, 1, "id23", "ttl_seconds_for_trials"], [13, 3, 1, "id24", "validate_metrics"], [13, 3, 1, "id25", "wait_for_running_trials"]], "ax.service.utils.scheduler_options.TrialType": [[13, 3, 1, "", "BATCH_TRIAL"], [13, 3, 1, "", "TRIAL"]], "ax.service.utils.with_db_settings_base": [[13, 1, 1, "", "WithDBSettingsBase"]], "ax.service.utils.with_db_settings_base.WithDBSettingsBase": [[13, 3, 1, "", "AX_OBJECT_FIELD_OVERRIDES"], [13, 5, 1, "", "db_settings"], [13, 5, 1, "", "db_settings_set"]], "ax.storage": [[14, 0, 0, "-", "botorch_modular_registry"], [14, 0, 0, "-", "metric_registry"], [14, 0, 0, "-", "registry_bundle"], [14, 0, 0, "-", "runner_registry"], [14, 0, 0, "-", "transform_registry"], [14, 0, 0, "-", "utils"]], "ax.storage.botorch_modular_registry": [[14, 7, 1, "", "ACQUISITION_FUNCTION_REGISTRY"], [14, 7, 1, "", "ACQUISITION_REGISTRY"], [14, 7, 1, "", "CLASS_TO_REGISTRY"], [14, 7, 1, "", "GPYTORCH_COMPONENT_REGISTRY"], [14, 7, 1, "", "INPUT_TRANSFORM_REGISTRY"], [14, 7, 1, "", "MODEL_REGISTRY"], [14, 7, 1, "", "OUTCOME_TRANSFORM_REGISTRY"], [14, 7, 1, "", "REVERSE_OUTCOME_TRANSFORM_REGISTRY"], [14, 4, 1, "", "register_acquisition"], [14, 4, 1, "", "register_acquisition_function"], [14, 4, 1, "", "register_kernel"], [14, 4, 1, "", "register_model"]], "ax.storage.json_store": [[14, 0, 0, "-", "decoder"], [14, 0, 0, "-", "decoders"], [14, 0, 0, "-", "encoder"], [14, 0, 0, "-", "encoders"], [14, 0, 0, "-", "load"], [14, 0, 0, "-", "registry"], [14, 0, 0, "-", "save"]], "ax.storage.json_store.decoder": [[14, 4, 1, "", "ax_class_from_json_dict"], [14, 4, 1, "", "data_from_json"], [14, 4, 1, "", "experiment_from_json"], [14, 4, 1, "", "generation_node_from_json"], [14, 4, 1, "", "generation_step_from_json"], [14, 4, 1, "", "generation_strategy_from_json"], [14, 4, 1, "", "generator_run_from_json"], [14, 4, 1, "", "get_input_transform_json_components"], [14, 4, 1, "", "get_outcome_transform_json_components"], [14, 4, 1, "", "model_spec_from_json"], [14, 4, 1, "", "multi_type_experiment_from_json"], [14, 4, 1, "", "object_from_json"], [14, 4, 1, "", "objective_from_json"], [14, 4, 1, "", "parameter_constraints_from_json"], [14, 4, 1, "", "search_space_from_json"], [14, 4, 1, "", "surrogate_from_list_surrogate_json"], [14, 4, 1, "", "trial_transition_criteria_from_json"], [14, 4, 1, "", "trials_from_json"]], "ax.storage.json_store.decoders": [[14, 4, 1, "", "batch_trial_from_json"], [14, 4, 1, "", "botorch_component_from_json"], [14, 4, 1, "", "class_from_json"], [14, 4, 1, "", "default_from_json"], [14, 4, 1, "", "input_transform_type_from_json"], [14, 4, 1, "", "outcome_transform_type_from_json"], [14, 4, 1, "", "pathlib_from_json"], [14, 4, 1, "", "tensor_from_json"], [14, 4, 1, "", "tensor_or_size_from_json"], [14, 4, 1, "", "transform_type_from_json"], [14, 4, 1, "", "trial_from_json"]], "ax.storage.json_store.encoder": [[14, 4, 1, "", "object_to_json"]], "ax.storage.json_store.encoders": [[14, 4, 1, "", "arm_to_dict"], [14, 4, 1, "", "batch_to_dict"], [14, 4, 1, "", "best_model_selector_to_dict"], [14, 4, 1, "", "botorch_component_to_dict"], [14, 4, 1, "", "botorch_input_transform_to_init_args"], [14, 4, 1, "", "botorch_model_to_dict"], [14, 4, 1, "", "botorch_modular_to_dict"], [14, 4, 1, "", "choice_parameter_to_dict"], [14, 4, 1, "", "data_to_dict"], [14, 4, 1, "", "default_to_dict"], [14, 4, 1, "", "experiment_to_dict"], [14, 4, 1, "", "fixed_parameter_to_dict"], [14, 4, 1, "", "generation_node_to_dict"], [14, 4, 1, "", "generation_step_to_dict"], [14, 4, 1, "", "generation_strategy_to_dict"], [14, 4, 1, "", "generator_run_to_dict"], [14, 4, 1, "", "improvement_global_stopping_strategy_to_dict"], [14, 4, 1, "", "logical_early_stopping_strategy_to_dict"], [14, 4, 1, "", "map_data_to_dict"], [14, 4, 1, "", "map_key_info_to_dict"], [14, 4, 1, "", "metric_to_dict"], [14, 4, 1, "", "model_spec_to_dict"], [14, 4, 1, "", "multi_objective_optimization_config_to_dict"], [14, 4, 1, "", "multi_objective_to_dict"], [14, 4, 1, "", "multi_type_experiment_to_dict"], [14, 4, 1, "", "objective_to_dict"], [14, 4, 1, "", "observation_features_to_dict"], [14, 4, 1, "", "optimization_config_to_dict"], [14, 4, 1, "", "order_parameter_constraint_to_dict"], [14, 4, 1, "", "outcome_constraint_to_dict"], [14, 4, 1, "", "parameter_constraint_to_dict"], [14, 4, 1, "", "parameter_distribution_to_dict"], [14, 4, 1, "", "pathlib_to_dict"], [14, 4, 1, "", "percentile_early_stopping_strategy_to_dict"], [14, 4, 1, "", "pytorch_cnn_torchvision_benchmark_problem_to_dict"], [14, 4, 1, "", "range_parameter_to_dict"], [14, 4, 1, "", "risk_measure_to_dict"], [14, 4, 1, "", "robust_search_space_to_dict"], [14, 4, 1, "", "runner_to_dict"], [14, 4, 1, "", "scalarized_objective_to_dict"], [14, 4, 1, "", "search_space_to_dict"], [14, 4, 1, "", "sum_parameter_constraint_to_dict"], [14, 4, 1, "", "surrogate_to_dict"], [14, 4, 1, "", "tensor_to_dict"], [14, 4, 1, "", "threshold_early_stopping_strategy_to_dict"], [14, 4, 1, "", "transform_type_to_dict"], [14, 4, 1, "", "transition_criterion_to_dict"], [14, 4, 1, "", "trial_to_dict"], [14, 4, 1, "", "winsorization_config_to_dict"]], "ax.storage.json_store.load": [[14, 4, 1, "", "load_experiment"]], "ax.storage.json_store.save": [[14, 4, 1, "", "save_experiment"]], "ax.storage.metric_registry": [[14, 7, 1, "", "logger"], [14, 4, 1, "", "register_metrics"]], "ax.storage.registry_bundle": [[14, 1, 1, "", "RegistryBundle"], [14, 1, 1, "", "RegistryBundleBase"]], "ax.storage.registry_bundle.RegistryBundle": [[14, 5, 1, "", "decoder"], [14, 5, 1, "", "encoder"], [14, 5, 1, "", "sqa_config"]], "ax.storage.registry_bundle.RegistryBundleBase": [[14, 5, 1, "", "class_decoder_registry"], [14, 5, 1, "", "class_encoder_registry"], [14, 5, 1, "", "decoder"], [14, 5, 1, "", "decoder_registry"], [14, 5, 1, "", "encoder"], [14, 5, 1, "", "encoder_registry"], [14, 2, 1, "", "from_registry_bundles"], [14, 5, 1, "", "metric_registry"], [14, 5, 1, "", "runner_registry"], [14, 5, 1, "", "sqa_config"]], "ax.storage.runner_registry": [[14, 4, 1, "", "register_runner"], [14, 4, 1, "", "register_runners"]], "ax.storage.sqa_store": [[14, 0, 0, "-", "db"], [14, 0, 0, "-", "decoder"], [14, 0, 0, "-", "delete"], [14, 0, 0, "-", "encoder"], [14, 0, 0, "-", "json"], [14, 0, 0, "-", "load"], [14, 0, 0, "-", "reduced_state"], [14, 0, 0, "-", "save"], [14, 0, 0, "-", "sqa_classes"], [14, 0, 0, "-", "sqa_enum"], [14, 0, 0, "-", "structs"], [14, 0, 0, "-", "timestamp"], [14, 0, 0, "-", "utils"], [14, 0, 0, "-", "validation"]], "ax.storage.sqa_store.db": [[14, 1, 1, "", "SQABase"], [14, 4, 1, "", "create_all_tables"], [14, 4, 1, "", "create_mysql_engine_from_creator"], [14, 4, 1, "", "create_mysql_engine_from_url"], [14, 4, 1, "", "create_test_engine"], [14, 4, 1, "", "get_engine"], [14, 4, 1, "", "get_session"], [14, 4, 1, "", "init_engine_and_session_factory"], [14, 4, 1, "", "init_test_engine_and_session_factory"], [14, 4, 1, "", "session_scope"]], "ax.storage.sqa_store.decoder": [[14, 1, 1, "", "Decoder"]], "ax.storage.sqa_store.decoder.Decoder": [[14, 2, 1, "", "abandoned_arm_from_sqa"], [14, 2, 1, "", "analysis_card_from_sqa"], [14, 2, 1, "", "arm_from_sqa"], [14, 3, 1, "", "config"], [14, 2, 1, "", "data_from_sqa"], [14, 2, 1, "", "environmental_variable_from_sqa"], [14, 2, 1, "", "experiment_from_sqa"], [14, 2, 1, "", "generation_strategy_from_sqa"], [14, 2, 1, "", "generator_run_from_sqa"], [14, 2, 1, "", "get_enum_name"], [14, 2, 1, "", "metric_from_sqa"], [14, 2, 1, "", "opt_config_and_tracking_metrics_from_sqa"], [14, 2, 1, "", "parameter_constraint_from_sqa"], [14, 2, 1, "", "parameter_distributions_from_sqa"], [14, 2, 1, "", "parameter_from_sqa"], [14, 2, 1, "", "runner_from_sqa"], [14, 2, 1, "", "search_space_from_sqa"], [14, 2, 1, "", "trial_from_sqa"]], "ax.storage.sqa_store.delete": [[14, 4, 1, "", "delete_experiment"], [14, 4, 1, "", "delete_generation_strategy"]], "ax.storage.sqa_store.encoder": [[14, 1, 1, "", "Encoder"]], "ax.storage.sqa_store.encoder.Encoder": [[14, 2, 1, "", "abandoned_arm_to_sqa"], [14, 2, 1, "", "analysis_card_to_sqa"], [14, 2, 1, "", "arm_to_sqa"], [14, 3, 1, "", "config"], [14, 2, 1, "", "data_to_sqa"], [14, 2, 1, "", "environmental_variable_to_sqa"], [14, 2, 1, "", "experiment_data_to_sqa"], [14, 2, 1, "", "experiment_to_sqa"], [14, 2, 1, "", "generation_strategy_to_sqa"], [14, 2, 1, "", "generator_run_to_sqa"], [14, 2, 1, "", "get_children_metrics_by_name"], [14, 2, 1, "", "get_enum_value"], [14, 2, 1, "", "get_metric_type_and_properties"], [14, 2, 1, "", "metric_to_sqa"], [14, 2, 1, "", "multi_objective_to_sqa"], [14, 2, 1, "", "objective_threshold_to_sqa"], [14, 2, 1, "", "objective_to_sqa"], [14, 2, 1, "", "optimization_config_to_sqa"], [14, 2, 1, "", "outcome_constraint_to_sqa"], [14, 2, 1, "", "parameter_constraint_to_sqa"], [14, 2, 1, "", "parameter_distribution_to_sqa"], [14, 2, 1, "", "parameter_to_sqa"], [14, 2, 1, "", "risk_measure_to_sqa"], [14, 2, 1, "", "robust_search_space_to_sqa"], [14, 2, 1, "", "runner_to_sqa"], [14, 2, 1, "", "scalarized_objective_to_sqa"], [14, 2, 1, "", "scalarized_outcome_constraint_to_sqa"], [14, 2, 1, "", "search_space_to_sqa"], [14, 2, 1, "", "trial_to_sqa"], [14, 2, 1, "", "validate_experiment_metadata"]], "ax.storage.sqa_store.json": [[14, 3, 1, "", "JSONEncodedDict"], [14, 3, 1, "", "JSONEncodedList"], [14, 1, 1, "", "JSONEncodedLongText"], [14, 3, 1, "", "JSONEncodedLongTextDict"], [14, 1, 1, "", "JSONEncodedMediumText"], [14, 1, 1, "", "JSONEncodedObject"], [14, 1, 1, "", "JSONEncodedText"], [14, 3, 1, "", "JSONEncodedTextDict"]], "ax.storage.sqa_store.json.JSONEncodedLongText": [[14, 3, 1, "", "impl"]], "ax.storage.sqa_store.json.JSONEncodedMediumText": [[14, 3, 1, "", "impl"]], "ax.storage.sqa_store.json.JSONEncodedObject": [[14, 3, 1, "", "cache_ok"], [14, 3, 1, "", "impl"], [14, 2, 1, "", "process_bind_param"], [14, 2, 1, "", "process_result_value"]], "ax.storage.sqa_store.load": [[14, 4, 1, "", "get_generation_strategy_id"], [14, 4, 1, "", "get_generation_strategy_sqa"], [14, 4, 1, "", "get_generation_strategy_sqa_reduced_state"], [14, 4, 1, "", "get_generator_runs_by_id"], [14, 4, 1, "", "load_analysis_cards_by_experiment_name"], [14, 4, 1, "", "load_experiment"], [14, 4, 1, "", "load_generation_strategy_by_experiment_name"], [14, 4, 1, "", "load_generation_strategy_by_id"]], "ax.storage.sqa_store.reduced_state": [[14, 4, 1, "", "get_query_options_to_defer_immutable_duplicates"], [14, 4, 1, "", "get_query_options_to_defer_large_model_cols"]], "ax.storage.sqa_store.save": [[14, 4, 1, "", "save_analysis_cards"], [14, 4, 1, "", "save_experiment"], [14, 4, 1, "", "save_generation_strategy"], [14, 4, 1, "", "save_or_update_trial"], [14, 4, 1, "", "save_or_update_trials"], [14, 4, 1, "", "update_generation_strategy"], [14, 4, 1, "", "update_outcome_constraint_on_experiment"], [14, 4, 1, "", "update_properties_on_experiment"], [14, 4, 1, "", "update_properties_on_trial"], [14, 4, 1, "", "update_runner_on_experiment"]], "ax.storage.sqa_store.sqa_classes": [[14, 1, 1, "", "SQAAbandonedArm"], [14, 1, 1, "", "SQAAnalysisCard"], [14, 1, 1, "", "SQAArm"], [14, 1, 1, "", "SQAData"], [14, 1, 1, "", "SQAExperiment"], [14, 1, 1, "", "SQAGenerationStrategy"], [14, 1, 1, "", "SQAGeneratorRun"], [14, 1, 1, "", "SQAMetric"], [14, 1, 1, "", "SQAParameter"], [14, 1, 1, "", "SQAParameterConstraint"], [14, 1, 1, "", "SQARunner"], [14, 1, 1, "", "SQATrial"]], "ax.storage.sqa_store.sqa_classes.SQAAbandonedArm": [[14, 3, 1, "", "time_abandoned"]], "ax.storage.sqa_store.sqa_classes.SQAAnalysisCard": [[14, 3, 1, "", "time_created"]], "ax.storage.sqa_store.sqa_classes.SQAExperiment": [[14, 3, 1, "", "analysis_cards"], [14, 3, 1, "", "data"], [14, 3, 1, "", "generation_strategy"], [14, 3, 1, "", "metrics"], [14, 3, 1, "", "parameter_constraints"], [14, 3, 1, "", "parameters"], [14, 3, 1, "", "runners"], [14, 3, 1, "", "time_created"], [14, 3, 1, "", "trials"]], "ax.storage.sqa_store.sqa_classes.SQAGenerationStrategy": [[14, 3, 1, "", "generator_runs"]], "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun": [[14, 3, 1, "", "arms"], [14, 3, 1, "", "metrics"], [14, 3, 1, "", "parameter_constraints"], [14, 3, 1, "", "parameters"], [14, 3, 1, "", "time_created"]], "ax.storage.sqa_store.sqa_classes.SQAMetric": [[14, 3, 1, "", "scalarized_objective_children_metrics"], [14, 3, 1, "", "scalarized_outcome_constraint_children_metrics"]], "ax.storage.sqa_store.sqa_classes.SQAParameter": [[14, 3, 1, "", "dependents"], [14, 3, 1, "", "fixed_value"], [14, 3, 1, "", "target_value"]], "ax.storage.sqa_store.sqa_classes.SQATrial": [[14, 3, 1, "", "abandoned_arms"], [14, 3, 1, "", "generator_runs"], [14, 3, 1, "", "is_batch"], [14, 3, 1, "", "runner"], [14, 3, 1, "", "time_completed"], [14, 3, 1, "", "time_created"], [14, 3, 1, "", "time_run_started"], [14, 3, 1, "", "time_staged"]], "ax.storage.sqa_store.sqa_enum": [[14, 1, 1, "", "BaseNullableEnum"], [14, 1, 1, "", "IntEnum"], [14, 1, 1, "", "StringEnum"]], "ax.storage.sqa_store.sqa_enum.BaseNullableEnum": [[14, 3, 1, "", "cache_ok"], [14, 2, 1, "", "process_bind_param"], [14, 2, 1, "", "process_result_value"]], "ax.storage.sqa_store.sqa_enum.StringEnum": [[14, 3, 1, "", "impl"]], "ax.storage.sqa_store.structs": [[14, 1, 1, "", "DBSettings"]], "ax.storage.sqa_store.structs.DBSettings": [[14, 3, 1, "", "creator"], [14, 3, 1, "", "decoder"], [14, 3, 1, "", "encoder"], [14, 3, 1, "", "url"]], "ax.storage.sqa_store.timestamp": [[14, 1, 1, "", "IntTimestamp"]], "ax.storage.sqa_store.timestamp.IntTimestamp": [[14, 3, 1, "", "cache_ok"], [14, 2, 1, "", "process_bind_param"], [14, 2, 1, "", "process_result_value"]], "ax.storage.sqa_store.utils": [[14, 4, 1, "", "copy_db_ids"], [14, 4, 1, "", "is_foreign_key_field"]], "ax.storage.sqa_store.validation": [[14, 4, 1, "", "consistency_exactly_one"], [14, 4, 1, "", "do_not_set_existing_value_to_null"], [14, 4, 1, "", "listens_for_multiple"]], "ax.storage.transform_registry": [[14, 7, 1, "", "TRANSFORM_REGISTRY"]], "ax.storage.utils": [[14, 1, 1, "", "DomainType"], [14, 1, 1, "", "MetricIntent"], [14, 1, 1, "", "ParameterConstraintType"], [14, 4, 1, "", "stable_hash"]], "ax.storage.utils.DomainType": [[14, 3, 1, "", "CHOICE"], [14, 3, 1, "", "ENVIRONMENTAL_RANGE"], [14, 3, 1, "", "FIXED"], [14, 3, 1, "", "RANGE"]], "ax.storage.utils.MetricIntent": [[14, 3, 1, "", "ADDITIONAL_OBJECTIVE"], [14, 3, 1, "", "MULTI_OBJECTIVE"], [14, 3, 1, "", "OBJECTIVE"], [14, 3, 1, "", "OBJECTIVE_THRESHOLD"], [14, 3, 1, "", "OUTCOME_CONSTRAINT"], [14, 3, 1, "", "RISK_MEASURE"], [14, 3, 1, "", "SCALARIZED_OBJECTIVE"], [14, 3, 1, "", "SCALARIZED_OUTCOME_CONSTRAINT"], [14, 3, 1, "", "TRACKING"]], "ax.storage.utils.ParameterConstraintType": [[14, 3, 1, "", "DISTRIBUTION"], [14, 3, 1, "", "LINEAR"], [14, 3, 1, "", "ORDER"], [14, 3, 1, "", "SUM"]], "ax.telemetry": [[15, 0, 0, "-", "experiment"], [15, 0, 0, "-", "generation_strategy"], [15, 0, 0, "-", "scheduler"]], "ax.telemetry.experiment": [[15, 1, 1, "", "ExperimentCompletedRecord"], [15, 1, 1, "", "ExperimentCreatedRecord"]], "ax.telemetry.experiment.ExperimentCompletedRecord": [[15, 2, 1, "", "from_experiment"], [15, 3, 1, "", "num_abandoned_trials"], [15, 3, 1, "", "num_bayesopt_trials"], [15, 3, 1, "", "num_completed_trials"], [15, 3, 1, "", "num_early_stopped_trials"], [15, 3, 1, "", "num_failed_trials"], [15, 3, 1, "", "num_initialization_trials"], [15, 3, 1, "", "num_other_trials"], [15, 3, 1, "", "total_fit_time"], [15, 3, 1, "", "total_gen_time"]], "ax.telemetry.experiment.ExperimentCreatedRecord": [[15, 3, 1, "", "dimensionality"], [15, 3, 1, "", "experiment_name"], [15, 3, 1, "", "experiment_type"], [15, 2, 1, "", "from_experiment"], [15, 3, 1, "", "hierarchical_tree_height"], [15, 3, 1, "", "metric_cls_to_quantity"], [15, 3, 1, "", "num_continuous_range_parameters"], [15, 3, 1, "", "num_fixed_parameters"], [15, 3, 1, "", "num_int_range_parameters_large"], [15, 3, 1, "", "num_int_range_parameters_medium"], [15, 3, 1, "", "num_int_range_parameters_small"], [15, 3, 1, "", "num_log_scale_range_parameters"], [15, 3, 1, "", "num_map_metrics"], [15, 3, 1, "", "num_objectives"], [15, 3, 1, "", "num_outcome_constraints"], [15, 3, 1, "", "num_parameter_constraints"], [15, 3, 1, "", "num_tracking_metrics"], [15, 3, 1, "", "num_unordered_choice_parameters_large"], [15, 3, 1, "", "num_unordered_choice_parameters_medium"], [15, 3, 1, "", "num_unordered_choice_parameters_small"], [15, 3, 1, "", "runner_cls"]], "ax.telemetry.generation_strategy": [[15, 1, 1, "", "GenerationStrategyCreatedRecord"]], "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord": [[15, 2, 1, "", "from_generation_strategy"], [15, 3, 1, "", "generation_strategy_name"], [15, 3, 1, "", "max_parallelism"], [15, 3, 1, "", "num_requested_bayesopt_trials"], [15, 3, 1, "", "num_requested_initialization_trials"], [15, 3, 1, "", "num_requested_other_trials"]], "ax.telemetry.scheduler": [[15, 1, 1, "", "SchedulerCompletedRecord"], [15, 1, 1, "", "SchedulerCreatedRecord"]], "ax.telemetry.scheduler.SchedulerCompletedRecord": [[15, 3, 1, "", "best_point_quality"], [15, 3, 1, "", "experiment_completed_record"], [15, 2, 1, "", "flatten"], [15, 2, 1, "", "from_scheduler"], [15, 3, 1, "", "improvement_over_baseline"], [15, 3, 1, "", "model_fit_generalization"], [15, 3, 1, "", "model_fit_quality"], [15, 3, 1, "", "model_std_generalization"], [15, 3, 1, "", "model_std_quality"], [15, 3, 1, "", "num_metric_fetch_e_encountered"], [15, 3, 1, "", "num_trials_bad_due_to_err"]], "ax.telemetry.scheduler.SchedulerCreatedRecord": [[15, 3, 1, "", "arms_per_trial"], [15, 3, 1, "", "early_stopping_strategy_cls"], [15, 3, 1, "", "experiment_created_record"], [15, 2, 1, "", "flatten"], [15, 2, 1, "", "from_scheduler"], [15, 3, 1, "", "generation_strategy_created_record"], [15, 3, 1, "", "global_stopping_strategy_cls"], [15, 3, 1, "", "scheduler_max_pending_trials"], [15, 3, 1, "", "scheduler_total_trials"], [15, 3, 1, "", "transformed_dimensionality"]], "ax.utils.common": [[16, 0, 0, "-", "base"], [16, 0, 0, "-", "constants"], [16, 0, 0, "-", "decorator"], [16, 0, 0, "-", "docutils"], [16, 0, 0, "-", "equality"], [16, 0, 0, "-", "executils"], [16, 0, 0, "-", "kwargs"], [16, 0, 0, "-", "logger"], [16, 0, 0, "-", "mock"], [16, 0, 0, "-", "random"], [16, 0, 0, "-", "result"], [16, 0, 0, "-", "serialization"], [16, 0, 0, "-", "testutils"], [16, 0, 0, "-", "timeutils"], [16, 0, 0, "-", "typeutils"], [16, 0, 0, "-", "typeutils_nonnative"], [16, 0, 0, "-", "typeutils_torch"]], "ax.utils.common.base": [[16, 1, 1, "", "Base"], [16, 1, 1, "", "SortableBase"]], "ax.utils.common.base.Base": [[16, 5, 1, "", "db_id"]], "ax.utils.common.constants": [[16, 1, 1, "", "Keys"]], "ax.utils.common.constants.Keys": [[16, 3, 1, "", "ACQF_KWARGS"], [16, 3, 1, "", "AUTOSET_SURROGATE"], [16, 3, 1, "", "BATCH_INIT_CONDITIONS"], [16, 3, 1, "", "CANDIDATE_SET"], [16, 3, 1, "", "CANDIDATE_SIZE"], [16, 3, 1, "", "COST_AWARE_UTILITY"], [16, 3, 1, "", "COST_INTERCEPT"], [16, 3, 1, "", "CURRENT_VALUE"], [16, 3, 1, "", "EXPAND"], [16, 3, 1, "", "EXPECTED_ACQF_VAL"], [16, 3, 1, "", "FIDELITY_FEATURES"], [16, 3, 1, "", "FIDELITY_WEIGHTS"], [16, 3, 1, "", "FRAC_RANDOM"], [16, 3, 1, "", "FULL_PARAMETERIZATION"], [16, 3, 1, "", "IMMUTABLE_SEARCH_SPACE_AND_OPT_CONF"], [16, 3, 1, "", "MAXIMIZE"], [16, 3, 1, "", "METADATA"], [16, 3, 1, "", "METRIC_NAMES"], [16, 3, 1, "", "NUM_FANTASIES"], [16, 3, 1, "", "NUM_INNER_RESTARTS"], [16, 3, 1, "", "NUM_RESTARTS"], [16, 3, 1, "", "NUM_TRACE_OBSERVATIONS"], [16, 3, 1, "", "OBJECTIVE"], [16, 3, 1, "", "ONLY_SURROGATE"], [16, 3, 1, "", "OPTIMIZER_KWARGS"], [16, 3, 1, "", "PAIRWISE_PREFERENCE_QUERY"], [16, 3, 1, "", "PREFERENCE_DATA"], [16, 3, 1, "", "PRIMARY_SURROGATE"], [16, 3, 1, "", "PROJECT"], [16, 3, 1, "", "QMC"], [16, 3, 1, "", "RAW_INNER_SAMPLES"], [16, 3, 1, "", "RAW_SAMPLES"], [16, 3, 1, "", "SAMPLER"], [16, 3, 1, "", "SEED_INNER"], [16, 3, 1, "", "SEQUENTIAL"], [16, 3, 1, "", "STATE_DICT"], [16, 3, 1, "", "SUBCLASS"], [16, 3, 1, "", "SUBSET_MODEL"], [16, 3, 1, "", "TASK_FEATURES"], [16, 3, 1, "", "TRIAL_COMPLETION_TIMESTAMP"], [16, 3, 1, "", "WARM_START_REFITTING"], [16, 3, 1, "", "X_BASELINE"]], "ax.utils.common.decorator": [[16, 1, 1, "", "ClassDecorator"]], "ax.utils.common.decorator.ClassDecorator": [[16, 3, 1, "", "DECORATE_PRIVATE"], [16, 2, 1, "", "decorate_callable"], [16, 2, 1, "", "decorate_class"]], "ax.utils.common.docutils": [[16, 4, 1, "", "copy_doc"]], "ax.utils.common.equality": [[16, 4, 1, "", "dataframe_equals"], [16, 4, 1, "", "datetime_equals"], [16, 4, 1, "", "equality_typechecker"], [16, 4, 1, "", "is_ax_equal"], [16, 4, 1, "", "object_attribute_dicts_equal"], [16, 4, 1, "", "object_attribute_dicts_find_unequal_fields"], [16, 4, 1, "", "same_elements"]], "ax.utils.common.executils": [[16, 4, 1, "", "handle_exceptions_in_retries"], [16, 4, 1, "", "retry_on_exception"]], "ax.utils.common.kwargs": [[16, 4, 1, "", "consolidate_kwargs"], [16, 4, 1, "", "filter_kwargs"], [16, 4, 1, "", "get_function_argument_names"], [16, 4, 1, "", "get_function_default_arguments"], [16, 4, 1, "", "validate_kwarg_typing"], [16, 4, 1, "", "warn_on_kwargs"]], "ax.utils.common.logger": [[16, 1, 1, "", "AxOutputNameFilter"], [16, 4, 1, "", "build_file_handler"], [16, 4, 1, "", "build_stream_handler"], [16, 1, 1, "", "disable_logger"], [16, 1, 1, "", "disable_loggers"], [16, 4, 1, "", "get_logger"], [16, 4, 1, "", "make_indices_str"], [16, 4, 1, "", "set_stderr_log_level"]], "ax.utils.common.logger.AxOutputNameFilter": [[16, 2, 1, "", "filter"]], "ax.utils.common.logger.disable_logger": [[16, 2, 1, "", "decorate_callable"]], "ax.utils.common.logger.disable_loggers": [[16, 2, 1, "", "decorate_callable"]], "ax.utils.common.mock": [[16, 4, 1, "", "mock_patch_method_original"]], "ax.utils.common.random": [[16, 4, 1, "", "set_rng_seed"], [16, 4, 1, "", "with_rng_seed"]], "ax.utils.common.result": [[16, 1, 1, "", "Err"], [16, 1, 1, "", "Ok"], [16, 1, 1, "", "Result"], [16, 6, 1, "", "UnwrapError"]], "ax.utils.common.result.Err": [[16, 5, 1, "", "err"], [16, 2, 1, "", "is_err"], [16, 2, 1, "", "is_ok"], [16, 2, 1, "", "map"], [16, 2, 1, "", "map_err"], [16, 2, 1, "", "map_or"], [16, 2, 1, "", "map_or_else"], [16, 5, 1, "", "ok"], [16, 2, 1, "", "unwrap"], [16, 2, 1, "", "unwrap_err"], [16, 2, 1, "", "unwrap_or"], [16, 2, 1, "", "unwrap_or_else"], [16, 5, 1, "", "value"]], "ax.utils.common.result.Ok": [[16, 5, 1, "", "err"], [16, 2, 1, "", "is_err"], [16, 2, 1, "", "is_ok"], [16, 2, 1, "", "map"], [16, 2, 1, "", "map_err"], [16, 2, 1, "", "map_or"], [16, 2, 1, "", "map_or_else"], [16, 5, 1, "", "ok"], [16, 2, 1, "", "unwrap"], [16, 2, 1, "", "unwrap_err"], [16, 2, 1, "", "unwrap_or"], [16, 2, 1, "", "unwrap_or_else"], [16, 5, 1, "", "value"]], "ax.utils.common.result.Result": [[16, 5, 1, "", "err"], [16, 2, 1, "", "is_err"], [16, 2, 1, "", "is_ok"], [16, 2, 1, "", "map"], [16, 2, 1, "", "map_err"], [16, 2, 1, "", "map_or"], [16, 2, 1, "", "map_or_else"], [16, 5, 1, "", "ok"], [16, 2, 1, "", "unwrap"], [16, 2, 1, "", "unwrap_err"], [16, 2, 1, "", "unwrap_or"], [16, 2, 1, "", "unwrap_or_else"], [16, 5, 1, "", "value"]], "ax.utils.common.serialization": [[16, 1, 1, "", "SerializationMixin"], [16, 4, 1, "", "callable_from_reference"], [16, 4, 1, "", "callable_to_reference"], [16, 4, 1, "", "extract_init_args"], [16, 4, 1, "", "named_tuple_to_dict"], [16, 4, 1, "", "serialize_init_args"]], "ax.utils.common.serialization.SerializationMixin": [[16, 2, 1, "", "deserialize_init_args"], [16, 2, 1, "", "serialize_init_args"]], "ax.utils.common.testutils": [[16, 1, 1, "", "TestCase"]], "ax.utils.common.testutils.TestCase": [[16, 2, 1, "", "assertAxBaseEqual"], [16, 2, 1, "", "assertDictsAlmostEqual"], [16, 2, 1, "", "assertEqual"], [16, 2, 1, "", "assertRaisesOn"], [16, 2, 1, "", "setUp"], [16, 2, 1, "", "silence_stderr"]], "ax.utils.common.timeutils": [[16, 4, 1, "", "current_timestamp_in_millis"], [16, 4, 1, "", "timestamps_in_range"], [16, 4, 1, "", "to_ds"], [16, 4, 1, "", "to_ts"], [16, 4, 1, "", "unixtime_to_pandas_ts"]], "ax.utils.common.typeutils": [[16, 4, 1, "", "checked_cast"], [16, 4, 1, "", "checked_cast_dict"], [16, 4, 1, "", "checked_cast_list"], [16, 4, 1, "", "checked_cast_optional"], [16, 4, 1, "", "checked_cast_to_tuple"], [16, 4, 1, "", "not_none"]], "ax.utils.common.typeutils_nonnative": [[16, 4, 1, "", "numpy_type_to_python_type"], [16, 4, 1, "", "version_safe_check_type"]], "ax.utils.common.typeutils_torch": [[16, 4, 1, "", "torch_type_from_str"], [16, 4, 1, "", "torch_type_to_str"]], "ax.utils.flake8_plugins": [[16, 0, 0, "-", "docstring_checker"]], "ax.utils.flake8_plugins.docstring_checker": [[16, 4, 1, "", "A000"], [16, 1, 1, "", "DocstringChecker"], [16, 1, 1, "", "DocstringCheckerVisitor"], [16, 1, 1, "", "Error"], [16, 4, 1, "", "is_copy_doc_call"], [16, 4, 1, "", "new_error"], [16, 4, 1, "", "should_check"]], "ax.utils.flake8_plugins.docstring_checker.DocstringChecker": [[16, 3, 1, "", "fikename"], [16, 3, 1, "", "name"], [16, 2, 1, "", "run"], [16, 3, 1, "", "tree"], [16, 3, 1, "", "version"]], "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor": [[16, 2, 1, "", "check_A000"], [16, 3, 1, "", "errors"], [16, 2, 1, "", "visit_AsyncFunctionDef"], [16, 2, 1, "", "visit_ClassDef"], [16, 2, 1, "", "visit_FunctionDef"]], "ax.utils.flake8_plugins.docstring_checker.Error": [[16, 3, 1, "", "col"], [16, 3, 1, "", "lineno"], [16, 3, 1, "", "message"], [16, 3, 1, "", "type"]], "ax.utils.measurement": [[16, 0, 0, "-", "synthetic_functions"]], "ax.utils.measurement.synthetic_functions": [[16, 1, 1, "", "Aug_Branin"], [16, 1, 1, "", "Aug_Hartmann6"], [16, 1, 1, "", "Branin"], [16, 1, 1, "", "FromBotorch"], [16, 1, 1, "", "Hartmann6"], [16, 1, 1, "", "SyntheticFunction"], [16, 4, 1, "", "from_botorch"]], "ax.utils.measurement.synthetic_functions.FromBotorch": [[16, 5, 1, "", "name"]], "ax.utils.measurement.synthetic_functions.SyntheticFunction": [[16, 5, 1, "", "domain"], [16, 2, 1, "", "f"], [16, 5, 1, "", "fmax"], [16, 5, 1, "", "fmin"], [16, 2, 1, "", "informative_failure_on_none"], [16, 5, 1, "", "maximums"], [16, 5, 1, "", "minimums"], [16, 5, 1, "", "name"], [16, 5, 1, "", "required_dimensionality"]], "ax.utils.notebook": [[16, 0, 0, "-", "plotting"]], "ax.utils.notebook.plotting": [[16, 4, 1, "", "init_notebook_plotting"], [16, 4, 1, "", "render"]], "ax.utils.report": [[16, 0, 0, "-", "render"]], "ax.utils.report.render": [[16, 4, 1, "", "h2_html"], [16, 4, 1, "", "h3_html"], [16, 4, 1, "", "link_html"], [16, 4, 1, "", "list_item_html"], [16, 4, 1, "", "p_html"], [16, 4, 1, "", "render_report_elements"], [16, 4, 1, "", "table_cell_html"], [16, 4, 1, "", "table_heading_cell_html"], [16, 4, 1, "", "table_html"], [16, 4, 1, "", "table_row_html"], [16, 4, 1, "", "unordered_list_html"]], "ax.utils.sensitivity": [[16, 0, 0, "-", "derivative_gp"], [16, 0, 0, "-", "derivative_measures"], [16, 0, 0, "-", "sobol_measures"]], "ax.utils.sensitivity.derivative_gp": [[16, 4, 1, "", "get_KXX_inv"], [16, 4, 1, "", "get_KxX_dx"], [16, 4, 1, "", "get_Kxx_dx2"], [16, 4, 1, "", "posterior_derivative"]], "ax.utils.sensitivity.derivative_measures": [[16, 1, 1, "", "GpDGSMGpMean"], [16, 1, 1, "", "GpDGSMGpSampling"], [16, 4, 1, "", "compute_derivatives_from_model_list"], [16, 4, 1, "", "sample_discrete_parameters"]], "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean": [[16, 2, 1, "", "aggregation"], [16, 3, 1, "", "bootstrap_indices"], [16, 2, 1, "", "gradient_absolute_measure"], [16, 2, 1, "", "gradient_measure"], [16, 2, 1, "", "gradients_square_measure"], [16, 3, 1, "", "mean_gradients"], [16, 3, 1, "", "mean_gradients_btsp"]], "ax.utils.sensitivity.derivative_measures.GpDGSMGpSampling": [[16, 2, 1, "", "aggregation"], [16, 3, 1, "", "samples_gradients"], [16, 3, 1, "", "samples_gradients_btsp"]], "ax.utils.sensitivity.sobol_measures": [[16, 4, 1, "", "GaussianLinkMean"], [16, 4, 1, "", "ProbitLinkMean"], [16, 1, 1, "", "SobolSensitivity"], [16, 1, 1, "", "SobolSensitivityGPMean"], [16, 1, 1, "", "SobolSensitivityGPSampling"], [16, 4, 1, "", "ax_parameter_sens"], [16, 4, 1, "", "compute_sobol_indices_from_model_list"]], "ax.utils.sensitivity.sobol_measures.SobolSensitivity": [[16, 2, 1, "", "evalute_function"], [16, 2, 1, "", "first_order_indices"], [16, 2, 1, "", "generate_all_input_matrix"], [16, 2, 1, "", "second_order_indices"], [16, 2, 1, "", "total_order_indices"]], "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPMean": [[16, 2, 1, "", "first_order_indices"], [16, 2, 1, "", "second_order_indices"], [16, 2, 1, "", "total_order_indices"]], "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling": [[16, 5, 1, "", "dim"], [16, 2, 1, "", "first_order_indices"], [16, 2, 1, "", "second_order_indices"], [16, 2, 1, "", "total_order_indices"]], "ax.utils.stats": [[16, 0, 0, "-", "model_fit_stats"], [16, 0, 0, "-", "statstools"]], "ax.utils.stats.model_fit_stats": [[16, 7, 1, "", "DEFAULT_KDE_BANDWIDTH"], [16, 1, 1, "", "ModelFitMetricProtocol"], [16, 4, 1, "", "coefficient_of_determination"], [16, 4, 1, "", "compute_model_fit_metrics"], [16, 4, 1, "", "entropy_of_observations"], [16, 4, 1, "", "mean_of_the_standardized_error"], [16, 4, 1, "", "std_of_the_standardized_error"]], "ax.utils.stats.statstools": [[16, 4, 1, "", "agresti_coull_sem"], [16, 4, 1, "", "inverse_variance_weight"], [16, 4, 1, "", "marginal_effects"], [16, 4, 1, "", "positive_part_james_stein"], [16, 4, 1, "", "relativize"], [16, 4, 1, "", "relativize_data"], [16, 4, 1, "", "total_variance"], [16, 4, 1, "", "unrelativize"]], "ax.utils.testing": [[16, 0, 0, "-", "backend_scheduler"], [16, 0, 0, "-", "backend_simulator"], [16, 0, 0, "-", "benchmark_stubs"], [16, 0, 0, "-", "core_stubs"], [16, 0, 0, "-", "mock"], [16, 0, 0, "-", "modeling_stubs"], [16, 0, 0, "-", "preference_stubs"], [16, 0, 0, "-", "test_init_files"], [16, 0, 0, "-", "torch_stubs"], [16, 0, 0, "-", "utils"]], "ax.utils.testing.backend_scheduler": [[16, 1, 1, "", "AsyncSimulatedBackendScheduler"]], "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler": [[16, 5, 1, "", "backend_simulator"], [16, 2, 1, "", "should_stop_trials_early"]], "ax.utils.testing.backend_simulator": [[16, 1, 1, "", "BackendSimulator"], [16, 1, 1, "", "BackendSimulatorOptions"], [16, 1, 1, "", "BackendSimulatorState"], [16, 1, 1, "", "SimStatus"], [16, 1, 1, "", "SimTrial"], [16, 4, 1, "", "format"]], "ax.utils.testing.backend_simulator.BackendSimulator": [[16, 5, 1, "", "all_trials"], [16, 2, 1, "", "from_state"], [16, 2, 1, "", "get_sim_trial_by_index"], [16, 2, 1, "", "lookup_trial_index_status"], [16, 2, 1, "", "new_trial"], [16, 5, 1, "", "num_completed"], [16, 5, 1, "", "num_failed"], [16, 5, 1, "", "num_queued"], [16, 5, 1, "", "num_running"], [16, 2, 1, "", "reset"], [16, 2, 1, "", "run_trial"], [16, 2, 1, "", "state"], [16, 2, 1, "", "status"], [16, 2, 1, "", "stop_trial"], [16, 5, 1, "", "time"], [16, 2, 1, "", "update"], [16, 5, 1, "", "use_internal_clock"]], "ax.utils.testing.backend_simulator.BackendSimulatorOptions": [[16, 3, 1, "", "failure_rate"], [16, 3, 1, "", "internal_clock"], [16, 3, 1, "", "max_concurrency"], [16, 3, 1, "", "time_scaling"], [16, 3, 1, "", "use_update_as_start_time"]], "ax.utils.testing.backend_simulator.BackendSimulatorState": [[16, 3, 1, "", "completed"], [16, 3, 1, "", "failed"], [16, 3, 1, "", "options"], [16, 3, 1, "", "queued"], [16, 3, 1, "", "running"], [16, 3, 1, "", "verbose_logging"]], "ax.utils.testing.backend_simulator.SimStatus": [[16, 3, 1, "id0", "completed"], [16, 3, 1, "id1", "failed"], [16, 3, 1, "id2", "queued"], [16, 3, 1, "id3", "running"], [16, 3, 1, "id4", "time_remaining"]], "ax.utils.testing.backend_simulator.SimTrial": [[16, 3, 1, "id5", "sim_completed_time"], [16, 3, 1, "id6", "sim_queued_time"], [16, 3, 1, "id7", "sim_runtime"], [16, 3, 1, "id8", "sim_start_time"], [16, 3, 1, "id9", "trial_index"]], "ax.utils.testing.benchmark_stubs": [[16, 4, 1, "", "get_aggregated_benchmark_result"], [16, 4, 1, "", "get_benchmark_result"], [16, 4, 1, "", "get_constrained_multi_objective_benchmark_problem"], [16, 4, 1, "", "get_moo_surrogate"], [16, 4, 1, "", "get_multi_objective_benchmark_problem"], [16, 4, 1, "", "get_single_objective_benchmark_problem"], [16, 4, 1, "", "get_sobol_benchmark_method"], [16, 4, 1, "", "get_sobol_gpei_benchmark_method"], [16, 4, 1, "", "get_soo_surrogate"]], "ax.utils.testing.core_stubs": [[16, 1, 1, "", "CustomTestMetric"], [16, 1, 1, "", "CustomTestRunner"], [16, 1, 1, "", "DummyEarlyStoppingStrategy"], [16, 1, 1, "", "DummyGlobalStoppingStrategy"], [16, 1, 1, "", "SpecialGenerationStrategy"], [16, 1, 1, "", "TestTrial"], [16, 4, 1, "", "get_abandoned_arm"], [16, 4, 1, "", "get_acquisition_function_type"], [16, 4, 1, "", "get_acquisition_type"], [16, 4, 1, "", "get_and_early_stopping_strategy"], [16, 4, 1, "", "get_arm"], [16, 4, 1, "", "get_arm_weights1"], [16, 4, 1, "", "get_arm_weights2"], [16, 4, 1, "", "get_arms"], [16, 4, 1, "", "get_arms_from_dict"], [16, 4, 1, "", "get_augmented_branin_metric"], [16, 4, 1, "", "get_augmented_branin_objective"], [16, 4, 1, "", "get_augmented_branin_optimization_config"], [16, 4, 1, "", "get_augmented_hartmann_metric"], [16, 4, 1, "", "get_augmented_hartmann_objective"], [16, 4, 1, "", "get_augmented_hartmann_optimization_config"], [16, 4, 1, "", "get_batch_trial"], [16, 4, 1, "", "get_batch_trial_with_repeated_arms"], [16, 4, 1, "", "get_botorch_model"], [16, 4, 1, "", "get_botorch_model_with_default_acquisition_class"], [16, 4, 1, "", "get_botorch_model_with_surrogate_specs"], [16, 4, 1, "", "get_branin_arms"], [16, 4, 1, "", "get_branin_data"], [16, 4, 1, "", "get_branin_data_batch"], [16, 4, 1, "", "get_branin_data_multi_objective"], [16, 4, 1, "", "get_branin_experiment"], [16, 4, 1, "", "get_branin_experiment_with_multi_objective"], [16, 4, 1, "", "get_branin_experiment_with_status_quo_trials"], [16, 4, 1, "", "get_branin_experiment_with_timestamp_map_metric"], [16, 4, 1, "", "get_branin_metric"], [16, 4, 1, "", "get_branin_multi_objective"], [16, 4, 1, "", "get_branin_multi_objective_optimization_config"], [16, 4, 1, "", "get_branin_objective"], [16, 4, 1, "", "get_branin_optimization_config"], [16, 4, 1, "", "get_branin_outcome_constraint"], [16, 4, 1, "", "get_branin_search_space"], [16, 4, 1, "", "get_branin_with_multi_task"], [16, 4, 1, "", "get_chained_input_transform"], [16, 4, 1, "", "get_choice_parameter"], [16, 4, 1, "", "get_custom_multi_objective"], [16, 4, 1, "", "get_data"], [16, 4, 1, "", "get_dataset"], [16, 4, 1, "", "get_default_scheduler_options"], [16, 4, 1, "", "get_dict_lookup_metric"], [16, 4, 1, "", "get_discrete_search_space"], [16, 4, 1, "", "get_experiment"], [16, 4, 1, "", "get_experiment_with_batch_and_single_trial"], [16, 4, 1, "", "get_experiment_with_batch_trial"], [16, 4, 1, "", "get_experiment_with_custom_runner_and_metric"], [16, 4, 1, "", "get_experiment_with_data"], [16, 4, 1, "", "get_experiment_with_map_data"], [16, 4, 1, "", "get_experiment_with_map_data_type"], [16, 4, 1, "", "get_experiment_with_multi_objective"], [16, 4, 1, "", "get_experiment_with_observations"], [16, 4, 1, "", "get_experiment_with_repeated_arms"], [16, 4, 1, "", "get_experiment_with_scalarized_objective_and_outcome_constraint"], [16, 4, 1, "", "get_experiment_with_trial"], [16, 4, 1, "", "get_experiment_with_trial_with_ttl"], [16, 4, 1, "", "get_factorial_experiment"], [16, 4, 1, "", "get_factorial_metric"], [16, 4, 1, "", "get_factorial_search_space"], [16, 4, 1, "", "get_fixed_parameter"], [16, 4, 1, "", "get_gamma_prior"], [16, 4, 1, "", "get_generator_run"], [16, 4, 1, "", "get_generator_run2"], [16, 4, 1, "", "get_hartmann_metric"], [16, 4, 1, "", "get_hartmann_objective"], [16, 4, 1, "", "get_hartmann_optimization_config"], [16, 4, 1, "", "get_hartmann_search_space"], [16, 4, 1, "", "get_hierarchical_search_space"], [16, 4, 1, "", "get_hierarchical_search_space_experiment"], [16, 4, 1, "", "get_high_dimensional_branin_experiment"], [16, 4, 1, "", "get_hss_trials_with_fixed_parameter"], [16, 4, 1, "", "get_improvement_global_stopping_strategy"], [16, 4, 1, "", "get_interval"], [16, 4, 1, "", "get_l2_reg_weight_parameter"], [16, 4, 1, "", "get_large_factorial_search_space"], [16, 4, 1, "", "get_large_ordinal_search_space"], [16, 4, 1, "", "get_lr_parameter"], [16, 4, 1, "", "get_many_branin_objective_opt_config"], [16, 4, 1, "", "get_map_data"], [16, 4, 1, "", "get_map_key_info"], [16, 4, 1, "", "get_map_objective"], [16, 4, 1, "", "get_map_optimization_config"], [16, 4, 1, "", "get_metric"], [16, 4, 1, "", "get_mll_type"], [16, 4, 1, "", "get_model_covariance"], [16, 4, 1, "", "get_model_mean"], [16, 4, 1, "", "get_model_parameter"], [16, 4, 1, "", "get_model_predictions"], [16, 4, 1, "", "get_model_predictions_per_arm"], [16, 4, 1, "", "get_model_type"], [16, 4, 1, "", "get_multi_objective"], [16, 4, 1, "", "get_multi_objective_optimization_config"], [16, 4, 1, "", "get_multi_type_experiment"], [16, 4, 1, "", "get_multi_type_experiment_with_multi_objective"], [16, 4, 1, "", "get_non_monolithic_branin_moo_data"], [16, 4, 1, "", "get_num_boost_rounds_parameter"], [16, 4, 1, "", "get_objective"], [16, 4, 1, "", "get_objective_threshold"], [16, 4, 1, "", "get_observations_with_invalid_value"], [16, 4, 1, "", "get_online_sobol_gpei_generation_strategy"], [16, 4, 1, "", "get_optimization_config"], [16, 4, 1, "", "get_optimization_config_no_constraints"], [16, 4, 1, "", "get_or_early_stopping_strategy"], [16, 4, 1, "", "get_order_constraint"], [16, 4, 1, "", "get_ordered_choice_parameter"], [16, 4, 1, "", "get_outcome_constraint"], [16, 4, 1, "", "get_parameter_constraint"], [16, 4, 1, "", "get_parameter_distribution"], [16, 4, 1, "", "get_pathlib_path"], [16, 4, 1, "", "get_percentile_early_stopping_strategy"], [16, 4, 1, "", "get_percentile_early_stopping_strategy_with_non_objective_metric_name"], [16, 4, 1, "", "get_range_parameter"], [16, 4, 1, "", "get_range_parameter2"], [16, 4, 1, "", "get_risk_measure"], [16, 4, 1, "", "get_robust_branin_experiment"], [16, 4, 1, "", "get_robust_search_space"], [16, 4, 1, "", "get_robust_search_space_environmental"], [16, 4, 1, "", "get_scalarized_objective"], [16, 4, 1, "", "get_scalarized_outcome_constraint"], [16, 4, 1, "", "get_scheduler_options_batch_trial"], [16, 4, 1, "", "get_search_space"], [16, 4, 1, "", "get_search_space_for_range_value"], [16, 4, 1, "", "get_search_space_for_range_values"], [16, 4, 1, "", "get_search_space_for_value"], [16, 4, 1, "", "get_search_space_with_choice_parameters"], [16, 4, 1, "", "get_sebo_acquisition_class"], [16, 4, 1, "", "get_small_discrete_search_space"], [16, 4, 1, "", "get_status_quo"], [16, 4, 1, "", "get_sum_constraint1"], [16, 4, 1, "", "get_sum_constraint2"], [16, 4, 1, "", "get_surrogate"], [16, 4, 1, "", "get_surrogate_spec_with_default"], [16, 4, 1, "", "get_surrogate_spec_with_lognormal"], [16, 4, 1, "", "get_synthetic_runner"], [16, 4, 1, "", "get_task_choice_parameter"], [16, 4, 1, "", "get_test_map_data_experiment"], [16, 4, 1, "", "get_threshold_early_stopping_strategy"], [16, 4, 1, "", "get_trial"], [16, 4, 1, "", "get_trial_based_criterion"], [16, 4, 1, "", "get_weights"], [16, 4, 1, "", "get_weights_from_dict"], [16, 4, 1, "", "get_winsorization_config"], [16, 4, 1, "", "run_branin_experiment_with_generation_strategy"]], "ax.utils.testing.core_stubs.CustomTestRunner": [[16, 2, 1, "", "run"]], "ax.utils.testing.core_stubs.DummyEarlyStoppingStrategy": [[16, 2, 1, "", "should_stop_trials_early"]], "ax.utils.testing.core_stubs.SpecialGenerationStrategy": [[16, 2, 1, "", "clone_reset"], [16, 2, 1, "", "gen_for_multiple_trials_with_multiple_models"]], "ax.utils.testing.core_stubs.TestTrial": [[16, 2, 1, "", "abandoned_arms"], [16, 5, 1, "", "arms"], [16, 2, 1, "", "arms_by_name"], [16, 2, 1, "", "generator_runs"]], "ax.utils.testing.metrics": [[16, 0, 0, "-", "backend_simulator_map"], [16, 0, 0, "-", "branin_backend_map"]], "ax.utils.testing.metrics.backend_simulator_map": [[16, 1, 1, "", "BackendSimulatorTimestampMapMetric"]], "ax.utils.testing.metrics.backend_simulator_map.BackendSimulatorTimestampMapMetric": [[16, 2, 1, "", "convert_to_timestamps"], [16, 2, 1, "", "fetch_trial_data"]], "ax.utils.testing.metrics.branin_backend_map": [[16, 1, 1, "", "BraninBackendMapMetric"]], "ax.utils.testing.metrics.branin_backend_map.BraninBackendMapMetric": [[16, 2, 1, "", "convert_to_timestamps"]], "ax.utils.testing.mock": [[16, 4, 1, "", "fast_botorch_optimize"], [16, 4, 1, "", "fast_botorch_optimize_context_manager"], [16, 4, 1, "", "skip_fit_gpytorch_mll"], [16, 4, 1, "", "skip_fit_gpytorch_mll_context_manager"]], "ax.utils.testing.modeling_stubs": [[16, 4, 1, "", "get_experiment_for_value"], [16, 4, 1, "", "get_generation_strategy"], [16, 4, 1, "", "get_input_transform_type"], [16, 4, 1, "", "get_legacy_list_surrogate_generation_step_as_dict"], [16, 4, 1, "", "get_observation"], [16, 4, 1, "", "get_observation1"], [16, 4, 1, "", "get_observation1trans"], [16, 4, 1, "", "get_observation2"], [16, 4, 1, "", "get_observation2trans"], [16, 4, 1, "", "get_observation_features"], [16, 4, 1, "", "get_observation_status_quo0"], [16, 4, 1, "", "get_observation_status_quo1"], [16, 4, 1, "", "get_outcome_transfrom_type"], [16, 4, 1, "", "get_surrogate_as_dict"], [16, 4, 1, "", "get_surrogate_generation_step"], [16, 4, 1, "", "get_surrogate_spec_as_dict"], [16, 4, 1, "", "get_transform_type"], [16, 4, 1, "", "sobol_gpei_generation_node_gs"], [16, 1, 1, "", "transform_1"], [16, 1, 1, "", "transform_2"]], "ax.utils.testing.modeling_stubs.transform_1": [[16, 2, 1, "", "transform_observation_features"], [16, 2, 1, "", "transform_optimization_config"], [16, 2, 1, "", "transform_search_space"], [16, 2, 1, "", "untransform_observation_features"]], "ax.utils.testing.modeling_stubs.transform_2": [[16, 2, 1, "", "transform_observation_features"], [16, 2, 1, "", "transform_optimization_config"], [16, 2, 1, "", "transform_search_space"], [16, 2, 1, "", "untransform_observation_features"]], "ax.utils.testing.preference_stubs": [[16, 4, 1, "", "experimental_metric_eval"], [16, 4, 1, "", "get_pbo_experiment"], [16, 4, 1, "", "pairwise_pref_metric_eval"], [16, 4, 1, "", "sum_utility"]], "ax.utils.testing.test_init_files": [[16, 1, 1, "", "InitTest"]], "ax.utils.testing.test_init_files.InitTest": [[16, 2, 1, "", "test_InitFiles"]], "ax.utils.testing.torch_stubs": [[16, 4, 1, "", "get_torch_test_data"]], "ax.utils.testing.utils": [[16, 4, 1, "", "generic_equals"]], "ax.utils.tutorials": [[16, 0, 0, "-", "cnn_utils"]], "ax.utils.tutorials.cnn_utils": [[16, 1, 1, "", "CNN"], [16, 4, 1, "", "evaluate"], [16, 4, 1, "", "get_partition_data_loaders"], [16, 4, 1, "", "load_mnist"], [16, 4, 1, "", "split_dataset"], [16, 4, 1, "", "train"]], "ax.utils.tutorials.cnn_utils.CNN": [[16, 2, 1, "", "forward"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:property", "6": "py:exception", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "data", "Python data"]}, "titleterms": {"ax": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], "analysi": 0, "markdown": 0, "plotli": 0, "healthcheck": 0, "benchmark": [2, 16], "method": 2, "problem": [2, 8, 12], "result": [2, 16], "modular": 2, "botorch": [2, 8, 10, 12], "sobol": [2, 10, 16], "metric": [2, 3, 8, 16], "base": [2, 4, 6, 9, 10, 11, 16], "jenatton": [2, 8], "util": [2, 3, 4, 9, 10, 11, 13, 14, 16], "registri": [2, 9, 14], "high": 2, "dimension": 2, "embed": 2, "surrog": [2, 10], "mix": 2, "integ": 2, "synthet": [2, 12, 16], "pytorchcnn": 2, "torchvis": 2, "runner": [2, 3, 12], "test": [2, 8, 12, 16], "core": [3, 5, 16], "class": 3, "arm": 3, "basetri": 3, "batchtrial": 3, "data": [3, 5], "experi": [3, 15], "generationstrategyinterfac": 3, "generatorrun": 3, "mapdata": 3, "mapmetr": 3, "multitypeexperi": 3, "object": 3, "observ": 3, "optimizationconfig": 3, "outcomeconstraint": 3, "paramet": 3, "parameterconstraint": 3, "parameterdistribut": 3, "riskmeasur": 3, "searchspac": 3, "trial": 3, "type": [3, 10], "format": 3, "early_stop": 4, "strategi": [4, 5, 6, 9, 15], "logic": 4, "percentileearlystoppingstrategi": 4, "thresholdearlystoppingstrategi": 4, "except": 5, "constant": [5, 16], "gener": [5, 9, 15], "model": [5, 9, 10, 11, 16], "storag": [5, 14], "global_stop": 6, "improvementglobalstoppingstrategi": 6, "api": 7, "refer": 7, "indic": 7, "tabl": [7, 11], "branin": [8, 16], "map": [8, 9, 16], "chemistri": 8, "curv": 8, "dictionari": 8, "lookup": 8, "factori": [8, 9], "hartmann6": 8, "l2": 8, "norm": 8, "noisi": 8, "function": [8, 16], "sklearn": 8, "tensorboard": 8, "torchx": [8, 12], "modelbridg": 9, "node": 9, "extern": 9, "modelspec": 9, "bridg": 9, "discret": [9, 10], "random": [9, 10, 16], "torch": [9, 10, 16], "pairwis": 9, "predict": 9, "cross": 9, "valid": [9, 14], "select": 9, "dispatch": 9, "transform": 9, "deprecated_transform_mixin": 9, "cast": 9, "cap_paramet": 9, "centered_unit_x": 9, "choice_encod": 9, "convert_metric_nam": 9, "derelativ": 9, "int_range_to_choic": 9, "int_to_float": 9, "ivw": 9, "inverse_gaussian_cdf_i": 9, "log": 9, "log_i": 9, "logit": 9, "map_unit_x": 9, "merge_repeated_measur": 9, "metrics_as_task": 9, "one_hot": 9, "percentile_i": 9, "power_transform_i": 9, "remove_fix": 9, "round": 9, "search_space_to_choic": 9, "search_space_to_float": 9, "stratified_standardize_i": 9, "task_encod": 9, "time_as_featur": 9, "trial_as_task": 9, "unit_x": 9, "winsor": 9, "relativ": 9, "discrete_bas": 10, "modul": [10, 14], "torch_bas": 10, "model_util": 10, "winsorization_config": 10, "eb_thompson": 10, "full_factori": 10, "thompson": 10, "uniform": 10, "botorch_default": 10, "botorch_kg": 10, "botorch_m": 10, "botorch_moo": 10, "botorch_moo_default": 10, "botorch_modular": 10, "acquisit": 10, "randomforest": 10, "multi_fidel": 10, "optimizer_argpars": 10, "sebo": 10, "kernel": 10, "input_constructor": 10, "covar_modul": 10, "input_transform": 10, "outcome_transform": 10, "cbo_lcea": 10, "cbo_lcem": 10, "cbo_sac": 10, "fully_bayesian": 10, "fully_bayesian_model_util": 10, "plot": [11, 16], "render": [11, 16], "bandit": 11, "rollout": 11, "contour": 11, "featur": 11, "import": 11, "margin": 11, "effect": 11, "diagnost": 11, "pareto": 11, "scatter": 11, "slice": 11, "trace": 11, "parallel": 11, "coordin": 11, "singlerunningtrialmixin": 12, "simul": [12, 16], "backend": [12, 16], "servic": 13, "client": 13, "manag": 13, "loop": 13, "interact": 13, "schedul": [13, 15, 16], "best": 13, "point": 13, "identif": 13, "instanti": 13, "report": [13, 16], "withdbsettingsbas": 13, "earlystop": 13, "json": 14, "json_stor": 14, "decod": 14, "encod": 14, "load": 14, "save": 14, "sqlalchemi": 14, "mysql": 14, "sqlite": 14, "sqa_stor": 14, "base_decod": 14, "base_encod": 14, "db": 14, "delet": 14, "struct": 14, "sqa_class": 14, "sqa_config": 14, "sqa_enum": 14, "timestamp": 14, "reduced_st": 14, "telemetri": 15, "common": 16, "decor": 16, "docutil": 16, "equal": 16, "executil": 16, "kwarg": 16, "logger": 16, "mock": 16, "serial": 16, "testutil": 16, "timeutil": 16, "typeutil": 16, "non": 16, "nativ": 16, "flake8": 16, "plugin": 16, "docstr": 16, "checker": 16, "measur": 16, "notebook": 16, "sensit": 16, "deriv": 16, "gp": 16, "stat": 16, "statstool": 16, "fit": 16, "stub": 16, "prefer": 16, "init": 16, "file": 16, "tutori": 16, "neural": 16, "net": 16}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"ax.analysis": [[0, "module-ax.analysis"]], "Analysis": [[0, "module-ax.analysis.analysis"]], "Markdown Analysis": [[0, "module-ax.analysis.markdown.markdown_analysis"]], "Plotly Analysis": [[0, "module-ax.analysis.plotly.plotly_analysis"]], "Healthcheck Analysis": [[0, "healthcheck-analysis"]], "ax": [[1, "ax"]], "ax.benchmark": [[2, "module-ax.benchmark"]], "Benchmark": [[2, "benchmark"], [2, "id1"]], "Benchmark Method": [[2, "module-ax.benchmark.benchmark_method"]], "Benchmark Problem": [[2, "module-ax.benchmark.benchmark_problem"]], "Benchmark Result": [[2, "module-ax.benchmark.benchmark_result"]], "Benchmark Methods Modular BoTorch": [[2, "module-ax.benchmark.methods.modular_botorch"]], "Benchmark Methods Sobol": [[2, "module-ax.benchmark.methods.sobol"]], "Benchmark Metrics Base": [[2, "module-ax.benchmark.metrics.base"]], "Benchmark Metrics Benchmark": [[2, "module-ax.benchmark.metrics.benchmark"]], "Benchmark Metrics Jenatton": [[2, "module-ax.benchmark.metrics.jenatton"]], "Benchmark Metrics Utils": [[2, "module-ax.benchmark.metrics.utils"]], "Benchmark Problems Registry": [[2, "module-ax.benchmark.problems.registry"]], "Benchmark Problems High Dimensional Embedding": [[2, "module-ax.benchmark.problems.hd_embedding"]], "Benchmark Problems Surrogate": [[2, "module-ax.benchmark.problems.surrogate"]], "Benchmark Problems Mixed Integer Synthetic": [[2, "module-ax.benchmark.problems.synthetic.discretized.mixed_integer"]], "Benchmark Problems Jenatton": [[2, "module-ax.benchmark.problems.synthetic.hss.jenatton"]], "Benchmark Problems PyTorchCNN": [[2, "module-ax.benchmark.problems.hpo.pytorch_cnn"]], "Benchmark Problems PyTorchCNN TorchVision": [[2, "module-ax.benchmark.problems.hpo.torchvision"]], "Benchmark Runners Base": [[2, "module-ax.benchmark.runners.base"]], "Benchmark Runners BoTorch Test": [[2, "module-ax.benchmark.runners.botorch_test"]], "Benchmark Runners Surrogate": [[2, "module-ax.benchmark.runners.surrogate"]], "ax.core": [[3, "module-ax.core"]], "Core Classes": [[3, "core-classes"]], "Arm": [[3, "module-ax.core.arm"]], "BaseTrial": [[3, "module-ax.core.base_trial"]], "BatchTrial": [[3, "module-ax.core.batch_trial"]], "Data": [[3, "data"], [5, "module-ax.exceptions.data_provider"]], "Experiment": [[3, "module-ax.core.experiment"], [15, "module-ax.telemetry.experiment"]], "GenerationStrategyInterface": [[3, "module-ax.core.generation_strategy_interface"]], "GeneratorRun": [[3, "module-ax.core.generator_run"]], "MapData": [[3, "mapdata"]], "MapMetric": [[3, "mapmetric"]], "Metric": [[3, "metric"]], "MultiTypeExperiment": [[3, "module-ax.core.multi_type_experiment"]], "Objective": [[3, "objective"]], "Observation": [[3, "module-ax.core.observation"]], "OptimizationConfig": [[3, "module-ax.core.optimization_config"]], "OutcomeConstraint": [[3, "outcomeconstraint"]], "Parameter": [[3, "module-ax.core.parameter"]], "ParameterConstraint": [[3, "module-ax.core.parameter_constraint"]], "ParameterDistribution": [[3, "module-ax.core.parameter_distribution"]], "RiskMeasure": [[3, "module-ax.core.risk_measures"]], "Runner": [[3, "module-ax.core.runner"]], "SearchSpace": [[3, "searchspace"]], "Trial": [[3, "module-ax.core.trial"]], "Core Types": [[3, "module-ax.core.types"]], "Core Utils": [[3, "module-ax.core.utils"]], "Formatting Utils": [[3, "module-ax.core.formatting_utils"]], "ax.early_stopping": [[4, "module-ax.early_stopping"]], "Strategies": [[4, "strategies"], [6, "strategies"]], "Base Strategies": [[4, "module-ax.early_stopping.strategies.base"], [6, "module-ax.global_stopping.strategies.base"]], "Logical Strategies": [[4, "module-ax.early_stopping.strategies.logical"]], "PercentileEarlyStoppingStrategy": [[4, "module-ax.early_stopping.strategies.percentile"]], "ThresholdEarlyStoppingStrategy": [[4, "module-ax.early_stopping.strategies.threshold"]], "Utils": [[4, "module-ax.early_stopping.utils"], [13, "utils"], [16, "module-ax.utils.testing.utils"]], "ax.exceptions": [[5, "module-ax.exceptions"]], "Constants": [[5, "module-ax.exceptions.constants"], [16, "module-ax.utils.common.constants"]], "Core": [[5, "module-ax.exceptions.core"]], "Generation Strategy": [[5, "module-ax.exceptions.generation_strategy"], [9, "module-ax.modelbridge.generation_strategy"], [15, "module-ax.telemetry.generation_strategy"]], "Model": [[5, "module-ax.exceptions.model"]], "Storage": [[5, "module-ax.exceptions.storage"]], "ax.global_stopping": [[6, "module-ax.global_stopping"]], "ImprovementGlobalStoppingStrategy": [[6, "module-ax.global_stopping.strategies.improvement"]], "API Reference": [[7, "api-reference"]], "Indices and tables": [[7, "indices-and-tables"]], "ax.metrics": [[8, "module-ax.metrics"]], "BoTorch Test Problem": [[8, "module-ax.metrics.botorch_test_problem"], [12, "botorch-test-problem"]], "Branin": [[8, "module-ax.metrics.branin"]], "Branin Map": [[8, "module-ax.metrics.branin_map"]], "Chemistry": [[8, "module-ax.metrics.chemistry"]], "Curve": [[8, "module-ax.metrics.curve"]], "Dictionary Lookup": [[8, "module-ax.metrics.dict_lookup"]], "Factorial": [[8, "module-ax.metrics.factorial"]], "Hartmann6": [[8, "module-ax.metrics.hartmann6"]], "Jenatton": [[8, "jenatton"]], "L2 Norm": [[8, "module-ax.metrics.l2norm"]], "Noisy Functions": [[8, "module-ax.metrics.noisy_function"]], "Noisy Function Map": [[8, "module-ax.metrics.noisy_function_map"]], "Sklearn": [[8, "module-ax.metrics.sklearn"]], "Tensorboard": [[8, "module-ax.metrics.tensorboard"]], "TorchX": [[8, "module-ax.metrics.torchx"]], "ax.modelbridge": [[9, "module-ax.modelbridge"]], "Generation Strategy, Registry, and Factory": [[9, "generation-strategy-registry-and-factory"]], "Generation Node": [[9, "module-ax.modelbridge.generation_node"]], "External Generation Node": [[9, "external-generation-node"]], "Registry": [[9, "module-ax.modelbridge.registry"]], "Factory": [[9, "module-ax.modelbridge.factory"]], "ModelSpec": [[9, "module-ax.modelbridge.model_spec"]], "Model Bridges": [[9, "model-bridges"]], "Base Model Bridge": [[9, "module-ax.modelbridge.base"]], "Discrete Model Bridge": [[9, "module-ax.modelbridge.discrete"]], "Random Model Bridge": [[9, "random-model-bridge"]], "Torch Model Bridge": [[9, "module-ax.modelbridge.torch"]], "Pairwise Model Bridge": [[9, "module-ax.modelbridge.pairwise"]], "Map Torch Model Bridge": [[9, "module-ax.modelbridge.map_torch"]], "Utilities": [[9, "utilities"], [14, "module-ax.storage.utils"]], "General Utilities": [[9, "module-ax.modelbridge.modelbridge_utils"]], "Prediction Utilities": [[9, "module-ax.modelbridge.prediction_utils"]], "Cross Validation": [[9, "module-ax.modelbridge.cross_validation"]], "Model Selection": [[9, "module-ax.modelbridge.best_model_selector"]], "Dispatch Utilities": [[9, "module-ax.modelbridge.dispatch_utils"]], "Transforms": [[9, "transforms"]], "ax.modelbridge.transforms.deprecated_transform_mixin": [[9, "module-ax.modelbridge.transforms.deprecated_transform_mixin"]], "ax.modelbridge.transforms.base": [[9, "module-ax.modelbridge.transforms.base"]], "ax.modelbridge.transforms.cast": [[9, "module-ax.modelbridge.transforms.cast"]], "ax.modelbridge.transforms.cap_parameter": [[9, "module-ax.modelbridge.transforms.cap_parameter"]], "ax.modelbridge.transforms.centered_unit_x": [[9, "module-ax.modelbridge.transforms.centered_unit_x"]], "ax.modelbridge.transforms.choice_encode": [[9, "module-ax.modelbridge.transforms.choice_encode"]], "ax.modelbridge.transforms.convert_metric_names": [[9, "module-ax.modelbridge.transforms.convert_metric_names"]], "ax.modelbridge.transforms.derelativize": [[9, "module-ax.modelbridge.transforms.derelativize"]], "ax.modelbridge.transforms.int_range_to_choice": [[9, "module-ax.modelbridge.transforms.int_range_to_choice"]], "ax.modelbridge.transforms.int_to_float": [[9, "module-ax.modelbridge.transforms.int_to_float"]], "ax.modelbridge.transforms.ivw": [[9, "module-ax.modelbridge.transforms.ivw"]], "ax.modelbridge.transforms.inverse_gaussian_cdf_y": [[9, "module-ax.modelbridge.transforms.inverse_gaussian_cdf_y"]], "ax.modelbridge.transforms.log": [[9, "module-ax.modelbridge.transforms.log"]], "ax.modelbridge.transforms.log_y": [[9, "module-ax.modelbridge.transforms.log_y"]], "ax.modelbridge.transforms.logit": [[9, "module-ax.modelbridge.transforms.logit"]], "ax.modelbridge.transforms.map_unit_x": [[9, "module-ax.modelbridge.transforms.map_unit_x"]], "ax.modelbridge.transforms.merge_repeated_measurements": [[9, "module-ax.modelbridge.transforms.merge_repeated_measurements"]], "ax.modelbridge.transforms.metrics_as_task": [[9, "module-ax.modelbridge.transforms.metrics_as_task"]], "ax.modelbridge.transforms.one_hot": [[9, "module-ax.modelbridge.transforms.one_hot"]], "ax.modelbridge.transforms.percentile_y": [[9, "module-ax.modelbridge.transforms.percentile_y"]], "ax.modelbridge.transforms.power_transform_y": [[9, "module-ax.modelbridge.transforms.power_transform_y"]], "ax.modelbridge.transforms.remove_fixed": [[9, "module-ax.modelbridge.transforms.remove_fixed"]], "ax.modelbridge.transforms.rounding": [[9, "module-ax.modelbridge.transforms.rounding"]], "ax.modelbridge.transforms.search_space_to_choice": [[9, "module-ax.modelbridge.transforms.search_space_to_choice"]], "ax.modelbridge.transforms.search_space_to_float": [[9, "ax-modelbridge-transforms-search-space-to-float"]], "ax.modelbridge.transforms.stratified_standardize_y": [[9, "module-ax.modelbridge.transforms.stratified_standardize_y"]], "ax.modelbridge.transforms.task_encode": [[9, "module-ax.modelbridge.transforms.task_encode"]], "ax.modelbridge.transforms.time_as_feature": [[9, "ax-modelbridge-transforms-time-as-feature"]], "ax.modelbridge.transforms.trial_as_task": [[9, "module-ax.modelbridge.transforms.trial_as_task"]], "ax.modelbridge.transforms.unit_x": [[9, "module-ax.modelbridge.transforms.unit_x"]], "ax.modelbridge.transforms.utils": [[9, "module-ax.modelbridge.transforms.utils"]], "ax.modelbridge.winsorize": [[9, "module-ax.modelbridge.transforms.winsorize"]], "}": [[9, "id11"], [12, "id1"]], "ax.modelbridge.transforms.relativize": [[9, "module-ax.modelbridge.transforms.relativize"]], "ax.models": [[10, "module-ax.models"]], "Base Models & Utilities": [[10, "base-models-utilities"]], "ax.models.base": [[10, "module-ax.models.base"]], "ax.models.discrete_base module": [[10, "module-ax.models.discrete_base"]], "ax.models.torch_base module": [[10, "module-ax.models.torch_base"]], "ax.models.model_utils module": [[10, "module-ax.models.model_utils"]], "ax.models.types": [[10, "module-ax.models.types"]], "ax.models.winsorization_config module": [[10, "module-ax.models.winsorization_config"]], "Discrete Models": [[10, "discrete-models"]], "ax.models.discrete.eb_thompson module": [[10, "module-ax.models.discrete.eb_thompson"]], "ax.models.discrete.full_factorial module": [[10, "module-ax.models.discrete.full_factorial"]], "ax.models.discrete.thompson module": [[10, "module-ax.models.discrete.thompson"]], "Random Models": [[10, "random-models"]], "ax.models.random.base module": [[10, "module-ax.models.random.base"]], "ax.models.random.uniform module": [[10, "module-ax.models.random.uniform"]], "ax.models.random.sobol module": [[10, "module-ax.models.random.sobol"]], "Torch Models & Utilities": [[10, "torch-models-utilities"]], "ax.models.torch.botorch module": [[10, "module-ax.models.torch.botorch"]], "ax.models.torch.botorch_defaults module": [[10, "module-ax.models.torch.botorch_defaults"]], "ax.models.torch.botorch_kg module": [[10, "module-ax.models.torch.botorch_kg"]], "ax.models.torch.botorch_mes module": [[10, "module-ax.models.torch.botorch_mes"]], "ax.models.torch.botorch_moo module": [[10, "module-ax.models.torch.botorch_moo"]], "ax.models.torch.botorch_moo_defaults module": [[10, "module-ax.models.torch.botorch_moo_defaults"]], "ax.models.torch.botorch_modular.acquisition module": [[10, "module-ax.models.torch.botorch_modular.acquisition"]], "ax.models.torch.randomforest module": [[10, "module-ax.models.torch.randomforest"]], "ax.models.torch.botorch_modular.model module": [[10, "module-ax.models.torch.botorch_modular.model"]], "ax.models.torch.botorch_modular.multi_fidelity module": [[10, "ax-models-torch-botorch-modular-multi-fidelity-module"]], "ax.models.torch.botorch_modular.optimizer_argparse module": [[10, "module-ax.models.torch.botorch_modular.optimizer_argparse"]], "ax.models.torch.botorch_modular.sebo module": [[10, "module-ax.models.torch.botorch_modular.sebo"]], "ax.models.torch.botorch_modular.surrogate module": [[10, "module-ax.models.torch.botorch_modular.surrogate"]], "ax.models.torch.botorch_modular.utils module": [[10, "module-ax.models.torch.botorch_modular.utils"]], "ax.models.torch.botorch_modular.kernels module": [[10, "module-ax.models.torch.botorch_modular.kernels"]], "ax.models.torch.botorch_modular.input_constructors.covar_modules module": [[10, "module-ax.models.torch.botorch_modular.input_constructors.covar_modules"]], "ax.models.torch.botorch_modular.input_constructors.input_transforms module": [[10, "module-ax.models.torch.botorch_modular.input_constructors.input_transforms"]], "ax.models.torch.botorch_modular.input_constructors.outcome_transform module": [[10, "module-ax.models.torch.botorch_modular.input_constructors.outcome_transform"]], "ax.models.torch.cbo_lcea module": [[10, "module-ax.models.torch.cbo_lcea"]], "ax.models.torch.cbo_lcem module": [[10, "module-ax.models.torch.cbo_lcem"]], "ax.models.torch.cbo_sac module": [[10, "module-ax.models.torch.cbo_sac"]], "ax.models.torch.fully_bayesian module": [[10, "ax-models-torch-fully-bayesian-module"]], "ax.models.torch.fully_bayesian_model_utils module": [[10, "ax-models-torch-fully-bayesian-model-utils-module"]], "ax.models.torch.utils module": [[10, "module-ax.models.torch.utils"]], "ax.plot": [[11, "module-ax.plot"]], "Rendering": [[11, "module-ax.plot.render"]], "Plots": [[11, "plots"]], "Base": [[11, "module-ax.plot.base"], [16, "module-ax.utils.common.base"]], "Bandit Rollout": [[11, "module-ax.plot.bandit_rollout"]], "Contour Plot": [[11, "module-ax.plot.contour"]], "Feature Importances": [[11, "module-ax.plot.feature_importances"]], "Marginal Effects": [[11, "module-ax.plot.marginal_effects"]], "Model Diagnostics": [[11, "module-ax.plot.diagnostic"]], "Pareto Plots": [[11, "module-ax.plot.pareto_frontier"]], "Scatter Plots": [[11, "module-ax.plot.scatter"]], "Slice Plot": [[11, "module-ax.plot.slice"]], "Table": [[11, "module-ax.plot.table_view"]], "Trace Plots": [[11, "module-ax.plot.trace"]], "Parallel Coordinates": [[11, "parallel-coordinates"]], "Plotting Utilities": [[11, "module-ax.plot.color"]], "ax.runners": [[12, "module-ax.runners"]], "SingleRunningTrialMixin": [[12, "module-ax.runners.single_running_trial_mixin"]], "Synthetic Runner": [[12, "module-ax.runners.synthetic"]], "Simulated Backend Runner": [[12, "module-ax.runners.simulated_backend"]], "TorchX Runner": [[12, "module-ax.runners.torchx"]], "ax.service": [[13, "module-ax.service"]], "Ax Client": [[13, "module-ax.service.ax_client"]], "Managed Loop": [[13, "module-ax.service.managed_loop"]], "Interactive Loop": [[13, "module-ax.service.interactive_loop"]], "Scheduler": [[13, "module-ax.service.scheduler"], [15, "module-ax.telemetry.scheduler"]], "Best Point Identification": [[13, "module-ax.service.utils.best_point_mixin"]], "Instantiation": [[13, "module-ax.service.utils.instantiation"]], "Reporting": [[13, "module-ax.service.utils.report_utils"]], "WithDBSettingsBase": [[13, "module-ax.service.utils.with_db_settings_base"]], "EarlyStopping": [[13, "module-ax.service.utils.early_stopping"]], "ax.storage": [[14, "module-ax.storage"]], "JSON": [[14, "json"]], "ax.storage.json_store.decoder module": [[14, "module-ax.storage.json_store.decoder"]], "ax.storage.json_store.decoders module": [[14, "module-ax.storage.json_store.decoders"]], "ax.storage.json_store.encoder module": [[14, "module-ax.storage.json_store.encoder"]], "ax.storage.json_store.encoders module": [[14, "module-ax.storage.json_store.encoders"]], "ax.storage.json_store.load module": [[14, "module-ax.storage.json_store.load"]], "ax.storage.json_store.registry module": [[14, "module-ax.storage.json_store.registry"]], "ax.storage.json_store.save module": [[14, "module-ax.storage.json_store.save"]], "SQLAlchemy (MySQL / SQLite)": [[14, "sqlalchemy-mysql-sqlite"]], "ax.storage.sqa_store.base_decoder module": [[14, "module-ax.storage.sqa_store.decoder"]], "ax.storage.sqa_store.base_encoder module": [[14, "module-ax.storage.sqa_store.encoder"]], "ax.storage.sqa_store.db module": [[14, "module-ax.storage.sqa_store.db"]], "ax.storage.sqa_store.delete module": [[14, "module-ax.storage.sqa_store.delete"]], "ax.storage.sqa_store.json module": [[14, "module-ax.storage.sqa_store.json"]], "ax.storage.sqa_store.load module": [[14, "module-ax.storage.sqa_store.load"]], "ax.storage.sqa_store.save module": [[14, "module-ax.storage.sqa_store.save"]], "ax.storage.sqa_store.structs module": [[14, "module-ax.storage.sqa_store.structs"]], "ax.storage.sqa_store.sqa_classes module": [[14, "module-ax.storage.sqa_store.sqa_classes"]], "ax.storage.sqa_store.sqa_config module": [[14, "ax-storage-sqa-store-sqa-config-module"]], "ax.storage.sqa_store.sqa_enum module": [[14, "module-ax.storage.sqa_store.sqa_enum"]], "ax.storage.sqa_store.timestamp module": [[14, "module-ax.storage.sqa_store.timestamp"]], "ax.storage.sqa_store.utils module": [[14, "module-ax.storage.sqa_store.utils"]], "ax.storage.sqa_store.validation module": [[14, "module-ax.storage.sqa_store.validation"]], "ax.storage.sqa_store.reduced_state module": [[14, "module-ax.storage.sqa_store.reduced_state"]], "Registries": [[14, "module-ax.storage.botorch_modular_registry"]], "ax.telemetry": [[15, "module-ax.telemetry"]], "ax.utils": [[16, "module-ax.utils"]], "Common": [[16, "common"]], "Decorator": [[16, "module-ax.utils.common.decorator"]], "Docutils": [[16, "module-ax.utils.common.docutils"]], "Equality": [[16, "module-ax.utils.common.equality"]], "Executils": [[16, "module-ax.utils.common.executils"]], "Kwargs": [[16, "module-ax.utils.common.kwargs"]], "Logger": [[16, "module-ax.utils.common.logger"]], "Mock Torch": [[16, "module-ax.utils.common.mock"]], "Random": [[16, "module-ax.utils.common.random"]], "Result": [[16, "module-ax.utils.common.result"]], "Serialization": [[16, "module-ax.utils.common.serialization"]], "Testutils": [[16, "module-ax.utils.common.testutils"]], "Timeutils": [[16, "module-ax.utils.common.timeutils"]], "Typeutils": [[16, "module-ax.utils.common.typeutils"]], "Typeutils Non-Native": [[16, "typeutils-non-native"]], "Typeutils Torch": [[16, "module-ax.utils.common.typeutils_torch"]], "Flake8 Plugins": [[16, "flake8-plugins"]], "Docstring Checker": [[16, "module-ax.utils.flake8_plugins.docstring_checker"]], "Measurement": [[16, "measurement"]], "Synthetic Functions": [[16, "module-ax.utils.measurement.synthetic_functions"]], "Notebook": [[16, "notebook"]], "Plotting": [[16, "module-ax.utils.notebook.plotting"]], "Report": [[16, "report"]], "Render": [[16, "module-ax.utils.report.render"]], "Sensitivity": [[16, "sensitivity"]], "Derivative GP": [[16, "module-ax.utils.sensitivity.derivative_gp"]], "Derivative Measures": [[16, "module-ax.utils.sensitivity.derivative_measures"]], "Sobol Measures": [[16, "module-ax.utils.sensitivity.sobol_measures"]], "Stats": [[16, "stats"]], "Statstools": [[16, "module-ax.utils.stats.statstools"]], "Model Fit Metrics": [[16, "module-ax.utils.stats.model_fit_stats"]], "Testing": [[16, "testing"]], "Backend Scheduler": [[16, "module-ax.utils.testing.backend_scheduler"]], "Backend Simulator": [[16, "module-ax.utils.testing.backend_simulator"]], "Benchmark Stubs": [[16, "module-ax.utils.testing.benchmark_stubs"]], "Core Stubs": [[16, "module-ax.utils.testing.core_stubs"]], "Modeling Stubs": [[16, "module-ax.utils.testing.modeling_stubs"]], "Preference Stubs": [[16, "preference-stubs"]], "Mocking": [[16, "module-ax.utils.testing.mock"]], "Test Init Files": [[16, "module-ax.utils.testing.test_init_files"]], "Torch Stubs": [[16, "module-ax.utils.testing.torch_stubs"]], "Test Metrics": [[16, "test-metrics"]], "Backend Simulator Map": [[16, "module-ax.utils.testing.metrics.backend_simulator_map"]], "Branin Backend Map": [[16, "module-ax.utils.testing.metrics.branin_backend_map"]], "Tutorials": [[16, "tutorials"]], "Neural Net": [[16, "module-ax.utils.tutorials.cnn_utils"]]}, "indexentries": {"analysis (class in ax.analysis.analysis)": [[0, "ax.analysis.analysis.Analysis"]], "analysiscard (class in ax.analysis.analysis)": [[0, "ax.analysis.analysis.AnalysisCard"]], "analysiscardlevel (class in ax.analysis.analysis)": [[0, "ax.analysis.analysis.AnalysisCardLevel"]], "critical (ax.analysis.analysis.analysiscardlevel attribute)": [[0, "ax.analysis.analysis.AnalysisCardLevel.CRITICAL"]], "debug (ax.analysis.analysis.analysiscardlevel attribute)": [[0, "ax.analysis.analysis.AnalysisCardLevel.DEBUG"]], "fail (ax.analysis.healthcheck.healthcheck_analysis.healthcheckstatus attribute)": [[0, "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckStatus.FAIL"]], "high (ax.analysis.analysis.analysiscardlevel attribute)": [[0, "ax.analysis.analysis.AnalysisCardLevel.HIGH"]], "healthcheckanalysis (class in ax.analysis.healthcheck.healthcheck_analysis)": [[0, "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckAnalysis"]], "healthcheckanalysiscard (class in ax.analysis.healthcheck.healthcheck_analysis)": [[0, "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckAnalysisCard"]], "healthcheckstatus (class in ax.analysis.healthcheck.healthcheck_analysis)": [[0, "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckStatus"]], "low (ax.analysis.analysis.analysiscardlevel attribute)": [[0, "ax.analysis.analysis.AnalysisCardLevel.LOW"]], "mid (ax.analysis.analysis.analysiscardlevel attribute)": [[0, "ax.analysis.analysis.AnalysisCardLevel.MID"]], "markdownanalysis (class in ax.analysis.markdown.markdown_analysis)": [[0, "ax.analysis.markdown.markdown_analysis.MarkdownAnalysis"]], "markdownanalysiscard (class in ax.analysis.markdown.markdown_analysis)": [[0, "ax.analysis.markdown.markdown_analysis.MarkdownAnalysisCard"]], "pass (ax.analysis.healthcheck.healthcheck_analysis.healthcheckstatus attribute)": [[0, "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckStatus.PASS"]], "plotlyanalysis (class in ax.analysis.plotly.plotly_analysis)": [[0, "ax.analysis.plotly.plotly_analysis.PlotlyAnalysis"]], "plotlyanalysiscard (class in ax.analysis.plotly.plotly_analysis)": [[0, "ax.analysis.plotly.plotly_analysis.PlotlyAnalysisCard"]], "warning (ax.analysis.healthcheck.healthcheck_analysis.healthcheckstatus attribute)": [[0, "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckStatus.WARNING"]], "ax.analysis": [[0, "module-ax.analysis"]], "ax.analysis.analysis": [[0, "module-ax.analysis.analysis"]], "ax.analysis.healthcheck.healthcheck_analysis": [[0, "module-ax.analysis.healthcheck.healthcheck_analysis"]], "ax.analysis.markdown.markdown_analysis": [[0, "module-ax.analysis.markdown.markdown_analysis"]], "ax.analysis.plotly.plotly_analysis": [[0, "module-ax.analysis.plotly.plotly_analysis"]], "blob (ax.analysis.analysis.analysiscard attribute)": [[0, "ax.analysis.analysis.AnalysisCard.blob"]], "blob_annotation (ax.analysis.analysis.analysiscard attribute)": [[0, "ax.analysis.analysis.AnalysisCard.blob_annotation"]], "blob_annotation (ax.analysis.healthcheck.healthcheck_analysis.healthcheckanalysiscard attribute)": [[0, "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckAnalysisCard.blob_annotation"]], "blob_annotation (ax.analysis.markdown.markdown_analysis.markdownanalysiscard attribute)": [[0, "ax.analysis.markdown.markdown_analysis.MarkdownAnalysisCard.blob_annotation"]], "blob_annotation (ax.analysis.plotly.plotly_analysis.plotlyanalysiscard attribute)": [[0, "ax.analysis.plotly.plotly_analysis.PlotlyAnalysisCard.blob_annotation"]], "compute() (ax.analysis.analysis.analysis method)": [[0, "ax.analysis.analysis.Analysis.compute"]], "compute() (ax.analysis.healthcheck.healthcheck_analysis.healthcheckanalysis method)": [[0, "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckAnalysis.compute"]], "compute() (ax.analysis.markdown.markdown_analysis.markdownanalysis method)": [[0, "ax.analysis.markdown.markdown_analysis.MarkdownAnalysis.compute"]], "compute() (ax.analysis.plotly.plotly_analysis.plotlyanalysis method)": [[0, "ax.analysis.plotly.plotly_analysis.PlotlyAnalysis.compute"]], "df (ax.analysis.analysis.analysiscard attribute)": [[0, "ax.analysis.analysis.AnalysisCard.df"]], "get_figure() (ax.analysis.plotly.plotly_analysis.plotlyanalysiscard method)": [[0, "ax.analysis.plotly.plotly_analysis.PlotlyAnalysisCard.get_figure"]], "get_markdown() (ax.analysis.markdown.markdown_analysis.markdownanalysiscard method)": [[0, "ax.analysis.markdown.markdown_analysis.MarkdownAnalysisCard.get_markdown"]], "get_status() (ax.analysis.healthcheck.healthcheck_analysis.healthcheckanalysiscard method)": [[0, "ax.analysis.healthcheck.healthcheck_analysis.HealthcheckAnalysisCard.get_status"]], "level (ax.analysis.analysis.analysiscard attribute)": [[0, "ax.analysis.analysis.AnalysisCard.level"]], "module": [[0, "module-ax.analysis"], [0, "module-ax.analysis.analysis"], [0, "module-ax.analysis.healthcheck.healthcheck_analysis"], [0, "module-ax.analysis.markdown.markdown_analysis"], [0, "module-ax.analysis.plotly.plotly_analysis"], [2, "module-ax.benchmark"], [2, "module-ax.benchmark.benchmark"], [2, "module-ax.benchmark.benchmark_method"], [2, "module-ax.benchmark.benchmark_problem"], [2, "module-ax.benchmark.benchmark_result"], [2, "module-ax.benchmark.methods.modular_botorch"], [2, "module-ax.benchmark.methods.sobol"], [2, "module-ax.benchmark.metrics.base"], [2, "module-ax.benchmark.metrics.benchmark"], [2, "module-ax.benchmark.metrics.jenatton"], [2, "module-ax.benchmark.metrics.utils"], [2, "module-ax.benchmark.problems.hd_embedding"], [2, "module-ax.benchmark.problems.hpo.pytorch_cnn"], [2, "module-ax.benchmark.problems.hpo.torchvision"], [2, "module-ax.benchmark.problems.registry"], [2, "module-ax.benchmark.problems.surrogate"], [2, "module-ax.benchmark.problems.synthetic.discretized.mixed_integer"], [2, "module-ax.benchmark.problems.synthetic.hss.jenatton"], [2, "module-ax.benchmark.runners.base"], [2, "module-ax.benchmark.runners.botorch_test"], [2, "module-ax.benchmark.runners.surrogate"], [3, "module-ax.core"], [3, "module-ax.core.arm"], [3, "module-ax.core.base_trial"], [3, "module-ax.core.batch_trial"], [3, "module-ax.core.experiment"], [3, "module-ax.core.formatting_utils"], [3, "module-ax.core.generation_strategy_interface"], [3, "module-ax.core.generator_run"], [3, "module-ax.core.multi_type_experiment"], [3, "module-ax.core.observation"], [3, "module-ax.core.optimization_config"], [3, "module-ax.core.parameter"], [3, "module-ax.core.parameter_constraint"], [3, "module-ax.core.parameter_distribution"], [3, "module-ax.core.risk_measures"], [3, "module-ax.core.runner"], [3, "module-ax.core.trial"], [3, "module-ax.core.types"], [3, "module-ax.core.utils"], [4, "module-ax.early_stopping"], [4, "module-ax.early_stopping.strategies.base"], [4, "module-ax.early_stopping.strategies.logical"], [4, "module-ax.early_stopping.strategies.percentile"], [4, "module-ax.early_stopping.strategies.threshold"], [4, "module-ax.early_stopping.utils"], [5, "module-ax.exceptions"], [5, "module-ax.exceptions.constants"], [5, "module-ax.exceptions.core"], [5, "module-ax.exceptions.data_provider"], [5, "module-ax.exceptions.generation_strategy"], [5, "module-ax.exceptions.model"], [5, "module-ax.exceptions.storage"], [6, "module-ax.global_stopping"], [6, "module-ax.global_stopping.strategies.base"], [6, "module-ax.global_stopping.strategies.improvement"], [8, "module-ax.metrics"], [8, "module-ax.metrics.botorch_test_problem"], [8, "module-ax.metrics.branin"], [8, "module-ax.metrics.branin_map"], [8, "module-ax.metrics.chemistry"], [8, "module-ax.metrics.curve"], [8, "module-ax.metrics.dict_lookup"], [8, "module-ax.metrics.factorial"], [8, "module-ax.metrics.hartmann6"], [8, "module-ax.metrics.l2norm"], [8, "module-ax.metrics.noisy_function"], [8, "module-ax.metrics.noisy_function_map"], [8, "module-ax.metrics.sklearn"], [8, "module-ax.metrics.tensorboard"], [8, "module-ax.metrics.torchx"], [9, "module-ax.modelbridge"], [9, "module-ax.modelbridge.base"], [9, "module-ax.modelbridge.best_model_selector"], [9, "module-ax.modelbridge.cross_validation"], [9, "module-ax.modelbridge.discrete"], [9, "module-ax.modelbridge.dispatch_utils"], [9, "module-ax.modelbridge.external_generation_node"], [9, "module-ax.modelbridge.factory"], [9, "module-ax.modelbridge.generation_node"], [9, "module-ax.modelbridge.generation_strategy"], [9, "module-ax.modelbridge.map_torch"], [9, "module-ax.modelbridge.model_spec"], [9, "module-ax.modelbridge.modelbridge_utils"], [9, "module-ax.modelbridge.pairwise"], [9, "module-ax.modelbridge.prediction_utils"], [9, "module-ax.modelbridge.registry"], [9, "module-ax.modelbridge.torch"], [9, "module-ax.modelbridge.transforms.base"], [9, "module-ax.modelbridge.transforms.cap_parameter"], [9, "module-ax.modelbridge.transforms.cast"], [9, "module-ax.modelbridge.transforms.centered_unit_x"], [9, "module-ax.modelbridge.transforms.choice_encode"], [9, "module-ax.modelbridge.transforms.convert_metric_names"], [9, "module-ax.modelbridge.transforms.deprecated_transform_mixin"], [9, "module-ax.modelbridge.transforms.derelativize"], [9, "module-ax.modelbridge.transforms.int_range_to_choice"], [9, "module-ax.modelbridge.transforms.int_to_float"], [9, "module-ax.modelbridge.transforms.inverse_gaussian_cdf_y"], [9, "module-ax.modelbridge.transforms.ivw"], [9, "module-ax.modelbridge.transforms.log"], [9, "module-ax.modelbridge.transforms.log_y"], [9, "module-ax.modelbridge.transforms.logit"], [9, "module-ax.modelbridge.transforms.map_unit_x"], [9, "module-ax.modelbridge.transforms.merge_repeated_measurements"], [9, "module-ax.modelbridge.transforms.metrics_as_task"], [9, "module-ax.modelbridge.transforms.one_hot"], [9, "module-ax.modelbridge.transforms.percentile_y"], [9, "module-ax.modelbridge.transforms.power_transform_y"], [9, "module-ax.modelbridge.transforms.relativize"], [9, "module-ax.modelbridge.transforms.remove_fixed"], [9, "module-ax.modelbridge.transforms.rounding"], [9, "module-ax.modelbridge.transforms.search_space_to_choice"], [9, "module-ax.modelbridge.transforms.standardize_y"], [9, "module-ax.modelbridge.transforms.stratified_standardize_y"], [9, "module-ax.modelbridge.transforms.task_encode"], [9, "module-ax.modelbridge.transforms.time_as_feature"], [9, "module-ax.modelbridge.transforms.trial_as_task"], [9, "module-ax.modelbridge.transforms.unit_x"], [9, "module-ax.modelbridge.transforms.utils"], [9, "module-ax.modelbridge.transforms.winsorize"], [10, "module-ax.models"], [10, "module-ax.models.base"], [10, "module-ax.models.discrete.eb_thompson"], [10, "module-ax.models.discrete.full_factorial"], [10, "module-ax.models.discrete.thompson"], [10, "module-ax.models.discrete_base"], [10, "module-ax.models.model_utils"], [10, "module-ax.models.random.base"], [10, "module-ax.models.random.sobol"], [10, "module-ax.models.random.uniform"], [10, "module-ax.models.torch.botorch"], [10, "module-ax.models.torch.botorch_defaults"], [10, "module-ax.models.torch.botorch_kg"], [10, "module-ax.models.torch.botorch_mes"], [10, "module-ax.models.torch.botorch_modular.acquisition"], [10, "module-ax.models.torch.botorch_modular.input_constructors.covar_modules"], [10, "module-ax.models.torch.botorch_modular.input_constructors.input_transforms"], [10, "module-ax.models.torch.botorch_modular.input_constructors.outcome_transform"], [10, "module-ax.models.torch.botorch_modular.kernels"], [10, "module-ax.models.torch.botorch_modular.model"], [10, "module-ax.models.torch.botorch_modular.optimizer_argparse"], [10, "module-ax.models.torch.botorch_modular.sebo"], [10, "module-ax.models.torch.botorch_modular.surrogate"], [10, "module-ax.models.torch.botorch_modular.utils"], [10, "module-ax.models.torch.botorch_moo"], [10, "module-ax.models.torch.botorch_moo_defaults"], [10, "module-ax.models.torch.cbo_lcea"], [10, "module-ax.models.torch.cbo_lcem"], [10, "module-ax.models.torch.cbo_sac"], [10, "module-ax.models.torch.randomforest"], [10, "module-ax.models.torch.utils"], [10, "module-ax.models.torch_base"], [10, "module-ax.models.types"], [10, "module-ax.models.winsorization_config"], [11, "module-ax.plot"], [11, "module-ax.plot.bandit_rollout"], [11, "module-ax.plot.base"], [11, "module-ax.plot.color"], [11, "module-ax.plot.contour"], [11, "module-ax.plot.diagnostic"], [11, "module-ax.plot.feature_importances"], [11, "module-ax.plot.helper"], [11, "module-ax.plot.marginal_effects"], [11, "module-ax.plot.parallel_coordinates"], [11, "module-ax.plot.pareto_frontier"], [11, "module-ax.plot.pareto_utils"], [11, "module-ax.plot.render"], [11, "module-ax.plot.scatter"], [11, "module-ax.plot.slice"], [11, "module-ax.plot.table_view"], [11, "module-ax.plot.trace"], [12, "module-ax.runners"], [12, "module-ax.runners.simulated_backend"], [12, "module-ax.runners.single_running_trial_mixin"], [12, "module-ax.runners.synthetic"], [12, "module-ax.runners.torchx"], [13, "module-ax.service"], [13, "module-ax.service.ax_client"], [13, "module-ax.service.interactive_loop"], [13, "module-ax.service.managed_loop"], [13, "module-ax.service.scheduler"], [13, "module-ax.service.utils.best_point"], [13, "module-ax.service.utils.best_point_mixin"], [13, "module-ax.service.utils.early_stopping"], [13, "module-ax.service.utils.instantiation"], [13, "module-ax.service.utils.report_utils"], [13, "module-ax.service.utils.scheduler_options"], [13, "module-ax.service.utils.with_db_settings_base"], [14, "module-ax.storage"], [14, "module-ax.storage.botorch_modular_registry"], [14, "module-ax.storage.json_store.decoder"], [14, "module-ax.storage.json_store.decoders"], [14, "module-ax.storage.json_store.encoder"], [14, "module-ax.storage.json_store.encoders"], [14, "module-ax.storage.json_store.load"], [14, "module-ax.storage.json_store.registry"], [14, "module-ax.storage.json_store.save"], [14, "module-ax.storage.metric_registry"], [14, "module-ax.storage.registry_bundle"], [14, "module-ax.storage.runner_registry"], [14, "module-ax.storage.sqa_store.db"], [14, "module-ax.storage.sqa_store.decoder"], [14, "module-ax.storage.sqa_store.delete"], [14, "module-ax.storage.sqa_store.encoder"], [14, "module-ax.storage.sqa_store.json"], [14, "module-ax.storage.sqa_store.load"], [14, "module-ax.storage.sqa_store.reduced_state"], [14, "module-ax.storage.sqa_store.save"], [14, "module-ax.storage.sqa_store.sqa_classes"], [14, "module-ax.storage.sqa_store.sqa_enum"], [14, "module-ax.storage.sqa_store.structs"], [14, "module-ax.storage.sqa_store.timestamp"], [14, "module-ax.storage.sqa_store.utils"], [14, "module-ax.storage.sqa_store.validation"], [14, "module-ax.storage.transform_registry"], [14, "module-ax.storage.utils"], [15, "module-ax.telemetry"], [15, "module-ax.telemetry.experiment"], [15, "module-ax.telemetry.generation_strategy"], [15, "module-ax.telemetry.scheduler"], [16, "module-ax.utils"], [16, "module-ax.utils.common.base"], [16, "module-ax.utils.common.constants"], [16, "module-ax.utils.common.decorator"], [16, "module-ax.utils.common.docutils"], [16, "module-ax.utils.common.equality"], [16, "module-ax.utils.common.executils"], [16, "module-ax.utils.common.kwargs"], [16, "module-ax.utils.common.logger"], [16, "module-ax.utils.common.mock"], [16, "module-ax.utils.common.random"], [16, "module-ax.utils.common.result"], [16, "module-ax.utils.common.serialization"], [16, "module-ax.utils.common.testutils"], [16, "module-ax.utils.common.timeutils"], [16, "module-ax.utils.common.typeutils"], [16, "module-ax.utils.common.typeutils_nonnative"], [16, "module-ax.utils.common.typeutils_torch"], [16, "module-ax.utils.flake8_plugins.docstring_checker"], [16, "module-ax.utils.measurement.synthetic_functions"], [16, "module-ax.utils.notebook.plotting"], [16, "module-ax.utils.report.render"], [16, "module-ax.utils.sensitivity.derivative_gp"], [16, "module-ax.utils.sensitivity.derivative_measures"], [16, "module-ax.utils.sensitivity.sobol_measures"], [16, "module-ax.utils.stats.model_fit_stats"], [16, "module-ax.utils.stats.statstools"], [16, "module-ax.utils.testing.backend_scheduler"], [16, "module-ax.utils.testing.backend_simulator"], [16, "module-ax.utils.testing.benchmark_stubs"], [16, "module-ax.utils.testing.core_stubs"], [16, "module-ax.utils.testing.metrics.backend_simulator_map"], [16, "module-ax.utils.testing.metrics.branin_backend_map"], [16, "module-ax.utils.testing.mock"], [16, "module-ax.utils.testing.modeling_stubs"], [16, "module-ax.utils.testing.preference_stubs"], [16, "module-ax.utils.testing.test_init_files"], [16, "module-ax.utils.testing.torch_stubs"], [16, "module-ax.utils.testing.utils"], [16, "module-ax.utils.tutorials.cnn_utils"]], "name (ax.analysis.analysis.analysiscard attribute)": [[0, "ax.analysis.analysis.AnalysisCard.name"]], "subtitle (ax.analysis.analysis.analysiscard attribute)": [[0, "ax.analysis.analysis.AnalysisCard.subtitle"]], "title (ax.analysis.analysis.analysiscard attribute)": [[0, "ax.analysis.analysis.AnalysisCard.title"]], "aggregatedbenchmarkresult (class in ax.benchmark.benchmark_result)": [[2, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult"]], "benchmarkmethod (class in ax.benchmark.benchmark_method)": [[2, "ax.benchmark.benchmark_method.BenchmarkMethod"]], "benchmarkmetric (class in ax.benchmark.metrics.benchmark)": [[2, "ax.benchmark.metrics.benchmark.BenchmarkMetric"]], "benchmarkmetricbase (class in ax.benchmark.metrics.base)": [[2, "ax.benchmark.metrics.base.BenchmarkMetricBase"]], "benchmarkproblem (class in ax.benchmark.benchmark_problem)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem"]], "benchmarkproblemregistryentry (class in ax.benchmark.problems.registry)": [[2, "ax.benchmark.problems.registry.BenchmarkProblemRegistryEntry"]], "benchmarkresult (class in ax.benchmark.benchmark_result)": [[2, "ax.benchmark.benchmark_result.BenchmarkResult"]], "benchmarkrunner (class in ax.benchmark.runners.base)": [[2, "ax.benchmark.runners.base.BenchmarkRunner"]], "botorchtestproblemrunner (class in ax.benchmark.runners.botorch_test)": [[2, "ax.benchmark.runners.botorch_test.BotorchTestProblemRunner"]], "groundtruthbenchmarkmetric (class in ax.benchmark.metrics.benchmark)": [[2, "ax.benchmark.metrics.benchmark.GroundTruthBenchmarkMetric"]], "groundtruthjenattonmetric (class in ax.benchmark.metrics.jenatton)": [[2, "ax.benchmark.metrics.jenatton.GroundTruthJenattonMetric"]], "groundtruthmetricmixin (class in ax.benchmark.metrics.base)": [[2, "ax.benchmark.metrics.base.GroundTruthMetricMixin"]], "jenattonmetric (class in ax.benchmark.metrics.jenatton)": [[2, "ax.benchmark.metrics.jenatton.JenattonMetric"]], "moosurrogatebenchmarkproblem (class in ax.benchmark.problems.surrogate)": [[2, "ax.benchmark.problems.surrogate.MOOSurrogateBenchmarkProblem"]], "multiobjectivebenchmarkproblem (class in ax.benchmark.benchmark_problem)": [[2, "ax.benchmark.benchmark_problem.MultiObjectiveBenchmarkProblem"]], "pytorchcnnbenchmarkproblem (class in ax.benchmark.problems.hpo.pytorch_cnn)": [[2, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNBenchmarkProblem"]], "pytorchcnnmetric (class in ax.benchmark.problems.hpo.pytorch_cnn)": [[2, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNMetric"]], "pytorchcnnrunner (class in ax.benchmark.problems.hpo.pytorch_cnn)": [[2, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner"]], "pytorchcnnrunner.cnn (class in ax.benchmark.problems.hpo.pytorch_cnn)": [[2, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.CNN"]], "pytorchcnntorchvisionbenchmarkproblem (class in ax.benchmark.problems.hpo.torchvision)": [[2, "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionBenchmarkProblem"]], "pytorchcnntorchvisionrunner (class in ax.benchmark.problems.hpo.torchvision)": [[2, "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionRunner"]], "soosurrogatebenchmarkproblem (class in ax.benchmark.problems.surrogate)": [[2, "ax.benchmark.problems.surrogate.SOOSurrogateBenchmarkProblem"]], "surrogatebenchmarkproblembase (class in ax.benchmark.problems.surrogate)": [[2, "ax.benchmark.problems.surrogate.SurrogateBenchmarkProblemBase"]], "surrogaterunner (class in ax.benchmark.runners.surrogate)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner"]], "ax.benchmark": [[2, "module-ax.benchmark"]], "ax.benchmark.benchmark": [[2, "module-ax.benchmark.benchmark"]], "ax.benchmark.benchmark_method": [[2, "module-ax.benchmark.benchmark_method"]], "ax.benchmark.benchmark_problem": [[2, "module-ax.benchmark.benchmark_problem"]], "ax.benchmark.benchmark_result": [[2, "module-ax.benchmark.benchmark_result"]], "ax.benchmark.methods.modular_botorch": [[2, "module-ax.benchmark.methods.modular_botorch"]], "ax.benchmark.methods.sobol": [[2, "module-ax.benchmark.methods.sobol"]], "ax.benchmark.metrics.base": [[2, "module-ax.benchmark.metrics.base"]], "ax.benchmark.metrics.benchmark": [[2, "module-ax.benchmark.metrics.benchmark"]], "ax.benchmark.metrics.jenatton": [[2, "module-ax.benchmark.metrics.jenatton"]], "ax.benchmark.metrics.utils": [[2, "module-ax.benchmark.metrics.utils"]], "ax.benchmark.problems.hd_embedding": [[2, "module-ax.benchmark.problems.hd_embedding"]], "ax.benchmark.problems.hpo.pytorch_cnn": [[2, "module-ax.benchmark.problems.hpo.pytorch_cnn"]], "ax.benchmark.problems.hpo.torchvision": [[2, "module-ax.benchmark.problems.hpo.torchvision"]], "ax.benchmark.problems.registry": [[2, "module-ax.benchmark.problems.registry"]], "ax.benchmark.problems.surrogate": [[2, "module-ax.benchmark.problems.surrogate"]], "ax.benchmark.problems.synthetic.discretized.mixed_integer": [[2, "module-ax.benchmark.problems.synthetic.discretized.mixed_integer"]], "ax.benchmark.problems.synthetic.hss.jenatton": [[2, "module-ax.benchmark.problems.synthetic.hss.jenatton"]], "ax.benchmark.runners.base": [[2, "module-ax.benchmark.runners.base"]], "ax.benchmark.runners.botorch_test": [[2, "module-ax.benchmark.runners.botorch_test"]], "ax.benchmark.runners.surrogate": [[2, "module-ax.benchmark.runners.surrogate"]], "benchmark_multiple_problems_methods() (in module ax.benchmark.benchmark)": [[2, "ax.benchmark.benchmark.benchmark_multiple_problems_methods"]], "benchmark_one_method_problem() (in module ax.benchmark.benchmark)": [[2, "ax.benchmark.benchmark.benchmark_one_method_problem"]], "benchmark_replication() (in module ax.benchmark.benchmark)": [[2, "ax.benchmark.benchmark.benchmark_replication"]], "compute_score_trace() (in module ax.benchmark.benchmark)": [[2, "ax.benchmark.benchmark.compute_score_trace"]], "create_multi_objective_problem_from_botorch() (in module ax.benchmark.benchmark_problem)": [[2, "ax.benchmark.benchmark_problem.create_multi_objective_problem_from_botorch"]], "create_single_objective_problem_from_botorch() (in module ax.benchmark.benchmark_problem)": [[2, "ax.benchmark.benchmark_problem.create_single_objective_problem_from_botorch"]], "datasets (ax.benchmark.runners.surrogate.surrogaterunner property)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.datasets"]], "deserialize_init_args() (ax.benchmark.problems.hpo.torchvision.pytorchcnntorchvisionrunner class method)": [[2, "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionRunner.deserialize_init_args"]], "deserialize_init_args() (ax.benchmark.runners.botorch_test.botorchtestproblemrunner class method)": [[2, "ax.benchmark.runners.botorch_test.BotorchTestProblemRunner.deserialize_init_args"]], "deserialize_init_args() (ax.benchmark.runners.surrogate.surrogaterunner class method)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.deserialize_init_args"]], "distribute_replications (ax.benchmark.benchmark_method.benchmarkmethod attribute)": [[2, "ax.benchmark.benchmark_method.BenchmarkMethod.distribute_replications"]], "embed_higher_dimension() (in module ax.benchmark.problems.hd_embedding)": [[2, "ax.benchmark.problems.hd_embedding.embed_higher_dimension"]], "experiment (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.BenchmarkResult.experiment"]], "experiment_storage_id (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.BenchmarkResult.experiment_storage_id"]], "factory_fn (ax.benchmark.problems.registry.benchmarkproblemregistryentry attribute)": [[2, "ax.benchmark.problems.registry.BenchmarkProblemRegistryEntry.factory_fn"]], "factory_kwargs (ax.benchmark.problems.registry.benchmarkproblemregistryentry attribute)": [[2, "ax.benchmark.problems.registry.BenchmarkProblemRegistryEntry.factory_kwargs"]], "fetch_trial_data() (ax.benchmark.metrics.benchmark.benchmarkmetric method)": [[2, "ax.benchmark.metrics.benchmark.BenchmarkMetric.fetch_trial_data"]], "fetch_trial_data() (ax.benchmark.metrics.benchmark.groundtruthbenchmarkmetric method)": [[2, "ax.benchmark.metrics.benchmark.GroundTruthBenchmarkMetric.fetch_trial_data"]], "fetch_trial_data() (ax.benchmark.metrics.jenatton.jenattonmetric method)": [[2, "ax.benchmark.metrics.jenatton.JenattonMetric.fetch_trial_data"]], "fetch_trial_data() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnmetric method)": [[2, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNMetric.fetch_trial_data"]], "fit_time (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.fit_time"]], "fit_time (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.BenchmarkResult.fit_time"]], "forward() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnrunner.cnn method)": [[2, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.CNN.forward"]], "from_benchmark_results() (ax.benchmark.benchmark_result.aggregatedbenchmarkresult class method)": [[2, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.from_benchmark_results"]], "from_dataset_name() (ax.benchmark.problems.hpo.torchvision.pytorchcnntorchvisionbenchmarkproblem class method)": [[2, "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionBenchmarkProblem.from_dataset_name"]], "from_datasets() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnbenchmarkproblem class method)": [[2, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNBenchmarkProblem.from_datasets"]], "gen_time (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.gen_time"]], "gen_time (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.BenchmarkResult.gen_time"]], "generation_strategy (ax.benchmark.benchmark_method.benchmarkmethod attribute)": [[2, "ax.benchmark.benchmark_method.BenchmarkMethod.generation_strategy"]], "get_y_ystd() (ax.benchmark.runners.base.benchmarkrunner method)": [[2, "ax.benchmark.runners.base.BenchmarkRunner.get_Y_Ystd"]], "get_y_true() (ax.benchmark.runners.base.benchmarkrunner method)": [[2, "ax.benchmark.runners.base.BenchmarkRunner.get_Y_true"]], "get_y_true() (ax.benchmark.runners.botorch_test.botorchtestproblemrunner method)": [[2, "ax.benchmark.runners.botorch_test.BotorchTestProblemRunner.get_Y_true"]], "get_y_true() (ax.benchmark.runners.surrogate.surrogaterunner method)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.get_Y_true"]], "get_benchmark_scheduler_options() (in module ax.benchmark.benchmark_method)": [[2, "ax.benchmark.benchmark_method.get_benchmark_scheduler_options"]], "get_discrete_ackley() (in module ax.benchmark.problems.synthetic.discretized.mixed_integer)": [[2, "ax.benchmark.problems.synthetic.discretized.mixed_integer.get_discrete_ackley"]], "get_discrete_hartmann() (in module ax.benchmark.problems.synthetic.discretized.mixed_integer)": [[2, "ax.benchmark.problems.synthetic.discretized.mixed_integer.get_discrete_hartmann"]], "get_discrete_rosenbrock() (in module ax.benchmark.problems.synthetic.discretized.mixed_integer)": [[2, "ax.benchmark.problems.synthetic.discretized.mixed_integer.get_discrete_rosenbrock"]], "get_ground_truth_name() (ax.benchmark.metrics.base.groundtruthmetricmixin class method)": [[2, "ax.benchmark.metrics.base.GroundTruthMetricMixin.get_ground_truth_name"]], "get_jenatton_benchmark_problem() (in module ax.benchmark.problems.synthetic.hss.jenatton)": [[2, "ax.benchmark.problems.synthetic.hss.jenatton.get_jenatton_benchmark_problem"]], "get_noise_stds() (ax.benchmark.runners.base.benchmarkrunner method)": [[2, "ax.benchmark.runners.base.BenchmarkRunner.get_noise_stds"]], "get_noise_stds() (ax.benchmark.runners.botorch_test.botorchtestproblemrunner method)": [[2, "ax.benchmark.runners.botorch_test.BotorchTestProblemRunner.get_noise_stds"]], "get_noise_stds() (ax.benchmark.runners.surrogate.surrogaterunner method)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.get_noise_stds"]], "get_original_name() (ax.benchmark.metrics.base.groundtruthmetricmixin class method)": [[2, "ax.benchmark.metrics.base.GroundTruthMetricMixin.get_original_name"]], "get_problem() (in module ax.benchmark.problems.registry)": [[2, "ax.benchmark.problems.registry.get_problem"]], "get_sobol_benchmark_method() (in module ax.benchmark.methods.sobol)": [[2, "ax.benchmark.methods.sobol.get_sobol_benchmark_method"]], "get_sobol_botorch_modular_acquisition() (in module ax.benchmark.methods.modular_botorch)": [[2, "ax.benchmark.methods.modular_botorch.get_sobol_botorch_modular_acquisition"]], "has_ground_truth (ax.benchmark.benchmark_problem.benchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem.has_ground_truth"]], "has_ground_truth (ax.benchmark.metrics.base.benchmarkmetricbase attribute)": [[2, "ax.benchmark.metrics.base.BenchmarkMetricBase.has_ground_truth"], [2, "id0"]], "has_ground_truth (ax.benchmark.metrics.benchmark.benchmarkmetric attribute)": [[2, "ax.benchmark.metrics.benchmark.BenchmarkMetric.has_ground_truth"], [2, "id6"]], "has_ground_truth (ax.benchmark.metrics.jenatton.jenattonmetric attribute)": [[2, "ax.benchmark.metrics.jenatton.JenattonMetric.has_ground_truth"]], "is_ground_truth (ax.benchmark.metrics.base.groundtruthmetricmixin attribute)": [[2, "ax.benchmark.metrics.base.GroundTruthMetricMixin.is_ground_truth"]], "is_noiseless (ax.benchmark.benchmark_problem.benchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem.is_noiseless"]], "is_noiseless (ax.benchmark.runners.surrogate.surrogaterunner property)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.is_noiseless"]], "jenatton_test_function() (in module ax.benchmark.metrics.jenatton)": [[2, "ax.benchmark.metrics.jenatton.jenatton_test_function"]], "make_ground_truth_metric() (ax.benchmark.metrics.base.benchmarkmetricbase method)": [[2, "ax.benchmark.metrics.base.BenchmarkMetricBase.make_ground_truth_metric"]], "make_ground_truth_metric() (ax.benchmark.metrics.benchmark.benchmarkmetric method)": [[2, "ax.benchmark.metrics.benchmark.BenchmarkMetric.make_ground_truth_metric"]], "make_ground_truth_metric() (ax.benchmark.metrics.benchmark.groundtruthbenchmarkmetric method)": [[2, "ax.benchmark.metrics.benchmark.GroundTruthBenchmarkMetric.make_ground_truth_metric"]], "make_ground_truth_metric() (ax.benchmark.metrics.jenatton.jenattonmetric method)": [[2, "ax.benchmark.metrics.jenatton.JenattonMetric.make_ground_truth_metric"]], "make_ground_truth_metrics() (in module ax.benchmark.benchmark)": [[2, "ax.benchmark.benchmark.make_ground_truth_metrics"]], "make_ground_truth_optimization_config() (in module ax.benchmark.benchmark)": [[2, "ax.benchmark.benchmark.make_ground_truth_optimization_config"]], "name (ax.benchmark.benchmark_method.benchmarkmethod attribute)": [[2, "ax.benchmark.benchmark_method.BenchmarkMethod.name"]], "name (ax.benchmark.benchmark_problem.benchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem.name"]], "name (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.name"]], "name (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.BenchmarkResult.name"]], "num_trials (ax.benchmark.benchmark_problem.benchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem.num_trials"]], "observe_noise_stds (ax.benchmark.benchmark_problem.benchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem.observe_noise_stds"]], "optimal_value (ax.benchmark.benchmark_problem.benchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem.optimal_value"]], "optimization_config (ax.benchmark.benchmark_problem.benchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem.optimization_config"]], "optimization_config (ax.benchmark.benchmark_problem.multiobjectivebenchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.MultiObjectiveBenchmarkProblem.optimization_config"]], "optimization_config (ax.benchmark.problems.surrogate.moosurrogatebenchmarkproblem attribute)": [[2, "ax.benchmark.problems.surrogate.MOOSurrogateBenchmarkProblem.optimization_config"]], "optimization_trace (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.optimization_trace"]], "optimization_trace (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.BenchmarkResult.optimization_trace"]], "outcome_names (ax.benchmark.runners.base.benchmarkrunner property)": [[2, "ax.benchmark.runners.base.BenchmarkRunner.outcome_names"]], "outcome_names (ax.benchmark.runners.botorch_test.botorchtestproblemrunner property)": [[2, "ax.benchmark.runners.botorch_test.BotorchTestProblemRunner.outcome_names"]], "outcome_names (ax.benchmark.runners.surrogate.surrogaterunner property)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.outcome_names"]], "poll_trial_status() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnrunner method)": [[2, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.poll_trial_status"]], "poll_trial_status() (ax.benchmark.runners.botorch_test.botorchtestproblemrunner method)": [[2, "ax.benchmark.runners.botorch_test.BotorchTestProblemRunner.poll_trial_status"]], "poll_trial_status() (ax.benchmark.runners.surrogate.surrogaterunner method)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.poll_trial_status"]], "results (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.results"]], "run() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnrunner method)": [[2, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.run"]], "run() (ax.benchmark.runners.base.benchmarkrunner method)": [[2, "ax.benchmark.runners.base.BenchmarkRunner.run"]], "run() (ax.benchmark.runners.surrogate.surrogaterunner method)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.run"]], "runner (ax.benchmark.benchmark_problem.benchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem.runner"]], "runner (ax.benchmark.problems.surrogate.surrogatebenchmarkproblembase attribute)": [[2, "ax.benchmark.problems.surrogate.SurrogateBenchmarkProblemBase.runner"]], "scheduler_options (ax.benchmark.benchmark_method.benchmarkmethod attribute)": [[2, "ax.benchmark.benchmark_method.BenchmarkMethod.scheduler_options"]], "score_trace (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.score_trace"]], "score_trace (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.BenchmarkResult.score_trace"]], "search_space (ax.benchmark.benchmark_problem.benchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem.search_space"]], "seed (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[2, "ax.benchmark.benchmark_result.BenchmarkResult.seed"]], "serialize_init_args() (ax.benchmark.problems.hpo.torchvision.pytorchcnntorchvisionrunner class method)": [[2, "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionRunner.serialize_init_args"]], "serialize_init_args() (ax.benchmark.runners.botorch_test.botorchtestproblemrunner class method)": [[2, "ax.benchmark.runners.botorch_test.BotorchTestProblemRunner.serialize_init_args"]], "serialize_init_args() (ax.benchmark.runners.surrogate.surrogaterunner class method)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.serialize_init_args"]], "set_surrogate_and_datasets() (ax.benchmark.runners.surrogate.surrogaterunner method)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.set_surrogate_and_datasets"]], "surrogate (ax.benchmark.runners.surrogate.surrogaterunner property)": [[2, "ax.benchmark.runners.surrogate.SurrogateRunner.surrogate"]], "test_problem (ax.benchmark.runners.botorch_test.botorchtestproblemrunner attribute)": [[2, "ax.benchmark.runners.botorch_test.BotorchTestProblemRunner.test_problem"]], "tracking_metrics (ax.benchmark.benchmark_problem.benchmarkproblem attribute)": [[2, "ax.benchmark.benchmark_problem.BenchmarkProblem.tracking_metrics"]], "train_and_evaluate() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnrunner method)": [[2, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.train_and_evaluate"]], "abandoned (ax.core.base_trial.trialstatus attribute)": [[3, "ax.core.base_trial.TrialStatus.ABANDONED"]], "abandonedarm (class in ax.core.batch_trial)": [[3, "ax.core.batch_trial.AbandonedArm"]], "arm (class in ax.core.arm)": [[3, "ax.core.arm.Arm"]], "armweight (class in ax.core.generator_run)": [[3, "ax.core.generator_run.ArmWeight"]], "bakeoff (ax.core.batch_trial.lifecyclestage attribute)": [[3, "ax.core.batch_trial.LifecycleStage.BAKEOFF"]], "bool (ax.core.parameter.parametertype attribute)": [[3, "ax.core.parameter.ParameterType.BOOL"]], "basetrial (class in ax.core.base_trial)": [[3, "ax.core.base_trial.BaseTrial"]], "batchtrial (class in ax.core.batch_trial)": [[3, "ax.core.batch_trial.BatchTrial"]], "candidate (ax.core.base_trial.trialstatus attribute)": [[3, "ax.core.base_trial.TrialStatus.CANDIDATE"]], "completed (ax.core.base_trial.trialstatus attribute)": [[3, "ax.core.base_trial.TrialStatus.COMPLETED"]], "choiceparameter (class in ax.core.parameter)": [[3, "ax.core.parameter.ChoiceParameter"]], "comparisonop (class in ax.core.types)": [[3, "ax.core.types.ComparisonOp"]], "data (ax.core.formatting_utils.datatype attribute)": [[3, "ax.core.formatting_utils.DataType.DATA"]], "dispatched (ax.core.base_trial.trialstatus attribute)": [[3, "ax.core.base_trial.TrialStatus.DISPATCHED"]], "datatype (class in ax.core.formatting_utils)": [[3, "ax.core.formatting_utils.DataType"]], "early_stopped (ax.core.base_trial.trialstatus attribute)": [[3, "ax.core.base_trial.TrialStatus.EARLY_STOPPED"]], "exploration (ax.core.batch_trial.lifecyclestage attribute)": [[3, "ax.core.batch_trial.LifecycleStage.EXPLORATION"]], "exploration_concurrent (ax.core.batch_trial.lifecyclestage attribute)": [[3, "ax.core.batch_trial.LifecycleStage.EXPLORATION_CONCURRENT"]], "experiment (class in ax.core.experiment)": [[3, "ax.core.experiment.Experiment"]], "failed (ax.core.base_trial.trialstatus attribute)": [[3, "ax.core.base_trial.TrialStatus.FAILED"]], "float (ax.core.parameter.parametertype attribute)": [[3, "ax.core.parameter.ParameterType.FLOAT"]], "fixedparameter (class in ax.core.parameter)": [[3, "ax.core.parameter.FixedParameter"]], "geq (ax.core.types.comparisonop attribute)": [[3, "ax.core.types.ComparisonOp.GEQ"]], "generationstrategyinterface (class in ax.core.generation_strategy_interface)": [[3, "ax.core.generation_strategy_interface.GenerationStrategyInterface"]], "generatorrun (class in ax.core.generator_run)": [[3, "ax.core.generator_run.GeneratorRun"]], "generatorrunstruct (class in ax.core.batch_trial)": [[3, "ax.core.batch_trial.GeneratorRunStruct"]], "generatorruntype (class in ax.core.generator_run)": [[3, "ax.core.generator_run.GeneratorRunType"]], "int (ax.core.parameter.parametertype attribute)": [[3, "ax.core.parameter.ParameterType.INT"]], "iteration (ax.core.batch_trial.lifecyclestage attribute)": [[3, "ax.core.batch_trial.LifecycleStage.ITERATION"]], "leq (ax.core.types.comparisonop attribute)": [[3, "ax.core.types.ComparisonOp.LEQ"]], "lifecyclestage (class in ax.core.batch_trial)": [[3, "ax.core.batch_trial.LifecycleStage"]], "manual (ax.core.generator_run.generatorruntype attribute)": [[3, "ax.core.generator_run.GeneratorRunType.MANUAL"]], "map_data (ax.core.formatting_utils.datatype attribute)": [[3, "ax.core.formatting_utils.DataType.MAP_DATA"]], "missingmetrics (class in ax.core.utils)": [[3, "ax.core.utils.MissingMetrics"]], "multiobjectiveoptimizationconfig (class in ax.core.optimization_config)": [[3, "ax.core.optimization_config.MultiObjectiveOptimizationConfig"]], "multitypeexperiment (class in ax.core.multi_type_experiment)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment"]], "offline_optimized (ax.core.batch_trial.lifecyclestage attribute)": [[3, "ax.core.batch_trial.LifecycleStage.OFFLINE_OPTIMIZED"]], "observation (class in ax.core.observation)": [[3, "ax.core.observation.Observation"]], "observationdata (class in ax.core.observation)": [[3, "ax.core.observation.ObservationData"]], "observationfeatures (class in ax.core.observation)": [[3, "ax.core.observation.ObservationFeatures"]], "optimizationconfig (class in ax.core.optimization_config)": [[3, "ax.core.optimization_config.OptimizationConfig"]], "orderconstraint (class in ax.core.parameter_constraint)": [[3, "ax.core.parameter_constraint.OrderConstraint"]], "parameter (class in ax.core.parameter)": [[3, "ax.core.parameter.Parameter"]], "parameterconstraint (class in ax.core.parameter_constraint)": [[3, "ax.core.parameter_constraint.ParameterConstraint"]], "parameterdistribution (class in ax.core.parameter_distribution)": [[3, "ax.core.parameter_distribution.ParameterDistribution"]], "parametertype (class in ax.core.parameter)": [[3, "ax.core.parameter.ParameterType"]], "running (ax.core.base_trial.trialstatus attribute)": [[3, "ax.core.base_trial.TrialStatus.RUNNING"]], "rangeparameter (class in ax.core.parameter)": [[3, "ax.core.parameter.RangeParameter"]], "riskmeasure (class in ax.core.risk_measures)": [[3, "ax.core.risk_measures.RiskMeasure"]], "runner (class in ax.core.runner)": [[3, "ax.core.runner.Runner"]], "staged (ax.core.base_trial.trialstatus attribute)": [[3, "ax.core.base_trial.TrialStatus.STAGED"]], "status_quo (ax.core.generator_run.generatorruntype attribute)": [[3, "ax.core.generator_run.GeneratorRunType.STATUS_QUO"]], "string (ax.core.parameter.parametertype attribute)": [[3, "ax.core.parameter.ParameterType.STRING"]], "sumconstraint (class in ax.core.parameter_constraint)": [[3, "ax.core.parameter_constraint.SumConstraint"]], "trial (class in ax.core.trial)": [[3, "ax.core.trial.Trial"]], "trialstatus (class in ax.core.base_trial)": [[3, "ax.core.base_trial.TrialStatus"]], "abandoned_arm_names (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.abandoned_arm_names"]], "abandoned_arms (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.abandoned_arms"]], "abandoned_arms (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.abandoned_arms"]], "abandoned_arms (ax.core.trial.trial property)": [[3, "ax.core.trial.Trial.abandoned_arms"]], "abandoned_arms_metadata (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.abandoned_arms_metadata"]], "abandoned_reason (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.abandoned_reason"]], "add_arm() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.add_arm"]], "add_arm() (ax.core.generator_run.generatorrun method)": [[3, "ax.core.generator_run.GeneratorRun.add_arm"]], "add_arm() (ax.core.trial.trial method)": [[3, "ax.core.trial.Trial.add_arm"]], "add_arm_and_prevent_naming_collision() (in module ax.core.experiment)": [[3, "ax.core.experiment.add_arm_and_prevent_naming_collision"]], "add_arms_and_weights() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.add_arms_and_weights"]], "add_generator_run() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.add_generator_run"]], "add_generator_run() (ax.core.trial.trial method)": [[3, "ax.core.trial.Trial.add_generator_run"]], "add_tracking_metric() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.add_tracking_metric"]], "add_tracking_metric() (ax.core.multi_type_experiment.multitypeexperiment method)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.add_tracking_metric"]], "add_tracking_metrics() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.add_tracking_metrics"]], "add_trial_type() (ax.core.multi_type_experiment.multitypeexperiment method)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.add_trial_type"]], "add_values() (ax.core.parameter.choiceparameter method)": [[3, "ax.core.parameter.ChoiceParameter.add_values"]], "all_constraints (ax.core.optimization_config.multiobjectiveoptimizationconfig property)": [[3, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.all_constraints"]], "all_constraints (ax.core.optimization_config.optimizationconfig property)": [[3, "ax.core.optimization_config.OptimizationConfig.all_constraints"]], "arm (ax.core.generator_run.armweight attribute)": [[3, "ax.core.generator_run.ArmWeight.arm"]], "arm (ax.core.trial.trial property)": [[3, "ax.core.trial.Trial.arm"]], "arm_name (ax.core.observation.observation attribute)": [[3, "ax.core.observation.Observation.arm_name"]], "arm_signatures (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.arm_signatures"]], "arm_weights (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.arm_weights"]], "arm_weights (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.arm_weights"]], "arms (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.arms"]], "arms (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.arms"]], "arms (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.arms"]], "arms (ax.core.trial.trial property)": [[3, "ax.core.trial.Trial.arms"]], "arms_by_name (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.arms_by_name"]], "arms_by_name (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.arms_by_name"]], "arms_by_name (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.arms_by_name"]], "arms_by_name (ax.core.trial.trial property)": [[3, "ax.core.trial.Trial.arms_by_name"]], "arms_by_signature (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.arms_by_signature"]], "arms_by_signature_for_deduplication (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.arms_by_signature_for_deduplication"]], "assign_runner() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.assign_runner"]], "attach_batch_trial_data() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.attach_batch_trial_data"]], "attach_data() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.attach_data"]], "attach_fetch_results() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.attach_fetch_results"]], "attach_trial() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.attach_trial"]], "available_flags (ax.core.parameter.choiceparameter property)": [[3, "ax.core.parameter.ChoiceParameter.available_flags"]], "available_flags (ax.core.parameter.fixedparameter property)": [[3, "ax.core.parameter.FixedParameter.available_flags"]], "available_flags (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.available_flags"]], "available_flags (ax.core.parameter.rangeparameter property)": [[3, "ax.core.parameter.RangeParameter.available_flags"]], "ax.core": [[3, "module-ax.core"]], "ax.core.arm": [[3, "module-ax.core.arm"]], "ax.core.base_trial": [[3, "module-ax.core.base_trial"]], "ax.core.batch_trial": [[3, "module-ax.core.batch_trial"]], "ax.core.experiment": [[3, "module-ax.core.experiment"]], "ax.core.formatting_utils": [[3, "module-ax.core.formatting_utils"]], "ax.core.generation_strategy_interface": [[3, "module-ax.core.generation_strategy_interface"]], "ax.core.generator_run": [[3, "module-ax.core.generator_run"]], "ax.core.multi_type_experiment": [[3, "module-ax.core.multi_type_experiment"]], "ax.core.observation": [[3, "module-ax.core.observation"]], "ax.core.optimization_config": [[3, "module-ax.core.optimization_config"]], "ax.core.parameter": [[3, "module-ax.core.parameter"]], "ax.core.parameter_constraint": [[3, "module-ax.core.parameter_constraint"]], "ax.core.parameter_distribution": [[3, "module-ax.core.parameter_distribution"]], "ax.core.risk_measures": [[3, "module-ax.core.risk_measures"]], "ax.core.runner": [[3, "module-ax.core.runner"]], "ax.core.trial": [[3, "module-ax.core.trial"]], "ax.core.types": [[3, "module-ax.core.types"]], "ax.core.utils": [[3, "module-ax.core.utils"]], "best_arm_predictions (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.best_arm_predictions"]], "best_feasible_objective() (in module ax.core.utils)": [[3, "ax.core.utils.best_feasible_objective"]], "bound (ax.core.parameter_constraint.parameterconstraint property)": [[3, "ax.core.parameter_constraint.ParameterConstraint.bound"]], "candidate_metadata_by_arm_signature (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.candidate_metadata_by_arm_signature"]], "cardinality() (ax.core.parameter.choiceparameter method)": [[3, "ax.core.parameter.ChoiceParameter.cardinality"]], "cardinality() (ax.core.parameter.fixedparameter method)": [[3, "ax.core.parameter.FixedParameter.cardinality"]], "cardinality() (ax.core.parameter.parameter method)": [[3, "ax.core.parameter.Parameter.cardinality"]], "cardinality() (ax.core.parameter.rangeparameter method)": [[3, "ax.core.parameter.RangeParameter.cardinality"]], "cast() (ax.core.parameter.parameter method)": [[3, "ax.core.parameter.Parameter.cast"]], "cast() (ax.core.parameter.rangeparameter method)": [[3, "ax.core.parameter.RangeParameter.cast"]], "check() (ax.core.parameter_constraint.parameterconstraint method)": [[3, "ax.core.parameter_constraint.ParameterConstraint.check"]], "check_objective_thresholds_match_objectives() (in module ax.core.optimization_config)": [[3, "ax.core.optimization_config.check_objective_thresholds_match_objectives"]], "clone() (ax.core.arm.arm method)": [[3, "ax.core.arm.Arm.clone"]], "clone() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.clone"]], "clone() (ax.core.generator_run.generatorrun method)": [[3, "ax.core.generator_run.GeneratorRun.clone"]], "clone() (ax.core.observation.observationfeatures method)": [[3, "ax.core.observation.ObservationFeatures.clone"]], "clone() (ax.core.optimization_config.optimizationconfig method)": [[3, "ax.core.optimization_config.OptimizationConfig.clone"]], "clone() (ax.core.parameter.choiceparameter method)": [[3, "ax.core.parameter.ChoiceParameter.clone"]], "clone() (ax.core.parameter.fixedparameter method)": [[3, "ax.core.parameter.FixedParameter.clone"]], "clone() (ax.core.parameter.parameter method)": [[3, "ax.core.parameter.Parameter.clone"]], "clone() (ax.core.parameter.rangeparameter method)": [[3, "ax.core.parameter.RangeParameter.clone"]], "clone() (ax.core.parameter_constraint.orderconstraint method)": [[3, "ax.core.parameter_constraint.OrderConstraint.clone"]], "clone() (ax.core.parameter_constraint.parameterconstraint method)": [[3, "ax.core.parameter_constraint.ParameterConstraint.clone"]], "clone() (ax.core.parameter_constraint.sumconstraint method)": [[3, "ax.core.parameter_constraint.SumConstraint.clone"]], "clone() (ax.core.parameter_distribution.parameterdistribution method)": [[3, "ax.core.parameter_distribution.ParameterDistribution.clone"]], "clone() (ax.core.risk_measures.riskmeasure method)": [[3, "ax.core.risk_measures.RiskMeasure.clone"]], "clone() (ax.core.runner.runner method)": [[3, "ax.core.runner.Runner.clone"]], "clone_reset() (ax.core.generation_strategy_interface.generationstrategyinterface method)": [[3, "ax.core.generation_strategy_interface.GenerationStrategyInterface.clone_reset"]], "clone_to() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.clone_to"]], "clone_to() (ax.core.trial.trial method)": [[3, "ax.core.trial.Trial.clone_to"]], "clone_with() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.clone_with"]], "clone_with_args() (ax.core.optimization_config.multiobjectiveoptimizationconfig method)": [[3, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.clone_with_args"]], "clone_with_args() (ax.core.optimization_config.optimizationconfig method)": [[3, "ax.core.optimization_config.OptimizationConfig.clone_with_args"]], "clone_with_transformed_parameters() (ax.core.parameter_constraint.orderconstraint method)": [[3, "ax.core.parameter_constraint.OrderConstraint.clone_with_transformed_parameters"]], "clone_with_transformed_parameters() (ax.core.parameter_constraint.parameterconstraint method)": [[3, "ax.core.parameter_constraint.ParameterConstraint.clone_with_transformed_parameters"]], "clone_with_transformed_parameters() (ax.core.parameter_constraint.sumconstraint method)": [[3, "ax.core.parameter_constraint.SumConstraint.clone_with_transformed_parameters"]], "complete() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.complete"]], "completed_successfully (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.completed_successfully"]], "completed_trials (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.completed_trials"]], "constraint_dict (ax.core.parameter_constraint.orderconstraint property)": [[3, "ax.core.parameter_constraint.OrderConstraint.constraint_dict"]], "constraint_dict (ax.core.parameter_constraint.parameterconstraint property)": [[3, "ax.core.parameter_constraint.ParameterConstraint.constraint_dict"]], "constraint_dict (ax.core.parameter_constraint.sumconstraint property)": [[3, "ax.core.parameter_constraint.SumConstraint.constraint_dict"]], "covariance (ax.core.observation.observationdata attribute)": [[3, "ax.core.observation.ObservationData.covariance"]], "covariance_matrix (ax.core.observation.observationdata property)": [[3, "ax.core.observation.ObservationData.covariance_matrix"]], "data (ax.core.observation.observation attribute)": [[3, "ax.core.observation.Observation.data"]], "data_and_evaluations_from_raw_data() (in module ax.core.formatting_utils)": [[3, "ax.core.formatting_utils.data_and_evaluations_from_raw_data"]], "data_by_trial (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.data_by_trial"]], "default_data_constructor (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.default_data_constructor"]], "default_data_type (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.default_data_type"]], "default_trial_type (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.default_trial_type"]], "default_trial_type (ax.core.multi_type_experiment.multitypeexperiment property)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.default_trial_type"]], "default_trials (ax.core.multi_type_experiment.multitypeexperiment property)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.default_trials"]], "dependents (ax.core.parameter.choiceparameter property)": [[3, "ax.core.parameter.ChoiceParameter.dependents"]], "dependents (ax.core.parameter.fixedparameter property)": [[3, "ax.core.parameter.FixedParameter.dependents"]], "dependents (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.dependents"]], "deployed_name (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.deployed_name"]], "description (ax.core.multi_type_experiment.multitypeexperiment attribute)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.description"]], "did_not_complete (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.did_not_complete"]], "digits (ax.core.parameter.rangeparameter property)": [[3, "ax.core.parameter.RangeParameter.digits"]], "distribution (ax.core.parameter_distribution.parameterdistribution property)": [[3, "ax.core.parameter_distribution.ParameterDistribution.distribution"]], "distribution_class (ax.core.parameter_distribution.parameterdistribution property)": [[3, "ax.core.parameter_distribution.ParameterDistribution.distribution_class"]], "distribution_parameters (ax.core.parameter_distribution.parameterdistribution property)": [[3, "ax.core.parameter_distribution.ParameterDistribution.distribution_parameters"]], "domain_repr (ax.core.parameter.choiceparameter property)": [[3, "ax.core.parameter.ChoiceParameter.domain_repr"]], "domain_repr (ax.core.parameter.fixedparameter property)": [[3, "ax.core.parameter.FixedParameter.domain_repr"]], "domain_repr (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.domain_repr"]], "domain_repr (ax.core.parameter.rangeparameter property)": [[3, "ax.core.parameter.RangeParameter.domain_repr"]], "end_time (ax.core.observation.observationfeatures attribute)": [[3, "ax.core.observation.ObservationFeatures.end_time"]], "expecting_data (ax.core.base_trial.trialstatus property)": [[3, "ax.core.base_trial.TrialStatus.expecting_data"]], "experiment (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.experiment"]], "experiment (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.experiment"]], "experiment (ax.core.generation_strategy_interface.generationstrategyinterface property)": [[3, "ax.core.generation_strategy_interface.GenerationStrategyInterface.experiment"]], "experiment_type (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.experiment_type"]], "extend_pending_observations() (in module ax.core.utils)": [[3, "ax.core.utils.extend_pending_observations"]], "extract_arm_predictions() (in module ax.core.generator_run)": [[3, "ax.core.generator_run.extract_arm_predictions"]], "extract_pending_observations() (in module ax.core.utils)": [[3, "ax.core.utils.extract_pending_observations"]], "failed_reason (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.failed_reason"]], "features (ax.core.observation.observation attribute)": [[3, "ax.core.observation.Observation.features"]], "fetch_data() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.fetch_data"]], "fetch_data() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.fetch_data"]], "fetch_data() (ax.core.multi_type_experiment.multitypeexperiment method)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.fetch_data"]], "fetch_data_results() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.fetch_data_results"]], "fetch_data_results() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.fetch_data_results"]], "fetch_trials_data() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.fetch_trials_data"]], "fetch_trials_data_results() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.fetch_trials_data_results"]], "fit_time (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.fit_time"]], "from_arm() (ax.core.observation.observationfeatures static method)": [[3, "ax.core.observation.ObservationFeatures.from_arm"]], "gen_for_multiple_trials_with_multiple_models() (ax.core.generation_strategy_interface.generationstrategyinterface method)": [[3, "ax.core.generation_strategy_interface.GenerationStrategyInterface.gen_for_multiple_trials_with_multiple_models"]], "gen_metadata (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.gen_metadata"]], "gen_time (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.gen_time"]], "generator_run (ax.core.batch_trial.generatorrunstruct attribute)": [[3, "ax.core.batch_trial.GeneratorRunStruct.generator_run"]], "generator_run (ax.core.trial.trial property)": [[3, "ax.core.trial.Trial.generator_run"]], "generator_run_structs (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.generator_run_structs"]], "generator_run_type (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.generator_run_type"]], "generator_runs (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.generator_runs"]], "generator_runs (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.generator_runs"]], "generator_runs (ax.core.trial.trial property)": [[3, "ax.core.trial.Trial.generator_runs"]], "get_feature_cols() (in module ax.core.observation)": [[3, "ax.core.observation.get_feature_cols"]], "get_metric_mean() (ax.core.trial.trial method)": [[3, "ax.core.trial.Trial.get_metric_mean"]], "get_missing_metrics() (in module ax.core.utils)": [[3, "ax.core.utils.get_missing_metrics"]], "get_missing_metrics_by_name() (in module ax.core.utils)": [[3, "ax.core.utils.get_missing_metrics_by_name"]], "get_model_times() (in module ax.core.utils)": [[3, "ax.core.utils.get_model_times"]], "get_model_trace_of_times() (in module ax.core.utils)": [[3, "ax.core.utils.get_model_trace_of_times"]], "get_pending_observation_features() (in module ax.core.utils)": [[3, "ax.core.utils.get_pending_observation_features"]], "get_pending_observation_features_based_on_trial_status() (in module ax.core.utils)": [[3, "ax.core.utils.get_pending_observation_features_based_on_trial_status"]], "get_trials_by_indices() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.get_trials_by_indices"]], "has_name (ax.core.arm.arm property)": [[3, "ax.core.arm.Arm.has_name"]], "has_name (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.has_name"]], "immutable_once_run() (in module ax.core.base_trial)": [[3, "ax.core.base_trial.immutable_once_run"]], "immutable_search_space_and_opt_config (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.immutable_search_space_and_opt_config"]], "in_design_arms (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.in_design_arms"]], "index (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.index"]], "index (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.index"]], "index (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.index"]], "is_abandoned (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.is_abandoned"]], "is_abandoned (ax.core.base_trial.trialstatus property)": [[3, "ax.core.base_trial.TrialStatus.is_abandoned"]], "is_candidate (ax.core.base_trial.trialstatus property)": [[3, "ax.core.base_trial.TrialStatus.is_candidate"]], "is_completed (ax.core.base_trial.trialstatus property)": [[3, "ax.core.base_trial.TrialStatus.is_completed"]], "is_deployed (ax.core.base_trial.trialstatus property)": [[3, "ax.core.base_trial.TrialStatus.is_deployed"]], "is_early_stopped (ax.core.base_trial.trialstatus property)": [[3, "ax.core.base_trial.TrialStatus.is_early_stopped"]], "is_environmental() (ax.core.parameter_distribution.parameterdistribution method)": [[3, "ax.core.parameter_distribution.ParameterDistribution.is_environmental"]], "is_factorial (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.is_factorial"]], "is_failed (ax.core.base_trial.trialstatus property)": [[3, "ax.core.base_trial.TrialStatus.is_failed"]], "is_fidelity (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.is_fidelity"]], "is_hierarchical (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.is_hierarchical"]], "is_moo_problem (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.is_moo_problem"]], "is_moo_problem (ax.core.optimization_config.optimizationconfig property)": [[3, "ax.core.optimization_config.OptimizationConfig.is_moo_problem"]], "is_numeric (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.is_numeric"]], "is_numeric (ax.core.parameter.parametertype property)": [[3, "ax.core.parameter.ParameterType.is_numeric"]], "is_ordered (ax.core.parameter.choiceparameter property)": [[3, "ax.core.parameter.ChoiceParameter.is_ordered"]], "is_running (ax.core.base_trial.trialstatus property)": [[3, "ax.core.base_trial.TrialStatus.is_running"]], "is_task (ax.core.parameter.choiceparameter property)": [[3, "ax.core.parameter.ChoiceParameter.is_task"]], "is_terminal (ax.core.base_trial.trialstatus property)": [[3, "ax.core.base_trial.TrialStatus.is_terminal"]], "is_test (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.is_test"]], "is_upper_bound (ax.core.parameter_constraint.sumconstraint property)": [[3, "ax.core.parameter_constraint.SumConstraint.is_upper_bound"]], "is_valid_type() (ax.core.parameter.parameter method)": [[3, "ax.core.parameter.Parameter.is_valid_type"]], "is_valid_type() (ax.core.parameter.rangeparameter method)": [[3, "ax.core.parameter.RangeParameter.is_valid_type"]], "lifecycle_stage (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.lifecycle_stage"]], "log_scale (ax.core.parameter.rangeparameter property)": [[3, "ax.core.parameter.RangeParameter.log_scale"]], "logit_scale (ax.core.parameter.rangeparameter property)": [[3, "ax.core.parameter.RangeParameter.logit_scale"]], "lookup_data() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.lookup_data"]], "lookup_data() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.lookup_data"]], "lookup_data_for_trial() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.lookup_data_for_trial"]], "lookup_data_for_ts() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.lookup_data_for_ts"]], "lower (ax.core.parameter.rangeparameter property)": [[3, "ax.core.parameter.RangeParameter.lower"]], "lower_parameter (ax.core.parameter_constraint.orderconstraint property)": [[3, "ax.core.parameter_constraint.OrderConstraint.lower_parameter"]], "mark_abandoned() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.mark_abandoned"]], "mark_arm_abandoned() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.mark_arm_abandoned"]], "mark_arm_abandoned() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.mark_arm_abandoned"]], "mark_as() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.mark_as"]], "mark_completed() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.mark_completed"]], "mark_early_stopped() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.mark_early_stopped"]], "mark_failed() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.mark_failed"]], "mark_running() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.mark_running"]], "mark_staged() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.mark_staged"]], "md5hash() (ax.core.arm.arm static method)": [[3, "ax.core.arm.Arm.md5hash"]], "means (ax.core.observation.observationdata attribute)": [[3, "ax.core.observation.ObservationData.means"]], "means_dict (ax.core.observation.observationdata property)": [[3, "ax.core.observation.ObservationData.means_dict"]], "merge_model_predict() (in module ax.core.types)": [[3, "ax.core.types.merge_model_predict"]], "metric_config_summary_df (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.metric_config_summary_df"]], "metric_names (ax.core.observation.observationdata attribute)": [[3, "ax.core.observation.ObservationData.metric_names"]], "metric_to_trial_type (ax.core.multi_type_experiment.multitypeexperiment property)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.metric_to_trial_type"]], "metrics (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.metrics"]], "metrics (ax.core.optimization_config.multiobjectiveoptimizationconfig property)": [[3, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.metrics"]], "metrics (ax.core.optimization_config.optimizationconfig property)": [[3, "ax.core.optimization_config.OptimizationConfig.metrics"]], "model_predictions (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.model_predictions"]], "model_predictions_by_arm (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.model_predictions_by_arm"]], "name (ax.core.arm.arm property)": [[3, "ax.core.arm.Arm.name"]], "name (ax.core.batch_trial.abandonedarm attribute)": [[3, "ax.core.batch_trial.AbandonedArm.name"]], "name (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.name"]], "name (ax.core.generation_strategy_interface.generationstrategyinterface property)": [[3, "ax.core.generation_strategy_interface.GenerationStrategyInterface.name"]], "name (ax.core.multi_type_experiment.multitypeexperiment attribute)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.name"]], "name (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.name"]], "name_or_short_signature (ax.core.arm.arm property)": [[3, "ax.core.arm.Arm.name_or_short_signature"]], "new_batch_trial() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.new_batch_trial"]], "new_trial() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.new_trial"]], "normalized_arm_weights() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.normalized_arm_weights"]], "num_abandoned_arms (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.num_abandoned_arms"]], "num_trials (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.num_trials"]], "objective (ax.core.optimization_config.multiobjectiveoptimizationconfig property)": [[3, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.objective"]], "objective (ax.core.optimization_config.optimizationconfig property)": [[3, "ax.core.optimization_config.OptimizationConfig.objective"]], "objective (ax.core.utils.missingmetrics attribute)": [[3, "ax.core.utils.MissingMetrics.objective"]], "objective_mean (ax.core.trial.trial property)": [[3, "ax.core.trial.Trial.objective_mean"]], "objective_thresholds (ax.core.optimization_config.multiobjectiveoptimizationconfig property)": [[3, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.objective_thresholds"]], "objective_thresholds_dict (ax.core.optimization_config.multiobjectiveoptimizationconfig property)": [[3, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.objective_thresholds_dict"]], "observations_from_data() (in module ax.core.observation)": [[3, "ax.core.observation.observations_from_data"]], "observations_from_map_data() (in module ax.core.observation)": [[3, "ax.core.observation.observations_from_map_data"]], "op (ax.core.parameter_constraint.sumconstraint property)": [[3, "ax.core.parameter_constraint.SumConstraint.op"]], "optimization_config (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.optimization_config"]], "optimization_config (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.optimization_config"]], "outcome_constraints (ax.core.optimization_config.optimizationconfig property)": [[3, "ax.core.optimization_config.OptimizationConfig.outcome_constraints"]], "outcome_constraints (ax.core.utils.missingmetrics attribute)": [[3, "ax.core.utils.MissingMetrics.outcome_constraints"]], "param_df (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.param_df"]], "parameter_type (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.parameter_type"]], "parameters (ax.core.arm.arm property)": [[3, "ax.core.arm.Arm.parameters"]], "parameters (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.parameters"]], "parameters (ax.core.observation.observationfeatures attribute)": [[3, "ax.core.observation.ObservationFeatures.parameters"]], "parameters (ax.core.parameter_constraint.orderconstraint property)": [[3, "ax.core.parameter_constraint.OrderConstraint.parameters"]], "parameters (ax.core.parameter_constraint.sumconstraint property)": [[3, "ax.core.parameter_constraint.SumConstraint.parameters"]], "poll_available_capacity() (ax.core.runner.runner method)": [[3, "ax.core.runner.Runner.poll_available_capacity"]], "poll_exception() (ax.core.runner.runner method)": [[3, "ax.core.runner.Runner.poll_exception"]], "poll_trial_status() (ax.core.runner.runner method)": [[3, "ax.core.runner.Runner.poll_trial_status"]], "python_type (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.python_type"]], "random_split (ax.core.observation.observationfeatures attribute)": [[3, "ax.core.observation.ObservationFeatures.random_split"]], "raw_data_to_evaluation() (in module ax.core.formatting_utils)": [[3, "ax.core.formatting_utils.raw_data_to_evaluation"]], "reason (ax.core.batch_trial.abandonedarm attribute)": [[3, "ax.core.batch_trial.AbandonedArm.reason"]], "recombine_observations() (in module ax.core.observation)": [[3, "ax.core.observation.recombine_observations"]], "remove_tracking_metric() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.remove_tracking_metric"]], "remove_tracking_metric() (ax.core.multi_type_experiment.multitypeexperiment method)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.remove_tracking_metric"]], "reset_runners() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.reset_runners"]], "reset_runners() (ax.core.multi_type_experiment.multitypeexperiment method)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.reset_runners"]], "run() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.run"]], "run() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.run"]], "run() (ax.core.runner.runner method)": [[3, "ax.core.runner.Runner.run"]], "run_metadata (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.run_metadata"]], "run_metadata_report_keys (ax.core.runner.runner property)": [[3, "ax.core.runner.Runner.run_metadata_report_keys"]], "run_multiple() (ax.core.runner.runner method)": [[3, "ax.core.runner.Runner.run_multiple"]], "runner (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.runner"]], "runner_for_trial() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.runner_for_trial"]], "runner_for_trial() (ax.core.multi_type_experiment.multitypeexperiment method)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.runner_for_trial"]], "running_trial_indices (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.running_trial_indices"]], "search_space (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.search_space"]], "search_space (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.search_space"]], "separate_observations() (in module ax.core.observation)": [[3, "ax.core.observation.separate_observations"]], "set_digits() (ax.core.parameter.rangeparameter method)": [[3, "ax.core.parameter.RangeParameter.set_digits"]], "set_log_scale() (ax.core.parameter.rangeparameter method)": [[3, "ax.core.parameter.RangeParameter.set_log_scale"]], "set_logit_scale() (ax.core.parameter.rangeparameter method)": [[3, "ax.core.parameter.RangeParameter.set_logit_scale"]], "set_status_quo_and_optimize_power() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.set_status_quo_and_optimize_power"]], "set_status_quo_with_weight() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.set_status_quo_with_weight"]], "set_value() (ax.core.parameter.fixedparameter method)": [[3, "ax.core.parameter.FixedParameter.set_value"]], "set_values() (ax.core.parameter.choiceparameter method)": [[3, "ax.core.parameter.ChoiceParameter.set_values"]], "signature (ax.core.arm.arm property)": [[3, "ax.core.arm.Arm.signature"]], "sort_values (ax.core.parameter.choiceparameter property)": [[3, "ax.core.parameter.ChoiceParameter.sort_values"]], "staging_required (ax.core.runner.runner property)": [[3, "ax.core.runner.Runner.staging_required"]], "start_time (ax.core.observation.observationfeatures attribute)": [[3, "ax.core.observation.ObservationFeatures.start_time"]], "status (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.status"]], "status_quo (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.status_quo"]], "status_quo (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.status_quo"]], "stop() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.stop"]], "stop() (ax.core.runner.runner method)": [[3, "ax.core.runner.Runner.stop"]], "stop_metadata (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.stop_metadata"]], "sum_trial_sizes (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.sum_trial_sizes"]], "summary_dict (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.summary_dict"]], "supports_trial_type() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.supports_trial_type"]], "supports_trial_type() (ax.core.multi_type_experiment.multitypeexperiment method)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.supports_trial_type"]], "target_value (ax.core.parameter.parameter property)": [[3, "ax.core.parameter.Parameter.target_value"]], "time (ax.core.batch_trial.abandonedarm attribute)": [[3, "ax.core.batch_trial.AbandonedArm.time"]], "time_completed (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.time_completed"]], "time_created (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.time_created"]], "time_created (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.time_created"]], "time_created (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.time_created"]], "time_run_started (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.time_run_started"]], "time_staged (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.time_staged"]], "tracking_metrics (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.tracking_metrics"]], "tracking_metrics (ax.core.utils.missingmetrics attribute)": [[3, "ax.core.utils.MissingMetrics.tracking_metrics"]], "trial_index (ax.core.observation.observationfeatures attribute)": [[3, "ax.core.observation.ObservationFeatures.trial_index"]], "trial_indices_by_status (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.trial_indices_by_status"]], "trial_type (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.trial_type"]], "trials (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.trials"]], "trials_by_status (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.trials_by_status"]], "trials_expecting_data (ax.core.experiment.experiment property)": [[3, "ax.core.experiment.Experiment.trials_expecting_data"]], "ttl_seconds (ax.core.base_trial.basetrial property)": [[3, "ax.core.base_trial.BaseTrial.ttl_seconds"]], "unset_status_quo() (ax.core.batch_trial.batchtrial method)": [[3, "ax.core.batch_trial.BatchTrial.unset_status_quo"]], "update_features() (ax.core.observation.observationfeatures method)": [[3, "ax.core.observation.ObservationFeatures.update_features"]], "update_range() (ax.core.parameter.rangeparameter method)": [[3, "ax.core.parameter.RangeParameter.update_range"]], "update_run_metadata() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.update_run_metadata"]], "update_runner() (ax.core.multi_type_experiment.multitypeexperiment method)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.update_runner"]], "update_stop_metadata() (ax.core.base_trial.basetrial method)": [[3, "ax.core.base_trial.BaseTrial.update_stop_metadata"]], "update_tracking_metric() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.update_tracking_metric"]], "update_tracking_metric() (ax.core.multi_type_experiment.multitypeexperiment method)": [[3, "ax.core.multi_type_experiment.MultiTypeExperiment.update_tracking_metric"]], "update_trial_data() (ax.core.trial.trial method)": [[3, "ax.core.trial.Trial.update_trial_data"]], "upper (ax.core.parameter.rangeparameter property)": [[3, "ax.core.parameter.RangeParameter.upper"]], "upper_parameter (ax.core.parameter_constraint.orderconstraint property)": [[3, "ax.core.parameter_constraint.OrderConstraint.upper_parameter"]], "validate() (ax.core.parameter.choiceparameter method)": [[3, "ax.core.parameter.ChoiceParameter.validate"]], "validate() (ax.core.parameter.fixedparameter method)": [[3, "ax.core.parameter.FixedParameter.validate"]], "validate() (ax.core.parameter.parameter method)": [[3, "ax.core.parameter.Parameter.validate"]], "validate() (ax.core.parameter.rangeparameter method)": [[3, "ax.core.parameter.RangeParameter.validate"]], "validate_constraint_parameters() (in module ax.core.parameter_constraint)": [[3, "ax.core.parameter_constraint.validate_constraint_parameters"]], "validate_data_for_trial() (ax.core.trial.trial method)": [[3, "ax.core.trial.Trial.validate_data_for_trial"]], "validate_evaluation_outcome() (in module ax.core.types)": [[3, "ax.core.types.validate_evaluation_outcome"]], "validate_fidelity_trial_evaluation() (in module ax.core.types)": [[3, "ax.core.types.validate_fidelity_trial_evaluation"]], "validate_floatlike() (in module ax.core.types)": [[3, "ax.core.types.validate_floatlike"]], "validate_map_dict() (in module ax.core.types)": [[3, "ax.core.types.validate_map_dict"]], "validate_map_trial_evaluation() (in module ax.core.types)": [[3, "ax.core.types.validate_map_trial_evaluation"]], "validate_param_value() (in module ax.core.types)": [[3, "ax.core.types.validate_param_value"]], "validate_parameterization() (in module ax.core.types)": [[3, "ax.core.types.validate_parameterization"]], "validate_single_metric_data() (in module ax.core.types)": [[3, "ax.core.types.validate_single_metric_data"]], "validate_trial_evaluation() (in module ax.core.types)": [[3, "ax.core.types.validate_trial_evaluation"]], "validate_trials() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.validate_trials"]], "value (ax.core.parameter.fixedparameter property)": [[3, "ax.core.parameter.FixedParameter.value"]], "values (ax.core.parameter.choiceparameter property)": [[3, "ax.core.parameter.ChoiceParameter.values"]], "warm_start_from_old_experiment() (ax.core.experiment.experiment method)": [[3, "ax.core.experiment.Experiment.warm_start_from_old_experiment"]], "weight (ax.core.batch_trial.generatorrunstruct attribute)": [[3, "ax.core.batch_trial.GeneratorRunStruct.weight"]], "weight (ax.core.generator_run.armweight attribute)": [[3, "ax.core.generator_run.ArmWeight.weight"]], "weights (ax.core.batch_trial.batchtrial property)": [[3, "ax.core.batch_trial.BatchTrial.weights"]], "weights (ax.core.generator_run.generatorrun property)": [[3, "ax.core.generator_run.GeneratorRun.weights"]], "andearlystoppingstrategy (class in ax.early_stopping.strategies.logical)": [[4, "ax.early_stopping.strategies.logical.AndEarlyStoppingStrategy"]], "baseearlystoppingstrategy (class in ax.early_stopping.strategies.base)": [[4, "ax.early_stopping.strategies.base.BaseEarlyStoppingStrategy"]], "earlystoppingtrainingdata (class in ax.early_stopping.strategies.base)": [[4, "ax.early_stopping.strategies.base.EarlyStoppingTrainingData"]], "logicalearlystoppingstrategy (class in ax.early_stopping.strategies.logical)": [[4, "ax.early_stopping.strategies.logical.LogicalEarlyStoppingStrategy"]], "modelbasedearlystoppingstrategy (class in ax.early_stopping.strategies.base)": [[4, "ax.early_stopping.strategies.base.ModelBasedEarlyStoppingStrategy"]], "orearlystoppingstrategy (class in ax.early_stopping.strategies.logical)": [[4, "ax.early_stopping.strategies.logical.OrEarlyStoppingStrategy"]], "percentileearlystoppingstrategy (class in ax.early_stopping.strategies.percentile)": [[4, "ax.early_stopping.strategies.percentile.PercentileEarlyStoppingStrategy"]], "thresholdearlystoppingstrategy (class in ax.early_stopping.strategies.threshold)": [[4, "ax.early_stopping.strategies.threshold.ThresholdEarlyStoppingStrategy"]], "x (ax.early_stopping.strategies.base.earlystoppingtrainingdata attribute)": [[4, "ax.early_stopping.strategies.base.EarlyStoppingTrainingData.X"]], "y (ax.early_stopping.strategies.base.earlystoppingtrainingdata attribute)": [[4, "ax.early_stopping.strategies.base.EarlyStoppingTrainingData.Y"]], "yvar (ax.early_stopping.strategies.base.earlystoppingtrainingdata attribute)": [[4, "ax.early_stopping.strategies.base.EarlyStoppingTrainingData.Yvar"]], "align_partial_results() (in module ax.early_stopping.utils)": [[4, "ax.early_stopping.utils.align_partial_results"]], "arm_names (ax.early_stopping.strategies.base.earlystoppingtrainingdata attribute)": [[4, "ax.early_stopping.strategies.base.EarlyStoppingTrainingData.arm_names"]], "ax.early_stopping": [[4, "module-ax.early_stopping"]], "ax.early_stopping.strategies.base": [[4, "module-ax.early_stopping.strategies.base"]], "ax.early_stopping.strategies.logical": [[4, "module-ax.early_stopping.strategies.logical"]], "ax.early_stopping.strategies.percentile": [[4, "module-ax.early_stopping.strategies.percentile"]], "ax.early_stopping.strategies.threshold": [[4, "module-ax.early_stopping.strategies.threshold"]], "ax.early_stopping.utils": [[4, "module-ax.early_stopping.utils"]], "estimate_early_stopping_savings() (in module ax.early_stopping.utils)": [[4, "ax.early_stopping.utils.estimate_early_stopping_savings"]], "from_early_stopping_strategies() (ax.early_stopping.strategies.logical.orearlystoppingstrategy class method)": [[4, "ax.early_stopping.strategies.logical.OrEarlyStoppingStrategy.from_early_stopping_strategies"]], "get_training_data() (ax.early_stopping.strategies.base.modelbasedearlystoppingstrategy method)": [[4, "ax.early_stopping.strategies.base.ModelBasedEarlyStoppingStrategy.get_training_data"]], "get_transform_helper_model() (in module ax.early_stopping.strategies.base)": [[4, "ax.early_stopping.strategies.base.get_transform_helper_model"]], "is_eligible() (ax.early_stopping.strategies.base.baseearlystoppingstrategy method)": [[4, "ax.early_stopping.strategies.base.BaseEarlyStoppingStrategy.is_eligible"]], "is_eligible_any() (ax.early_stopping.strategies.base.baseearlystoppingstrategy method)": [[4, "ax.early_stopping.strategies.base.BaseEarlyStoppingStrategy.is_eligible_any"]], "should_stop_trials_early() (ax.early_stopping.strategies.base.baseearlystoppingstrategy method)": [[4, "ax.early_stopping.strategies.base.BaseEarlyStoppingStrategy.should_stop_trials_early"]], "should_stop_trials_early() (ax.early_stopping.strategies.logical.andearlystoppingstrategy method)": [[4, "ax.early_stopping.strategies.logical.AndEarlyStoppingStrategy.should_stop_trials_early"]], "should_stop_trials_early() (ax.early_stopping.strategies.logical.orearlystoppingstrategy method)": [[4, "ax.early_stopping.strategies.logical.OrEarlyStoppingStrategy.should_stop_trials_early"]], "should_stop_trials_early() (ax.early_stopping.strategies.percentile.percentileearlystoppingstrategy method)": [[4, "ax.early_stopping.strategies.percentile.PercentileEarlyStoppingStrategy.should_stop_trials_early"]], "should_stop_trials_early() (ax.early_stopping.strategies.threshold.thresholdearlystoppingstrategy method)": [[4, "ax.early_stopping.strategies.threshold.ThresholdEarlyStoppingStrategy.should_stop_trials_early"]], "axerror": [[5, "ax.exceptions.core.AxError"]], "axgenerationexception": [[5, "ax.exceptions.generation_strategy.AxGenerationException"]], "axparameterwarning": [[5, "ax.exceptions.core.AxParameterWarning"]], "axstoragewarning": [[5, "ax.exceptions.core.AxStorageWarning"]], "axwarning": [[5, "ax.exceptions.core.AxWarning"]], "cvnotsupportederror": [[5, "ax.exceptions.model.CVNotSupportedError"]], "dataprovidererror": [[5, "ax.exceptions.data_provider.DataProviderError"]], "datarequirederror": [[5, "ax.exceptions.core.DataRequiredError"]], "experimentnotfounderror": [[5, "ax.exceptions.core.ExperimentNotFoundError"]], "experimentnotreadyerror": [[5, "ax.exceptions.core.ExperimentNotReadyError"]], "generationstrategycompleted": [[5, "ax.exceptions.generation_strategy.GenerationStrategyCompleted"]], "generationstrategymisconfiguredexception": [[5, "ax.exceptions.generation_strategy.GenerationStrategyMisconfiguredException"]], "generationstrategyrepeatedpoints": [[5, "ax.exceptions.generation_strategy.GenerationStrategyRepeatedPoints"]], "immutabilityerror": [[5, "ax.exceptions.storage.ImmutabilityError"]], "incompatibledependencyversion": [[5, "ax.exceptions.core.IncompatibleDependencyVersion"]], "incorrectdbconfigurationerror": [[5, "ax.exceptions.storage.IncorrectDBConfigurationError"]], "jsondecodeerror": [[5, "ax.exceptions.storage.JSONDecodeError"]], "jsonencodeerror": [[5, "ax.exceptions.storage.JSONEncodeError"]], "maxparallelismreachedexception": [[5, "ax.exceptions.generation_strategy.MaxParallelismReachedException"]], "metricdatanotreadyerror": [[5, "ax.exceptions.core.MetricDataNotReadyError"]], "misconfiguredexperiment": [[5, "ax.exceptions.core.MisconfiguredExperiment"]], "missingdataerror": [[5, "ax.exceptions.data_provider.MissingDataError"]], "modelerror": [[5, "ax.exceptions.model.ModelError"]], "nodataerror": [[5, "ax.exceptions.core.NoDataError"]], "objectnotfounderror": [[5, "ax.exceptions.core.ObjectNotFoundError"]], "optimizationcomplete": [[5, "ax.exceptions.core.OptimizationComplete"]], "optimizationconfigrequired": [[5, "ax.exceptions.generation_strategy.OptimizationConfigRequired"]], "optimizationshouldstop": [[5, "ax.exceptions.core.OptimizationShouldStop"]], "sqadecodeerror": [[5, "ax.exceptions.storage.SQADecodeError"]], "sqaencodeerror": [[5, "ax.exceptions.storage.SQAEncodeError"]], "searchspaceexhausted": [[5, "ax.exceptions.core.SearchSpaceExhausted"]], "unsupportederror": [[5, "ax.exceptions.core.UnsupportedError"]], "unsupportedploterror": [[5, "ax.exceptions.core.UnsupportedPlotError"]], "userinputerror": [[5, "ax.exceptions.core.UserInputError"]], "ax.exceptions": [[5, "module-ax.exceptions"]], "ax.exceptions.constants": [[5, "module-ax.exceptions.constants"]], "ax.exceptions.core": [[5, "module-ax.exceptions.core"]], "ax.exceptions.data_provider": [[5, "module-ax.exceptions.data_provider"]], "ax.exceptions.generation_strategy": [[5, "module-ax.exceptions.generation_strategy"]], "ax.exceptions.model": [[5, "module-ax.exceptions.model"]], "ax.exceptions.storage": [[5, "module-ax.exceptions.storage"]], "baseglobalstoppingstrategy (class in ax.global_stopping.strategies.base)": [[6, "ax.global_stopping.strategies.base.BaseGlobalStoppingStrategy"]], "improvementglobalstoppingstrategy (class in ax.global_stopping.strategies.improvement)": [[6, "ax.global_stopping.strategies.improvement.ImprovementGlobalStoppingStrategy"]], "ax.global_stopping": [[6, "module-ax.global_stopping"]], "ax.global_stopping.strategies.base": [[6, "module-ax.global_stopping.strategies.base"]], "ax.global_stopping.strategies.improvement": [[6, "module-ax.global_stopping.strategies.improvement"]], "constraint_satisfaction() (in module ax.global_stopping.strategies.improvement)": [[6, "ax.global_stopping.strategies.improvement.constraint_satisfaction"]], "should_stop_optimization() (ax.global_stopping.strategies.base.baseglobalstoppingstrategy method)": [[6, "ax.global_stopping.strategies.base.BaseGlobalStoppingStrategy.should_stop_optimization"]], "abstractcurvemetric (class in ax.metrics.curve)": [[8, "ax.metrics.curve.AbstractCurveMetric"]], "augmentedbraninmetric (class in ax.metrics.branin)": [[8, "ax.metrics.branin.AugmentedBraninMetric"]], "augmentedhartmann6metric (class in ax.metrics.hartmann6)": [[8, "ax.metrics.hartmann6.AugmentedHartmann6Metric"]], "boston (ax.metrics.sklearn.sklearndataset attribute)": [[8, "ax.metrics.sklearn.SklearnDataset.BOSTON"]], "botorchtestproblemmetric (class in ax.metrics.botorch_test_problem)": [[8, "ax.metrics.botorch_test_problem.BotorchTestProblemMetric"]], "braninfidelitymapmetric (class in ax.metrics.branin_map)": [[8, "ax.metrics.branin_map.BraninFidelityMapMetric"]], "braninmetric (class in ax.metrics.branin)": [[8, "ax.metrics.branin.BraninMetric"]], "branintimestampmapmetric (class in ax.metrics.branin_map)": [[8, "ax.metrics.branin_map.BraninTimestampMapMetric"]], "cancer (ax.metrics.sklearn.sklearndataset attribute)": [[8, "ax.metrics.sklearn.SklearnDataset.CANCER"]], "chemistrydata (class in ax.metrics.chemistry)": [[8, "ax.metrics.chemistry.ChemistryData"]], "chemistrymetric (class in ax.metrics.chemistry)": [[8, "ax.metrics.chemistry.ChemistryMetric"]], "chemistryproblemtype (class in ax.metrics.chemistry)": [[8, "ax.metrics.chemistry.ChemistryProblemType"]], "digits (ax.metrics.sklearn.sklearndataset attribute)": [[8, "ax.metrics.sklearn.SklearnDataset.DIGITS"]], "direct_arylation (ax.metrics.chemistry.chemistryproblemtype attribute)": [[8, "ax.metrics.chemistry.ChemistryProblemType.DIRECT_ARYLATION"]], "dictlookupmetric (class in ax.metrics.dict_lookup)": [[8, "ax.metrics.dict_lookup.DictLookupMetric"]], "factorialmetric (class in ax.metrics.factorial)": [[8, "ax.metrics.factorial.FactorialMetric"]], "genericnoisyfunctionmetric (class in ax.metrics.noisy_function)": [[8, "ax.metrics.noisy_function.GenericNoisyFunctionMetric"]], "hartmann6metric (class in ax.metrics.hartmann6)": [[8, "ax.metrics.hartmann6.Hartmann6Metric"]], "l2normmetric (class in ax.metrics.l2norm)": [[8, "ax.metrics.l2norm.L2NormMetric"]], "nn (ax.metrics.sklearn.sklearnmodeltype attribute)": [[8, "ax.metrics.sklearn.SklearnModelType.NN"]], "negativebraninmetric (class in ax.metrics.branin)": [[8, "ax.metrics.branin.NegativeBraninMetric"]], "noisyfunctionmapmetric (class in ax.metrics.noisy_function_map)": [[8, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric"]], "noisyfunctionmetric (class in ax.metrics.noisy_function)": [[8, "ax.metrics.noisy_function.NoisyFunctionMetric"]], "rf (ax.metrics.sklearn.sklearnmodeltype attribute)": [[8, "ax.metrics.sklearn.SklearnModelType.RF"]], "suzuki (ax.metrics.chemistry.chemistryproblemtype attribute)": [[8, "ax.metrics.chemistry.ChemistryProblemType.SUZUKI"]], "sklearndataset (class in ax.metrics.sklearn)": [[8, "ax.metrics.sklearn.SklearnDataset"]], "sklearnmetric (class in ax.metrics.sklearn)": [[8, "ax.metrics.sklearn.SklearnMetric"]], "sklearnmodeltype (class in ax.metrics.sklearn)": [[8, "ax.metrics.sklearn.SklearnModelType"]], "tensorboardmetric (class in ax.metrics.tensorboard)": [[8, "ax.metrics.tensorboard.TensorboardMetric"]], "torchxmetric (class in ax.metrics.torchx)": [[8, "ax.metrics.torchx.TorchXMetric"]], "ax.metrics": [[8, "module-ax.metrics"]], "ax.metrics.botorch_test_problem": [[8, "module-ax.metrics.botorch_test_problem"]], "ax.metrics.branin": [[8, "module-ax.metrics.branin"]], "ax.metrics.branin_map": [[8, "module-ax.metrics.branin_map"]], "ax.metrics.chemistry": [[8, "module-ax.metrics.chemistry"]], "ax.metrics.curve": [[8, "module-ax.metrics.curve"]], "ax.metrics.dict_lookup": [[8, "module-ax.metrics.dict_lookup"]], "ax.metrics.factorial": [[8, "module-ax.metrics.factorial"]], "ax.metrics.hartmann6": [[8, "module-ax.metrics.hartmann6"]], "ax.metrics.l2norm": [[8, "module-ax.metrics.l2norm"]], "ax.metrics.noisy_function": [[8, "module-ax.metrics.noisy_function"]], "ax.metrics.noisy_function_map": [[8, "module-ax.metrics.noisy_function_map"]], "ax.metrics.sklearn": [[8, "module-ax.metrics.sklearn"]], "ax.metrics.tensorboard": [[8, "module-ax.metrics.tensorboard"]], "ax.metrics.torchx": [[8, "module-ax.metrics.torchx"]], "bulk_fetch_experiment_data() (ax.metrics.curve.abstractcurvemetric method)": [[8, "ax.metrics.curve.AbstractCurveMetric.bulk_fetch_experiment_data"]], "bulk_fetch_trial_data() (ax.metrics.curve.abstractcurvemetric method)": [[8, "ax.metrics.curve.AbstractCurveMetric.bulk_fetch_trial_data"]], "bulk_fetch_trial_data() (ax.metrics.tensorboard.tensorboardmetric method)": [[8, "ax.metrics.tensorboard.TensorboardMetric.bulk_fetch_trial_data"]], "clone() (ax.metrics.chemistry.chemistrymetric method)": [[8, "ax.metrics.chemistry.ChemistryMetric.clone"]], "clone() (ax.metrics.dict_lookup.dictlookupmetric method)": [[8, "ax.metrics.dict_lookup.DictLookupMetric.clone"]], "clone() (ax.metrics.noisy_function.genericnoisyfunctionmetric method)": [[8, "ax.metrics.noisy_function.GenericNoisyFunctionMetric.clone"]], "clone() (ax.metrics.noisy_function.noisyfunctionmetric method)": [[8, "ax.metrics.noisy_function.NoisyFunctionMetric.clone"]], "clone() (ax.metrics.noisy_function_map.noisyfunctionmapmetric method)": [[8, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.clone"]], "clone() (ax.metrics.sklearn.sklearnmetric method)": [[8, "ax.metrics.sklearn.SklearnMetric.clone"]], "curve_names (ax.metrics.curve.abstractcurvemetric property)": [[8, "ax.metrics.curve.AbstractCurveMetric.curve_names"]], "evaluate() (ax.metrics.chemistry.chemistrydata method)": [[8, "ax.metrics.chemistry.ChemistryData.evaluate"]], "evaluation_function() (in module ax.metrics.factorial)": [[8, "ax.metrics.factorial.evaluation_function"]], "f() (ax.metrics.branin.augmentedbraninmetric method)": [[8, "ax.metrics.branin.AugmentedBraninMetric.f"]], "f() (ax.metrics.branin.braninmetric method)": [[8, "ax.metrics.branin.BraninMetric.f"]], "f() (ax.metrics.branin.negativebraninmetric method)": [[8, "ax.metrics.branin.NegativeBraninMetric.f"]], "f() (ax.metrics.branin_map.braninfidelitymapmetric method)": [[8, "ax.metrics.branin_map.BraninFidelityMapMetric.f"]], "f() (ax.metrics.branin_map.branintimestampmapmetric method)": [[8, "ax.metrics.branin_map.BraninTimestampMapMetric.f"]], "f() (ax.metrics.hartmann6.augmentedhartmann6metric method)": [[8, "ax.metrics.hartmann6.AugmentedHartmann6Metric.f"]], "f() (ax.metrics.hartmann6.hartmann6metric method)": [[8, "ax.metrics.hartmann6.Hartmann6Metric.f"]], "f() (ax.metrics.l2norm.l2normmetric method)": [[8, "ax.metrics.l2norm.L2NormMetric.f"]], "f() (ax.metrics.noisy_function.noisyfunctionmetric method)": [[8, "ax.metrics.noisy_function.NoisyFunctionMetric.f"]], "f() (ax.metrics.noisy_function_map.noisyfunctionmapmetric method)": [[8, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.f"]], "fetch_trial_data() (ax.metrics.botorch_test_problem.botorchtestproblemmetric method)": [[8, "ax.metrics.botorch_test_problem.BotorchTestProblemMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.branin_map.braninfidelitymapmetric method)": [[8, "ax.metrics.branin_map.BraninFidelityMapMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.branin_map.branintimestampmapmetric method)": [[8, "ax.metrics.branin_map.BraninTimestampMapMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.chemistry.chemistrymetric method)": [[8, "ax.metrics.chemistry.ChemistryMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.curve.abstractcurvemetric method)": [[8, "ax.metrics.curve.AbstractCurveMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.dict_lookup.dictlookupmetric method)": [[8, "ax.metrics.dict_lookup.DictLookupMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.factorial.factorialmetric method)": [[8, "ax.metrics.factorial.FactorialMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.noisy_function.noisyfunctionmetric method)": [[8, "ax.metrics.noisy_function.NoisyFunctionMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.noisy_function_map.noisyfunctionmapmetric method)": [[8, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.sklearn.sklearnmetric method)": [[8, "ax.metrics.sklearn.SklearnMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.tensorboard.tensorboardmetric method)": [[8, "ax.metrics.tensorboard.TensorboardMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.torchx.torchxmetric method)": [[8, "ax.metrics.torchx.TorchXMetric.fetch_trial_data"]], "get_curves_from_ids() (ax.metrics.curve.abstractcurvemetric method)": [[8, "ax.metrics.curve.AbstractCurveMetric.get_curves_from_ids"]], "get_df_from_curve_series() (ax.metrics.curve.abstractcurvemetric method)": [[8, "ax.metrics.curve.AbstractCurveMetric.get_df_from_curve_series"]], "get_df_from_curve_series() (in module ax.metrics.curve)": [[8, "ax.metrics.curve.get_df_from_curve_series"]], "get_ids_from_trials() (ax.metrics.curve.abstractcurvemetric method)": [[8, "ax.metrics.curve.AbstractCurveMetric.get_ids_from_trials"]], "is_available_while_running() (ax.metrics.curve.abstractcurvemetric class method)": [[8, "ax.metrics.curve.AbstractCurveMetric.is_available_while_running"]], "is_available_while_running() (ax.metrics.dict_lookup.dictlookupmetric class method)": [[8, "ax.metrics.dict_lookup.DictLookupMetric.is_available_while_running"]], "is_available_while_running() (ax.metrics.factorial.factorialmetric class method)": [[8, "ax.metrics.factorial.FactorialMetric.is_available_while_running"]], "is_available_while_running() (ax.metrics.noisy_function.noisyfunctionmetric class method)": [[8, "ax.metrics.noisy_function.NoisyFunctionMetric.is_available_while_running"]], "is_available_while_running() (ax.metrics.noisy_function_map.noisyfunctionmapmetric class method)": [[8, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.is_available_while_running"]], "is_available_while_running() (ax.metrics.tensorboard.tensorboardmetric class method)": [[8, "ax.metrics.tensorboard.TensorboardMetric.is_available_while_running"]], "lower_is_better (ax.metrics.chemistry.chemistrymetric attribute)": [[8, "ax.metrics.chemistry.ChemistryMetric.lower_is_better"]], "map_key_info (ax.metrics.branin_map.braninfidelitymapmetric attribute)": [[8, "ax.metrics.branin_map.BraninFidelityMapMetric.map_key_info"]], "map_key_info (ax.metrics.curve.abstractcurvemetric attribute)": [[8, "ax.metrics.curve.AbstractCurveMetric.map_key_info"]], "map_key_info (ax.metrics.noisy_function_map.noisyfunctionmapmetric attribute)": [[8, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.map_key_info"]], "map_key_info (ax.metrics.tensorboard.tensorboardmetric attribute)": [[8, "ax.metrics.tensorboard.TensorboardMetric.map_key_info"]], "noiseless (ax.metrics.chemistry.chemistrymetric attribute)": [[8, "ax.metrics.chemistry.ChemistryMetric.noiseless"]], "objective_dict (ax.metrics.chemistry.chemistrydata attribute)": [[8, "ax.metrics.chemistry.ChemistryData.objective_dict"]], "overwrite_existing_data() (ax.metrics.noisy_function_map.noisyfunctionmapmetric class method)": [[8, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.overwrite_existing_data"]], "param_names (ax.metrics.chemistry.chemistrydata attribute)": [[8, "ax.metrics.chemistry.ChemistryData.param_names"]], "param_names (ax.metrics.noisy_function.genericnoisyfunctionmetric property)": [[8, "ax.metrics.noisy_function.GenericNoisyFunctionMetric.param_names"]], "random() (in module ax.metrics.branin_map)": [[8, "ax.metrics.branin_map.random"]], "train_eval() (ax.metrics.sklearn.sklearnmetric method)": [[8, "ax.metrics.sklearn.SklearnMetric.train_eval"]], "assessmodelfitresult (class in ax.modelbridge.cross_validation)": [[9, "ax.modelbridge.cross_validation.AssessModelFitResult"]], "botorch_modular (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.BOTORCH_MODULAR"]], "bo_mixed (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.BO_MIXED"]], "basegenargs (class in ax.modelbridge.base)": [[9, "ax.modelbridge.base.BaseGenArgs"]], "baserelativize (class in ax.modelbridge.transforms.relativize)": [[9, "ax.modelbridge.transforms.relativize.BaseRelativize"]], "bestmodelselector (class in ax.modelbridge.best_model_selector)": [[9, "ax.modelbridge.best_model_selector.BestModelSelector"]], "context_sacbo (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.CONTEXT_SACBO"]], "cvresult (class in ax.modelbridge.cross_validation)": [[9, "ax.modelbridge.cross_validation.CVResult"]], "capparameter (class in ax.modelbridge.transforms.cap_parameter)": [[9, "ax.modelbridge.transforms.cap_parameter.CapParameter"]], "cast (class in ax.modelbridge.transforms.cast)": [[9, "ax.modelbridge.transforms.cast.Cast"]], "centeredunitx (class in ax.modelbridge.transforms.centered_unit_x)": [[9, "ax.modelbridge.transforms.centered_unit_x.CenteredUnitX"]], "choiceencode (class in ax.modelbridge.transforms.choice_encode)": [[9, "ax.modelbridge.transforms.choice_encode.ChoiceEncode"]], "choicetonumericchoice (class in ax.modelbridge.transforms.choice_encode)": [[9, "ax.modelbridge.transforms.choice_encode.ChoiceToNumericChoice"]], "closestlookupdict (class in ax.modelbridge.transforms.utils)": [[9, "ax.modelbridge.transforms.utils.ClosestLookupDict"]], "convertmetricnames (class in ax.modelbridge.transforms.convert_metric_names)": [[9, "ax.modelbridge.transforms.convert_metric_names.ConvertMetricNames"]], "default_ehvi_batch_limit (in module ax.modelbridge.factory)": [[9, "ax.modelbridge.factory.DEFAULT_EHVI_BATCH_LIMIT"]], "derelativize (class in ax.modelbridge.transforms.derelativize)": [[9, "ax.modelbridge.transforms.derelativize.Derelativize"]], "discretemodelbridge (class in ax.modelbridge.discrete)": [[9, "ax.modelbridge.discrete.DiscreteModelBridge"]], "empirical_bayes_thompson (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.EMPIRICAL_BAYES_THOMPSON"]], "externalgenerationnode (class in ax.modelbridge.external_generation_node)": [[9, "ax.modelbridge.external_generation_node.ExternalGenerationNode"]], "factorial (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.FACTORIAL"]], "fullybayesian (ax.modelbridge.registry.models property)": [[9, "ax.modelbridge.registry.Models.FULLYBAYESIAN"]], "fullybayesianmoo (ax.modelbridge.registry.models property)": [[9, "ax.modelbridge.registry.Models.FULLYBAYESIANMOO"]], "fullybayesianmoo_mtgp (ax.modelbridge.registry.models property)": [[9, "ax.modelbridge.registry.Models.FULLYBAYESIANMOO_MTGP"]], "fullybayesian_mtgp (ax.modelbridge.registry.models property)": [[9, "ax.modelbridge.registry.Models.FULLYBAYESIAN_MTGP"]], "factoryfunctionmodelspec (class in ax.modelbridge.model_spec)": [[9, "ax.modelbridge.model_spec.FactoryFunctionModelSpec"]], "gpei (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.GPEI"]], "genresults (class in ax.modelbridge.base)": [[9, "ax.modelbridge.base.GenResults"]], "generationnode (class in ax.modelbridge.generation_node)": [[9, "ax.modelbridge.generation_node.GenerationNode"]], "generationstep (class in ax.modelbridge.generation_node)": [[9, "ax.modelbridge.generation_node.GenerationStep"]], "generationstrategy (class in ax.modelbridge.generation_strategy)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy"]], "ivw (class in ax.modelbridge.transforms.ivw)": [[9, "ax.modelbridge.transforms.ivw.IVW"]], "intrangetochoice (class in ax.modelbridge.transforms.int_range_to_choice)": [[9, "ax.modelbridge.transforms.int_range_to_choice.IntRangeToChoice"]], "inttofloat (class in ax.modelbridge.transforms.int_to_float)": [[9, "ax.modelbridge.transforms.int_to_float.IntToFloat"]], "inversegaussiancdfy (class in ax.modelbridge.transforms.inverse_gaussian_cdf_y)": [[9, "ax.modelbridge.transforms.inverse_gaussian_cdf_y.InverseGaussianCdfY"]], "legacy_botorch (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.LEGACY_BOTORCH"]], "log (class in ax.modelbridge.transforms.log)": [[9, "ax.modelbridge.transforms.log.Log"]], "logy (class in ax.modelbridge.transforms.log_y)": [[9, "ax.modelbridge.transforms.log_y.LogY"]], "logit (class in ax.modelbridge.transforms.logit)": [[9, "ax.modelbridge.transforms.logit.Logit"]], "max (ax.modelbridge.best_model_selector.reductioncriterion attribute)": [[9, "ax.modelbridge.best_model_selector.ReductionCriterion.MAX"]], "mean (ax.modelbridge.best_model_selector.reductioncriterion attribute)": [[9, "ax.modelbridge.best_model_selector.ReductionCriterion.MEAN"]], "min (ax.modelbridge.best_model_selector.reductioncriterion attribute)": [[9, "ax.modelbridge.best_model_selector.ReductionCriterion.MIN"]], "missing_status_quo_error (ax.modelbridge.transforms.relativize.baserelativize attribute)": [[9, "ax.modelbridge.transforms.relativize.BaseRelativize.MISSING_STATUS_QUO_ERROR"]], "moo (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.MOO"]], "maptorchmodelbridge (class in ax.modelbridge.map_torch)": [[9, "ax.modelbridge.map_torch.MapTorchModelBridge"]], "mapunitx (class in ax.modelbridge.transforms.map_unit_x)": [[9, "ax.modelbridge.transforms.map_unit_x.MapUnitX"]], "mergerepeatedmeasurements (class in ax.modelbridge.transforms.merge_repeated_measurements)": [[9, "ax.modelbridge.transforms.merge_repeated_measurements.MergeRepeatedMeasurements"]], "metricsastask (class in ax.modelbridge.transforms.metrics_as_task)": [[9, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask"]], "modelbridge (class in ax.modelbridge.base)": [[9, "ax.modelbridge.base.ModelBridge"]], "modelregistrybase (class in ax.modelbridge.registry)": [[9, "ax.modelbridge.registry.ModelRegistryBase"]], "modelsetup (class in ax.modelbridge.registry)": [[9, "ax.modelbridge.registry.ModelSetup"]], "modelspec (class in ax.modelbridge.model_spec)": [[9, "ax.modelbridge.model_spec.ModelSpec"]], "modelspecjsonencoder (class in ax.modelbridge.model_spec)": [[9, "ax.modelbridge.model_spec.ModelSpecJSONEncoder"]], "models (class in ax.modelbridge.registry)": [[9, "ax.modelbridge.registry.Models"]], "onehot (class in ax.modelbridge.transforms.one_hot)": [[9, "ax.modelbridge.transforms.one_hot.OneHot"]], "onehotencoder (class in ax.modelbridge.transforms.one_hot)": [[9, "ax.modelbridge.transforms.one_hot.OneHotEncoder"]], "orderedchoiceencode (class in ax.modelbridge.transforms.choice_encode)": [[9, "ax.modelbridge.transforms.choice_encode.OrderedChoiceEncode"]], "orderedchoicetointegerrange (class in ax.modelbridge.transforms.choice_encode)": [[9, "ax.modelbridge.transforms.choice_encode.OrderedChoiceToIntegerRange"]], "pairwisemodelbridge (class in ax.modelbridge.pairwise)": [[9, "ax.modelbridge.pairwise.PairwiseModelBridge"]], "percentiley (class in ax.modelbridge.transforms.percentile_y)": [[9, "ax.modelbridge.transforms.percentile_y.PercentileY"]], "powertransformy (class in ax.modelbridge.transforms.power_transform_y)": [[9, "ax.modelbridge.transforms.power_transform_y.PowerTransformY"]], "reductioncriterion (class in ax.modelbridge.best_model_selector)": [[9, "ax.modelbridge.best_model_selector.ReductionCriterion"]], "relativize (class in ax.modelbridge.transforms.relativize)": [[9, "ax.modelbridge.transforms.relativize.Relativize"]], "relativizewithconstantcontrol (class in ax.modelbridge.transforms.relativize)": [[9, "ax.modelbridge.transforms.relativize.RelativizeWithConstantControl"]], "removefixed (class in ax.modelbridge.transforms.remove_fixed)": [[9, "ax.modelbridge.transforms.remove_fixed.RemoveFixed"]], "saasbo (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.SAASBO"]], "saas_mtgp (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.SAAS_MTGP"]], "sobol (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.SOBOL"]], "st_mtgp (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.ST_MTGP"]], "st_mtgp_legacy (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.ST_MTGP_LEGACY"]], "st_mtgp_nehvi (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.ST_MTGP_NEHVI"]], "searchspacetochoice (class in ax.modelbridge.transforms.search_space_to_choice)": [[9, "ax.modelbridge.transforms.search_space_to_choice.SearchSpaceToChoice"]], "singlediagnosticbestmodelselector (class in ax.modelbridge.best_model_selector)": [[9, "ax.modelbridge.best_model_selector.SingleDiagnosticBestModelSelector"]], "standardizey (class in ax.modelbridge.transforms.standardize_y)": [[9, "ax.modelbridge.transforms.standardize_y.StandardizeY"]], "stratifiedstandardizey (class in ax.modelbridge.transforms.stratified_standardize_y)": [[9, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY"]], "thompson (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.THOMPSON"]], "taskchoicetointtaskchoice (class in ax.modelbridge.transforms.task_encode)": [[9, "ax.modelbridge.transforms.task_encode.TaskChoiceToIntTaskChoice"]], "taskencode (class in ax.modelbridge.transforms.task_encode)": [[9, "ax.modelbridge.transforms.task_encode.TaskEncode"]], "timeasfeature (class in ax.modelbridge.transforms.time_as_feature)": [[9, "ax.modelbridge.transforms.time_as_feature.TimeAsFeature"]], "torchmodelbridge (class in ax.modelbridge.torch)": [[9, "ax.modelbridge.torch.TorchModelBridge"]], "transform (class in ax.modelbridge.transforms.base)": [[9, "ax.modelbridge.transforms.base.Transform"]], "trialastask (class in ax.modelbridge.transforms.trial_as_task)": [[9, "ax.modelbridge.transforms.trial_as_task.TrialAsTask"]], "uniform (ax.modelbridge.registry.models attribute)": [[9, "ax.modelbridge.registry.Models.UNIFORM"]], "unitx (class in ax.modelbridge.transforms.unit_x)": [[9, "ax.modelbridge.transforms.unit_x.UnitX"]], "winsorize (class in ax.modelbridge.transforms.winsorize)": [[9, "ax.modelbridge.transforms.winsorize.Winsorize"]], "array_to_observation_data() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.array_to_observation_data"]], "assess_model_fit() (in module ax.modelbridge.cross_validation)": [[9, "ax.modelbridge.cross_validation.assess_model_fit"]], "ax.modelbridge": [[9, "module-ax.modelbridge"]], "ax.modelbridge.base": [[9, "module-ax.modelbridge.base"]], "ax.modelbridge.best_model_selector": [[9, "module-ax.modelbridge.best_model_selector"]], "ax.modelbridge.cross_validation": [[9, "module-ax.modelbridge.cross_validation"]], "ax.modelbridge.discrete": [[9, "module-ax.modelbridge.discrete"]], "ax.modelbridge.dispatch_utils": [[9, "module-ax.modelbridge.dispatch_utils"]], "ax.modelbridge.external_generation_node": [[9, "module-ax.modelbridge.external_generation_node"]], "ax.modelbridge.factory": [[9, "module-ax.modelbridge.factory"]], "ax.modelbridge.generation_node": [[9, "module-ax.modelbridge.generation_node"]], "ax.modelbridge.generation_strategy": [[9, "module-ax.modelbridge.generation_strategy"]], "ax.modelbridge.map_torch": [[9, "module-ax.modelbridge.map_torch"]], "ax.modelbridge.model_spec": [[9, "module-ax.modelbridge.model_spec"]], "ax.modelbridge.modelbridge_utils": [[9, "module-ax.modelbridge.modelbridge_utils"]], "ax.modelbridge.pairwise": [[9, "module-ax.modelbridge.pairwise"]], "ax.modelbridge.prediction_utils": [[9, "module-ax.modelbridge.prediction_utils"]], "ax.modelbridge.registry": [[9, "module-ax.modelbridge.registry"]], "ax.modelbridge.torch": [[9, "module-ax.modelbridge.torch"]], "ax.modelbridge.transforms.base": [[9, "module-ax.modelbridge.transforms.base"]], "ax.modelbridge.transforms.cap_parameter": [[9, "module-ax.modelbridge.transforms.cap_parameter"]], "ax.modelbridge.transforms.cast": [[9, "module-ax.modelbridge.transforms.cast"]], "ax.modelbridge.transforms.centered_unit_x": [[9, "module-ax.modelbridge.transforms.centered_unit_x"]], "ax.modelbridge.transforms.choice_encode": [[9, "module-ax.modelbridge.transforms.choice_encode"]], "ax.modelbridge.transforms.convert_metric_names": [[9, "module-ax.modelbridge.transforms.convert_metric_names"]], "ax.modelbridge.transforms.deprecated_transform_mixin": [[9, "module-ax.modelbridge.transforms.deprecated_transform_mixin"]], "ax.modelbridge.transforms.derelativize": [[9, "module-ax.modelbridge.transforms.derelativize"]], "ax.modelbridge.transforms.int_range_to_choice": [[9, "module-ax.modelbridge.transforms.int_range_to_choice"]], "ax.modelbridge.transforms.int_to_float": [[9, "module-ax.modelbridge.transforms.int_to_float"]], "ax.modelbridge.transforms.inverse_gaussian_cdf_y": [[9, "module-ax.modelbridge.transforms.inverse_gaussian_cdf_y"]], "ax.modelbridge.transforms.ivw": [[9, "module-ax.modelbridge.transforms.ivw"]], "ax.modelbridge.transforms.log": [[9, "module-ax.modelbridge.transforms.log"]], "ax.modelbridge.transforms.log_y": [[9, "module-ax.modelbridge.transforms.log_y"]], "ax.modelbridge.transforms.logit": [[9, "module-ax.modelbridge.transforms.logit"]], "ax.modelbridge.transforms.map_unit_x": [[9, "module-ax.modelbridge.transforms.map_unit_x"]], "ax.modelbridge.transforms.merge_repeated_measurements": [[9, "module-ax.modelbridge.transforms.merge_repeated_measurements"]], "ax.modelbridge.transforms.metrics_as_task": [[9, "module-ax.modelbridge.transforms.metrics_as_task"]], "ax.modelbridge.transforms.one_hot": [[9, "module-ax.modelbridge.transforms.one_hot"]], "ax.modelbridge.transforms.percentile_y": [[9, "module-ax.modelbridge.transforms.percentile_y"]], "ax.modelbridge.transforms.power_transform_y": [[9, "module-ax.modelbridge.transforms.power_transform_y"]], "ax.modelbridge.transforms.relativize": [[9, "module-ax.modelbridge.transforms.relativize"]], "ax.modelbridge.transforms.remove_fixed": [[9, "module-ax.modelbridge.transforms.remove_fixed"]], "ax.modelbridge.transforms.rounding": [[9, "module-ax.modelbridge.transforms.rounding"]], "ax.modelbridge.transforms.search_space_to_choice": [[9, "module-ax.modelbridge.transforms.search_space_to_choice"]], "ax.modelbridge.transforms.standardize_y": [[9, "module-ax.modelbridge.transforms.standardize_y"]], "ax.modelbridge.transforms.stratified_standardize_y": [[9, "module-ax.modelbridge.transforms.stratified_standardize_y"]], "ax.modelbridge.transforms.task_encode": [[9, "module-ax.modelbridge.transforms.task_encode"]], "ax.modelbridge.transforms.time_as_feature": [[9, "module-ax.modelbridge.transforms.time_as_feature"]], "ax.modelbridge.transforms.trial_as_task": [[9, "module-ax.modelbridge.transforms.trial_as_task"]], "ax.modelbridge.transforms.unit_x": [[9, "module-ax.modelbridge.transforms.unit_x"]], "ax.modelbridge.transforms.utils": [[9, "module-ax.modelbridge.transforms.utils"]], "ax.modelbridge.transforms.winsorize": [[9, "module-ax.modelbridge.transforms.winsorize"]], "bad_fit_metrics_to_fisher_score (ax.modelbridge.cross_validation.assessmodelfitresult attribute)": [[9, "ax.modelbridge.cross_validation.AssessModelFitResult.bad_fit_metrics_to_fisher_score"]], "best_model() (ax.modelbridge.best_model_selector.bestmodelselector method)": [[9, "ax.modelbridge.best_model_selector.BestModelSelector.best_model"]], "best_model() (ax.modelbridge.best_model_selector.singlediagnosticbestmodelselector method)": [[9, "ax.modelbridge.best_model_selector.SingleDiagnosticBestModelSelector.best_model"]], "best_observation_features (ax.modelbridge.base.genresults attribute)": [[9, "ax.modelbridge.base.GenResults.best_observation_features"]], "bridge_class (ax.modelbridge.registry.modelsetup attribute)": [[9, "ax.modelbridge.registry.ModelSetup.bridge_class"]], "calculate_num_initialization_trials() (in module ax.modelbridge.dispatch_utils)": [[9, "ax.modelbridge.dispatch_utils.calculate_num_initialization_trials"]], "check_has_multi_objective_and_data() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.check_has_multi_objective_and_data"]], "choose_generation_strategy() (in module ax.modelbridge.dispatch_utils)": [[9, "ax.modelbridge.dispatch_utils.choose_generation_strategy"]], "clamp_observation_features() (in module ax.modelbridge.base)": [[9, "ax.modelbridge.base.clamp_observation_features"]], "clone_reset() (ax.modelbridge.generation_strategy.generationstrategy method)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.clone_reset"]], "completion_criteria (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.completion_criteria"]], "compute_diagnostics() (in module ax.modelbridge.cross_validation)": [[9, "ax.modelbridge.cross_validation.compute_diagnostics"]], "compute_model_fit_metrics_from_modelbridge() (in module ax.modelbridge.cross_validation)": [[9, "ax.modelbridge.cross_validation.compute_model_fit_metrics_from_modelbridge"]], "compute_standardization_parameters() (in module ax.modelbridge.transforms.standardize_y)": [[9, "ax.modelbridge.transforms.standardize_y.compute_standardization_parameters"]], "config (ax.modelbridge.transforms.base.transform attribute)": [[9, "ax.modelbridge.transforms.base.Transform.config"]], "construct_new_search_space() (in module ax.modelbridge.transforms.utils)": [[9, "ax.modelbridge.transforms.utils.construct_new_search_space"]], "contains_constrained_integer() (in module ax.modelbridge.transforms.rounding)": [[9, "ax.modelbridge.transforms.rounding.contains_constrained_integer"]], "control_as_constant (ax.modelbridge.transforms.relativize.baserelativize property)": [[9, "ax.modelbridge.transforms.relativize.BaseRelativize.control_as_constant"]], "control_as_constant (ax.modelbridge.transforms.relativize.relativize property)": [[9, "ax.modelbridge.transforms.relativize.Relativize.control_as_constant"]], "control_as_constant (ax.modelbridge.transforms.relativize.relativizewithconstantcontrol property)": [[9, "ax.modelbridge.transforms.relativize.RelativizeWithConstantControl.control_as_constant"]], "convert_mt_observations() (in module ax.modelbridge.transforms.convert_metric_names)": [[9, "ax.modelbridge.transforms.convert_metric_names.convert_mt_observations"]], "copy() (ax.modelbridge.model_spec.modelspec method)": [[9, "ax.modelbridge.model_spec.ModelSpec.copy"]], "cross_validate() (ax.modelbridge.base.modelbridge method)": [[9, "ax.modelbridge.base.ModelBridge.cross_validate"]], "cross_validate() (ax.modelbridge.model_spec.modelspec method)": [[9, "ax.modelbridge.model_spec.ModelSpec.cross_validate"]], "cross_validate() (in module ax.modelbridge.cross_validation)": [[9, "ax.modelbridge.cross_validation.cross_validate"]], "cross_validate_by_trial() (in module ax.modelbridge.cross_validation)": [[9, "ax.modelbridge.cross_validation.cross_validate_by_trial"]], "current_generator_run_limit() (ax.modelbridge.generation_strategy.generationstrategy method)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.current_generator_run_limit"]], "current_node (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.current_node"]], "current_node_name (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.current_node_name"]], "current_step (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.current_step"]], "current_step_index (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.current_step_index"]], "cutoffs (ax.modelbridge.transforms.winsorize.winsorize attribute)": [[9, "ax.modelbridge.transforms.winsorize.Winsorize.cutoffs"]], "cv_results (ax.modelbridge.model_spec.modelspec property)": [[9, "ax.modelbridge.model_spec.ModelSpec.cv_results"]], "default() (ax.modelbridge.model_spec.modelspecjsonencoder method)": [[9, "ax.modelbridge.model_spec.ModelSpecJSONEncoder.default"]], "default_model_kwargs (ax.modelbridge.registry.modelsetup attribute)": [[9, "ax.modelbridge.registry.ModelSetup.default_model_kwargs"]], "derelativize_optimization_config_with_raw_status_quo() (in module ax.modelbridge.transforms.utils)": [[9, "ax.modelbridge.transforms.utils.derelativize_optimization_config_with_raw_status_quo"]], "diagnostics (ax.modelbridge.model_spec.modelspec property)": [[9, "ax.modelbridge.model_spec.ModelSpec.diagnostics"]], "enforce_num_trials (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.enforce_num_trials"]], "evaluate_acquisition_function() (ax.modelbridge.torch.torchmodelbridge method)": [[9, "ax.modelbridge.torch.TorchModelBridge.evaluate_acquisition_function"]], "experiment (ax.modelbridge.generation_node.generationnode property)": [[9, "ax.modelbridge.generation_node.GenerationNode.experiment"]], "experiment (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.experiment"]], "extract_objective_thresholds() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.extract_objective_thresholds"]], "extract_objective_weights() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.extract_objective_weights"]], "extract_outcome_constraints() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.extract_outcome_constraints"]], "extract_parameter_constraints() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.extract_parameter_constraints"]], "extract_risk_measure() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.extract_risk_measure"]], "extract_robust_digest() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.extract_robust_digest"]], "extract_search_space_digest() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.extract_search_space_digest"]], "factory_function (ax.modelbridge.model_spec.factoryfunctionmodelspec attribute)": [[9, "ax.modelbridge.model_spec.FactoryFunctionModelSpec.factory_function"]], "feasible_hypervolume() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.feasible_hypervolume"]], "feature_importances() (ax.modelbridge.base.modelbridge method)": [[9, "ax.modelbridge.base.ModelBridge.feature_importances"]], "feature_importances() (ax.modelbridge.torch.torchmodelbridge method)": [[9, "ax.modelbridge.torch.TorchModelBridge.feature_importances"]], "fit() (ax.modelbridge.external_generation_node.externalgenerationnode method)": [[9, "ax.modelbridge.external_generation_node.ExternalGenerationNode.fit"]], "fit() (ax.modelbridge.generation_node.generationnode method)": [[9, "ax.modelbridge.generation_node.GenerationNode.fit"]], "fit() (ax.modelbridge.model_spec.factoryfunctionmodelspec method)": [[9, "ax.modelbridge.model_spec.FactoryFunctionModelSpec.fit"]], "fit() (ax.modelbridge.model_spec.modelspec method)": [[9, "ax.modelbridge.model_spec.ModelSpec.fit"]], "fitted_model (ax.modelbridge.model_spec.modelspec property)": [[9, "ax.modelbridge.model_spec.ModelSpec.fitted_model"]], "fixed_features (ax.modelbridge.base.basegenargs attribute)": [[9, "ax.modelbridge.base.BaseGenArgs.fixed_features"]], "fixed_features (ax.modelbridge.model_spec.modelspec property)": [[9, "ax.modelbridge.model_spec.ModelSpec.fixed_features"]], "gen() (ax.modelbridge.base.modelbridge method)": [[9, "ax.modelbridge.base.ModelBridge.gen"]], "gen() (ax.modelbridge.generation_node.generationnode method)": [[9, "ax.modelbridge.generation_node.GenerationNode.gen"]], "gen() (ax.modelbridge.generation_node.generationstep method)": [[9, "ax.modelbridge.generation_node.GenerationStep.gen"]], "gen() (ax.modelbridge.generation_strategy.generationstrategy method)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.gen"]], "gen() (ax.modelbridge.model_spec.modelspec method)": [[9, "ax.modelbridge.model_spec.ModelSpec.gen"]], "gen_arms() (in module ax.modelbridge.base)": [[9, "ax.modelbridge.base.gen_arms"]], "gen_for_multiple_trials_with_multiple_models() (ax.modelbridge.generation_strategy.generationstrategy method)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.gen_for_multiple_trials_with_multiple_models"]], "gen_metadata (ax.modelbridge.base.genresults attribute)": [[9, "ax.modelbridge.base.GenResults.gen_metadata"]], "gen_with_multiple_nodes() (ax.modelbridge.generation_strategy.generationstrategy method)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.gen_with_multiple_nodes"]], "generation_strategy (ax.modelbridge.generation_node.generationnode property)": [[9, "ax.modelbridge.generation_node.GenerationNode.generation_strategy"]], "generator_run_limit() (ax.modelbridge.generation_node.generationnode method)": [[9, "ax.modelbridge.generation_node.GenerationNode.generator_run_limit"]], "get_gpei() (in module ax.modelbridge.factory)": [[9, "ax.modelbridge.factory.get_GPEI"]], "get_botorch() (in module ax.modelbridge.factory)": [[9, "ax.modelbridge.factory.get_botorch"]], "get_data() (in module ax.modelbridge.transforms.utils)": [[9, "ax.modelbridge.transforms.utils.get_data"]], "get_empirical_bayes_thompson() (in module ax.modelbridge.factory)": [[9, "ax.modelbridge.factory.get_empirical_bayes_thompson"]], "get_factorial() (in module ax.modelbridge.factory)": [[9, "ax.modelbridge.factory.get_factorial"]], "get_fit_and_std_quality_and_generalization_dict() (in module ax.modelbridge.cross_validation)": [[9, "ax.modelbridge.cross_validation.get_fit_and_std_quality_and_generalization_dict"]], "get_fixed_features() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.get_fixed_features"]], "get_fixed_features_from_experiment() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.get_fixed_features_from_experiment"]], "get_model_from_generator_run() (in module ax.modelbridge.registry)": [[9, "ax.modelbridge.registry.get_model_from_generator_run"]], "get_next_candidate() (ax.modelbridge.external_generation_node.externalgenerationnode method)": [[9, "ax.modelbridge.external_generation_node.ExternalGenerationNode.get_next_candidate"]], "get_pareto_frontier_and_configs() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.get_pareto_frontier_and_configs"]], "get_sobol() (in module ax.modelbridge.factory)": [[9, "ax.modelbridge.factory.get_sobol"]], "get_thompson() (in module ax.modelbridge.factory)": [[9, "ax.modelbridge.factory.get_thompson"]], "get_training_data() (ax.modelbridge.base.modelbridge method)": [[9, "ax.modelbridge.base.ModelBridge.get_training_data"]], "get_uniform() (in module ax.modelbridge.factory)": [[9, "ax.modelbridge.factory.get_uniform"]], "good_fit_metrics_to_fisher_score (ax.modelbridge.cross_validation.assessmodelfitresult attribute)": [[9, "ax.modelbridge.cross_validation.AssessModelFitResult.good_fit_metrics_to_fisher_score"]], "has_good_opt_config_model_fit() (in module ax.modelbridge.cross_validation)": [[9, "ax.modelbridge.cross_validation.has_good_opt_config_model_fit"]], "hypervolume() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.hypervolume"]], "index (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.index"]], "infer_objective_thresholds() (ax.modelbridge.torch.torchmodelbridge method)": [[9, "ax.modelbridge.torch.TorchModelBridge.infer_objective_thresholds"]], "inverse_transform() (ax.modelbridge.transforms.one_hot.onehotencoder method)": [[9, "ax.modelbridge.transforms.one_hot.OneHotEncoder.inverse_transform"]], "is_completed (ax.modelbridge.generation_node.generationnode property)": [[9, "ax.modelbridge.generation_node.GenerationNode.is_completed"]], "is_node_based (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.is_node_based"]], "ivw_metric_merge() (in module ax.modelbridge.transforms.ivw)": [[9, "ax.modelbridge.transforms.ivw.ivw_metric_merge"]], "last_generator_run (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.last_generator_run"]], "lognorm_to_norm() (in module ax.modelbridge.transforms.log_y)": [[9, "ax.modelbridge.transforms.log_y.lognorm_to_norm"]], "match_ci_width() (in module ax.modelbridge.transforms.log_y)": [[9, "ax.modelbridge.transforms.log_y.match_ci_width"]], "match_ci_width_truncated() (in module ax.modelbridge.transforms.utils)": [[9, "ax.modelbridge.transforms.utils.match_ci_width_truncated"]], "max_parallelism (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.max_parallelism"]], "metric_names (ax.modelbridge.base.modelbridge property)": [[9, "ax.modelbridge.base.ModelBridge.metric_names"]], "min_trials_observed (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.min_trials_observed"]], "model (ax.modelbridge.discrete.discretemodelbridge attribute)": [[9, "ax.modelbridge.discrete.DiscreteModelBridge.model"]], "model (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.model"]], "model (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.model"]], "model (ax.modelbridge.torch.torchmodelbridge attribute)": [[9, "ax.modelbridge.torch.TorchModelBridge.model"]], "model_best_point() (ax.modelbridge.torch.torchmodelbridge method)": [[9, "ax.modelbridge.torch.TorchModelBridge.model_best_point"]], "model_bridge_class (ax.modelbridge.registry.modelregistrybase property)": [[9, "ax.modelbridge.registry.ModelRegistryBase.model_bridge_class"]], "model_class (ax.modelbridge.registry.modelregistrybase property)": [[9, "ax.modelbridge.registry.ModelRegistryBase.model_class"]], "model_class (ax.modelbridge.registry.modelsetup attribute)": [[9, "ax.modelbridge.registry.ModelSetup.model_class"]], "model_cv_kwargs (ax.modelbridge.model_spec.modelspec attribute)": [[9, "ax.modelbridge.model_spec.ModelSpec.model_cv_kwargs"]], "model_enum (ax.modelbridge.model_spec.factoryfunctionmodelspec attribute)": [[9, "ax.modelbridge.model_spec.FactoryFunctionModelSpec.model_enum"]], "model_enum (ax.modelbridge.model_spec.modelspec attribute)": [[9, "ax.modelbridge.model_spec.ModelSpec.model_enum"]], "model_gen_kwargs (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.model_gen_kwargs"]], "model_gen_kwargs (ax.modelbridge.model_spec.modelspec attribute)": [[9, "ax.modelbridge.model_spec.ModelSpec.model_gen_kwargs"]], "model_key (ax.modelbridge.model_spec.factoryfunctionmodelspec property)": [[9, "ax.modelbridge.model_spec.FactoryFunctionModelSpec.model_key"]], "model_key (ax.modelbridge.model_spec.modelspec property)": [[9, "ax.modelbridge.model_spec.ModelSpec.model_key"]], "model_kwargs (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.model_kwargs"]], "model_kwargs (ax.modelbridge.model_spec.modelspec attribute)": [[9, "ax.modelbridge.model_spec.ModelSpec.model_kwargs"]], "model_name (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.model_name"]], "model_space (ax.modelbridge.base.modelbridge property)": [[9, "ax.modelbridge.base.ModelBridge.model_space"]], "model_spec (ax.modelbridge.generation_node.generationstep property)": [[9, "ax.modelbridge.generation_node.GenerationStep.model_spec"]], "model_spec_to_gen_from (ax.modelbridge.external_generation_node.externalgenerationnode property)": [[9, "ax.modelbridge.external_generation_node.ExternalGenerationNode.model_spec_to_gen_from"]], "model_spec_to_gen_from (ax.modelbridge.generation_node.generationnode property)": [[9, "ax.modelbridge.generation_node.GenerationNode.model_spec_to_gen_from"]], "model_specs (ax.modelbridge.generation_node.generationnode attribute)": [[9, "ax.modelbridge.generation_node.GenerationNode.model_specs"]], "model_to_gen_from_name (ax.modelbridge.generation_node.generationnode property)": [[9, "ax.modelbridge.generation_node.GenerationNode.model_to_gen_from_name"]], "model_transitions (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.model_transitions"]], "modelbridge (ax.modelbridge.transforms.base.transform attribute)": [[9, "ax.modelbridge.transforms.base.Transform.modelbridge"]], "name (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.name"]], "node_name (ax.modelbridge.generation_node.generationnode property)": [[9, "ax.modelbridge.generation_node.GenerationNode.node_name"]], "node_that_generated_last_gr (ax.modelbridge.generation_node.generationnode property)": [[9, "ax.modelbridge.generation_node.GenerationNode.node_that_generated_last_gr"]], "norm_to_lognorm() (in module ax.modelbridge.transforms.log_y)": [[9, "ax.modelbridge.transforms.log_y.norm_to_lognorm"]], "not_saved_model_kwargs (ax.modelbridge.registry.modelsetup attribute)": [[9, "ax.modelbridge.registry.ModelSetup.not_saved_model_kwargs"]], "num_trials (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.num_trials"]], "observation_data_to_array() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.observation_data_to_array"]], "observation_features (ax.modelbridge.base.genresults attribute)": [[9, "ax.modelbridge.base.GenResults.observation_features"]], "observation_features_to_array() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.observation_features_to_array"]], "observed (ax.modelbridge.cross_validation.cvresult attribute)": [[9, "ax.modelbridge.cross_validation.CVResult.observed"]], "observed_hypervolume() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.observed_hypervolume"]], "observed_pareto_frontier() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.observed_pareto_frontier"]], "optimization_complete (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.optimization_complete"]], "optimization_config (ax.modelbridge.base.basegenargs attribute)": [[9, "ax.modelbridge.base.BaseGenArgs.optimization_config"]], "outcomes (ax.modelbridge.discrete.discretemodelbridge attribute)": [[9, "ax.modelbridge.discrete.DiscreteModelBridge.outcomes"]], "outcomes (ax.modelbridge.torch.torchmodelbridge attribute)": [[9, "ax.modelbridge.torch.TorchModelBridge.outcomes"]], "parameters (ax.modelbridge.discrete.discretemodelbridge attribute)": [[9, "ax.modelbridge.discrete.DiscreteModelBridge.parameters"]], "parameters (ax.modelbridge.torch.torchmodelbridge attribute)": [[9, "ax.modelbridge.torch.TorchModelBridge.parameters"]], "parameters_with_map_keys (ax.modelbridge.map_torch.maptorchmodelbridge property)": [[9, "ax.modelbridge.map_torch.MapTorchModelBridge.parameters_with_map_keys"]], "pareto_frontier() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.pareto_frontier"]], "parse_observation_features() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.parse_observation_features"]], "pending_observations (ax.modelbridge.base.basegenargs attribute)": [[9, "ax.modelbridge.base.BaseGenArgs.pending_observations"]], "pending_observations_as_array_list() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.pending_observations_as_array_list"]], "predict() (ax.modelbridge.base.modelbridge method)": [[9, "ax.modelbridge.base.ModelBridge.predict"]], "predict_at_point() (in module ax.modelbridge.prediction_utils)": [[9, "ax.modelbridge.prediction_utils.predict_at_point"]], "predict_by_features() (in module ax.modelbridge.prediction_utils)": [[9, "ax.modelbridge.prediction_utils.predict_by_features"]], "predicted (ax.modelbridge.cross_validation.cvresult attribute)": [[9, "ax.modelbridge.cross_validation.CVResult.predicted"]], "predicted_hypervolume() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.predicted_hypervolume"]], "predicted_pareto_frontier() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.predicted_pareto_frontier"]], "process_contextual_datasets() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.process_contextual_datasets"]], "randomized_onehot_round() (in module ax.modelbridge.transforms.rounding)": [[9, "ax.modelbridge.transforms.rounding.randomized_onehot_round"]], "randomized_round() (in module ax.modelbridge.transforms.rounding)": [[9, "ax.modelbridge.transforms.rounding.randomized_round"]], "randomized_round_parameters() (in module ax.modelbridge.transforms.rounding)": [[9, "ax.modelbridge.transforms.rounding.randomized_round_parameters"]], "search_space (ax.modelbridge.base.basegenargs attribute)": [[9, "ax.modelbridge.base.BaseGenArgs.search_space"]], "search_space (ax.modelbridge.discrete.discretemodelbridge attribute)": [[9, "ax.modelbridge.discrete.DiscreteModelBridge.search_space"]], "should_deduplicate (ax.modelbridge.generation_node.generationnode attribute)": [[9, "ax.modelbridge.generation_node.GenerationNode.should_deduplicate"]], "should_deduplicate (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.should_deduplicate"]], "should_transition_to_next_node() (ax.modelbridge.generation_node.generationnode method)": [[9, "ax.modelbridge.generation_node.GenerationNode.should_transition_to_next_node"]], "standard_bridge_kwargs (ax.modelbridge.registry.modelsetup attribute)": [[9, "ax.modelbridge.registry.ModelSetup.standard_bridge_kwargs"]], "status_quo (ax.modelbridge.base.modelbridge property)": [[9, "ax.modelbridge.base.ModelBridge.status_quo"]], "status_quo_data_by_trial (ax.modelbridge.base.modelbridge property)": [[9, "ax.modelbridge.base.ModelBridge.status_quo_data_by_trial"]], "statuses_to_fit (ax.modelbridge.base.modelbridge property)": [[9, "ax.modelbridge.base.ModelBridge.statuses_to_fit"]], "statuses_to_fit_map_metric (ax.modelbridge.base.modelbridge property)": [[9, "ax.modelbridge.base.ModelBridge.statuses_to_fit_map_metric"]], "statuses_to_fit_map_metric (ax.modelbridge.map_torch.maptorchmodelbridge property)": [[9, "ax.modelbridge.map_torch.MapTorchModelBridge.statuses_to_fit_map_metric"]], "step_based_gs_only() (in module ax.modelbridge.generation_strategy)": [[9, "ax.modelbridge.generation_strategy.step_based_gs_only"]], "strict_onehot_round() (in module ax.modelbridge.transforms.rounding)": [[9, "ax.modelbridge.transforms.rounding.strict_onehot_round"]], "target_lb (ax.modelbridge.transforms.centered_unit_x.centeredunitx attribute)": [[9, "ax.modelbridge.transforms.centered_unit_x.CenteredUnitX.target_lb"]], "target_lb (ax.modelbridge.transforms.map_unit_x.mapunitx attribute)": [[9, "ax.modelbridge.transforms.map_unit_x.MapUnitX.target_lb"]], "target_lb (ax.modelbridge.transforms.unit_x.unitx attribute)": [[9, "ax.modelbridge.transforms.unit_x.UnitX.target_lb"]], "target_range (ax.modelbridge.transforms.centered_unit_x.centeredunitx attribute)": [[9, "ax.modelbridge.transforms.centered_unit_x.CenteredUnitX.target_range"]], "target_range (ax.modelbridge.transforms.map_unit_x.mapunitx attribute)": [[9, "ax.modelbridge.transforms.map_unit_x.MapUnitX.target_range"]], "target_range (ax.modelbridge.transforms.unit_x.unitx attribute)": [[9, "ax.modelbridge.transforms.unit_x.UnitX.target_range"]], "tconfig_from_mt_experiment() (in module ax.modelbridge.transforms.convert_metric_names)": [[9, "ax.modelbridge.transforms.convert_metric_names.tconfig_from_mt_experiment"]], "training_in_design (ax.modelbridge.base.modelbridge property)": [[9, "ax.modelbridge.base.ModelBridge.training_in_design"]], "transform() (ax.modelbridge.transforms.one_hot.onehotencoder method)": [[9, "ax.modelbridge.transforms.one_hot.OneHotEncoder.transform"]], "transform_callback() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.transform_callback"]], "transform_choice_values() (in module ax.modelbridge.transforms.choice_encode)": [[9, "ax.modelbridge.transforms.choice_encode.transform_choice_values"]], "transform_observation_features() (ax.modelbridge.base.modelbridge method)": [[9, "ax.modelbridge.base.ModelBridge.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.base.transform method)": [[9, "ax.modelbridge.transforms.base.Transform.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.cast.cast method)": [[9, "ax.modelbridge.transforms.cast.Cast.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.choice_encode.choicetonumericchoice method)": [[9, "ax.modelbridge.transforms.choice_encode.ChoiceToNumericChoice.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.int_to_float.inttofloat method)": [[9, "ax.modelbridge.transforms.int_to_float.IntToFloat.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.log.log method)": [[9, "ax.modelbridge.transforms.log.Log.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.logit.logit method)": [[9, "ax.modelbridge.transforms.logit.Logit.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.metrics_as_task.metricsastask method)": [[9, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.one_hot.onehot method)": [[9, "ax.modelbridge.transforms.one_hot.OneHot.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.remove_fixed.removefixed method)": [[9, "ax.modelbridge.transforms.remove_fixed.RemoveFixed.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.search_space_to_choice.searchspacetochoice method)": [[9, "ax.modelbridge.transforms.search_space_to_choice.SearchSpaceToChoice.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.time_as_feature.timeasfeature method)": [[9, "ax.modelbridge.transforms.time_as_feature.TimeAsFeature.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.trial_as_task.trialastask method)": [[9, "ax.modelbridge.transforms.trial_as_task.TrialAsTask.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.unit_x.unitx method)": [[9, "ax.modelbridge.transforms.unit_x.UnitX.transform_observation_features"]], "transform_observations() (ax.modelbridge.base.modelbridge method)": [[9, "ax.modelbridge.base.ModelBridge.transform_observations"]], "transform_observations() (ax.modelbridge.transforms.base.transform method)": [[9, "ax.modelbridge.transforms.base.Transform.transform_observations"]], "transform_observations() (ax.modelbridge.transforms.merge_repeated_measurements.mergerepeatedmeasurements method)": [[9, "ax.modelbridge.transforms.merge_repeated_measurements.MergeRepeatedMeasurements.transform_observations"]], "transform_observations() (ax.modelbridge.transforms.metrics_as_task.metricsastask method)": [[9, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask.transform_observations"]], "transform_observations() (ax.modelbridge.transforms.relativize.baserelativize method)": [[9, "ax.modelbridge.transforms.relativize.BaseRelativize.transform_observations"]], "transform_observations() (ax.modelbridge.transforms.stratified_standardize_y.stratifiedstandardizey method)": [[9, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY.transform_observations"]], "transform_optimization_config() (ax.modelbridge.transforms.base.transform method)": [[9, "ax.modelbridge.transforms.base.Transform.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.derelativize.derelativize method)": [[9, "ax.modelbridge.transforms.derelativize.Derelativize.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.log_y.logy method)": [[9, "ax.modelbridge.transforms.log_y.LogY.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.power_transform_y.powertransformy method)": [[9, "ax.modelbridge.transforms.power_transform_y.PowerTransformY.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.relativize.baserelativize method)": [[9, "ax.modelbridge.transforms.relativize.BaseRelativize.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.standardize_y.standardizey method)": [[9, "ax.modelbridge.transforms.standardize_y.StandardizeY.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.stratified_standardize_y.stratifiedstandardizey method)": [[9, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY.transform_optimization_config"]], "transform_search_space() (ax.modelbridge.transforms.base.transform method)": [[9, "ax.modelbridge.transforms.base.Transform.transform_search_space"]], "transform_search_space() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.transform_search_space"]], "transforms (ax.modelbridge.registry.modelsetup attribute)": [[9, "ax.modelbridge.registry.ModelSetup.transforms"]], "transition_criteria (ax.modelbridge.generation_node.generationnode property)": [[9, "ax.modelbridge.generation_node.GenerationNode.transition_criteria"]], "transition_edges (ax.modelbridge.generation_node.generationnode property)": [[9, "ax.modelbridge.generation_node.GenerationNode.transition_edges"]], "trials_as_df (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.trials_as_df"]], "trials_from_node (ax.modelbridge.generation_node.generationnode property)": [[9, "ax.modelbridge.generation_node.GenerationNode.trials_from_node"]], "untransform_observation_features() (ax.modelbridge.transforms.base.transform method)": [[9, "ax.modelbridge.transforms.base.Transform.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.cast.cast method)": [[9, "ax.modelbridge.transforms.cast.Cast.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.choice_encode.choicetonumericchoice method)": [[9, "ax.modelbridge.transforms.choice_encode.ChoiceToNumericChoice.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.int_to_float.inttofloat method)": [[9, "ax.modelbridge.transforms.int_to_float.IntToFloat.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.log.log method)": [[9, "ax.modelbridge.transforms.log.Log.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.logit.logit method)": [[9, "ax.modelbridge.transforms.logit.Logit.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.map_unit_x.mapunitx method)": [[9, "ax.modelbridge.transforms.map_unit_x.MapUnitX.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.metrics_as_task.metricsastask method)": [[9, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.one_hot.onehot method)": [[9, "ax.modelbridge.transforms.one_hot.OneHot.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.remove_fixed.removefixed method)": [[9, "ax.modelbridge.transforms.remove_fixed.RemoveFixed.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.search_space_to_choice.searchspacetochoice method)": [[9, "ax.modelbridge.transforms.search_space_to_choice.SearchSpaceToChoice.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.time_as_feature.timeasfeature method)": [[9, "ax.modelbridge.transforms.time_as_feature.TimeAsFeature.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.trial_as_task.trialastask method)": [[9, "ax.modelbridge.transforms.trial_as_task.TrialAsTask.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.unit_x.unitx method)": [[9, "ax.modelbridge.transforms.unit_x.UnitX.untransform_observation_features"]], "untransform_observations() (ax.modelbridge.transforms.base.transform method)": [[9, "ax.modelbridge.transforms.base.Transform.untransform_observations"]], "untransform_observations() (ax.modelbridge.transforms.convert_metric_names.convertmetricnames method)": [[9, "ax.modelbridge.transforms.convert_metric_names.ConvertMetricNames.untransform_observations"]], "untransform_observations() (ax.modelbridge.transforms.metrics_as_task.metricsastask method)": [[9, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask.untransform_observations"]], "untransform_observations() (ax.modelbridge.transforms.relativize.baserelativize method)": [[9, "ax.modelbridge.transforms.relativize.BaseRelativize.untransform_observations"]], "untransform_observations() (ax.modelbridge.transforms.stratified_standardize_y.stratifiedstandardizey method)": [[9, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY.untransform_observations"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.base.transform method)": [[9, "ax.modelbridge.transforms.base.Transform.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.derelativize.derelativize method)": [[9, "ax.modelbridge.transforms.derelativize.Derelativize.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.log_y.logy method)": [[9, "ax.modelbridge.transforms.log_y.LogY.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.power_transform_y.powertransformy method)": [[9, "ax.modelbridge.transforms.power_transform_y.PowerTransformY.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.relativize.baserelativize method)": [[9, "ax.modelbridge.transforms.relativize.BaseRelativize.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.standardize_y.standardizey method)": [[9, "ax.modelbridge.transforms.standardize_y.StandardizeY.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.stratified_standardize_y.stratifiedstandardizey method)": [[9, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY.untransform_outcome_constraints"]], "unwrap_observation_data() (in module ax.modelbridge.base)": [[9, "ax.modelbridge.base.unwrap_observation_data"]], "update() (ax.modelbridge.base.modelbridge method)": [[9, "ax.modelbridge.base.ModelBridge.update"]], "update_generator_state() (ax.modelbridge.external_generation_node.externalgenerationnode method)": [[9, "ax.modelbridge.external_generation_node.ExternalGenerationNode.update_generator_state"]], "use_update (ax.modelbridge.generation_node.generationstep attribute)": [[9, "ax.modelbridge.generation_node.GenerationStep.use_update"]], "uses_non_registered_models (ax.modelbridge.generation_strategy.generationstrategy property)": [[9, "ax.modelbridge.generation_strategy.GenerationStrategy.uses_non_registered_models"]], "validate_and_apply_final_transform() (in module ax.modelbridge.modelbridge_utils)": [[9, "ax.modelbridge.modelbridge_utils.validate_and_apply_final_transform"]], "validate_optimization_config() (in module ax.modelbridge.torch)": [[9, "ax.modelbridge.torch.validate_optimization_config"]], "view_defaults() (ax.modelbridge.registry.modelregistrybase method)": [[9, "ax.modelbridge.registry.ModelRegistryBase.view_defaults"]], "view_kwargs() (ax.modelbridge.registry.modelregistrybase method)": [[9, "ax.modelbridge.registry.ModelRegistryBase.view_kwargs"]], "weights (ax.modelbridge.base.genresults attribute)": [[9, "ax.modelbridge.base.GenResults.weights"]], "acquisition (class in ax.models.torch.botorch_modular.acquisition)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition"]], "botorchmodel (class in ax.models.torch.botorch_modular.model)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel"]], "botorchmodel (class in ax.models.torch.botorch)": [[10, "ax.models.torch.botorch.BotorchModel"]], "discretemodel (class in ax.models.discrete_base)": [[10, "ax.models.discrete_base.DiscreteModel"]], "empiricalbayesthompsonsampler (class in ax.models.discrete.eb_thompson)": [[10, "ax.models.discrete.eb_thompson.EmpiricalBayesThompsonSampler"]], "fullfactorialgenerator (class in ax.models.discrete.full_factorial)": [[10, "ax.models.discrete.full_factorial.FullFactorialGenerator"]], "knowledgegradient (class in ax.models.torch.botorch_kg)": [[10, "ax.models.torch.botorch_kg.KnowledgeGradient"]], "l1_norm_func() (in module ax.models.torch.botorch_modular.sebo)": [[10, "ax.models.torch.botorch_modular.sebo.L1_norm_func"]], "lceabo (class in ax.models.torch.cbo_lcea)": [[10, "ax.models.torch.cbo_lcea.LCEABO"]], "lcembo (class in ax.models.torch.cbo_lcem)": [[10, "ax.models.torch.cbo_lcem.LCEMBO"]], "maxvalueentropysearch (class in ax.models.torch.botorch_mes)": [[10, "ax.models.torch.botorch_mes.MaxValueEntropySearch"]], "model (class in ax.models.base)": [[10, "ax.models.base.Model"]], "multiobjectivebotorchmodel (class in ax.models.torch.botorch_moo)": [[10, "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel"]], "randomforest (class in ax.models.torch.randomforest)": [[10, "ax.models.torch.randomforest.RandomForest"]], "randommodel (class in ax.models.random.base)": [[10, "ax.models.random.base.RandomModel"]], "sacbo (class in ax.models.torch.cbo_sac)": [[10, "ax.models.torch.cbo_sac.SACBO"]], "seboacquisition (class in ax.models.torch.botorch_modular.sebo)": [[10, "ax.models.torch.botorch_modular.sebo.SEBOAcquisition"]], "scalematernkernel (class in ax.models.torch.botorch_modular.kernels)": [[10, "ax.models.torch.botorch_modular.kernels.ScaleMaternKernel"]], "sobolgenerator (class in ax.models.random.sobol)": [[10, "ax.models.random.sobol.SobolGenerator"]], "subsetmodeldata (class in ax.models.torch.utils)": [[10, "ax.models.torch.utils.SubsetModelData"]], "surrogate (class in ax.models.torch.botorch_modular.surrogate)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate"]], "surrogatespec (class in ax.models.torch.botorch_modular.model)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec"]], "tacqfconstructor (class in ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.TAcqfConstructor"]], "temporalkernel (class in ax.models.torch.botorch_modular.kernels)": [[10, "ax.models.torch.botorch_modular.kernels.TemporalKernel"]], "thompsonsampler (class in ax.models.discrete.thompson)": [[10, "ax.models.discrete.thompson.ThompsonSampler"]], "torchgenresults (class in ax.models.torch_base)": [[10, "ax.models.torch_base.TorchGenResults"]], "torchmodel (class in ax.models.torch_base)": [[10, "ax.models.torch_base.TorchModel"]], "torchmodellike (class in ax.models.model_utils)": [[10, "ax.models.model_utils.TorchModelLike"]], "torchoptconfig (class in ax.models.torch_base)": [[10, "ax.models.torch_base.TorchOptConfig"]], "uniformgenerator (class in ax.models.random.uniform)": [[10, "ax.models.random.uniform.UniformGenerator"]], "winsorizationconfig (class in ax.models.winsorization_config)": [[10, "ax.models.winsorization_config.WinsorizationConfig"]], "xs (ax.models.torch.botorch.botorchmodel attribute)": [[10, "ax.models.torch.botorch.BotorchModel.Xs"]], "xs (ax.models.torch.botorch_modular.model.botorchmodel property)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.Xs"]], "xs (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.Xs"]], "xs (ax.models.torch.botorch_moo.multiobjectivebotorchmodel attribute)": [[10, "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel.Xs"]], "ys (ax.models.torch.botorch.botorchmodel attribute)": [[10, "ax.models.torch.botorch.BotorchModel.Ys"]], "ys (ax.models.torch.botorch_moo.multiobjectivebotorchmodel attribute)": [[10, "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel.Ys"]], "yvars (ax.models.torch.botorch.botorchmodel attribute)": [[10, "ax.models.torch.botorch.BotorchModel.Yvars"]], "yvars (ax.models.torch.botorch_moo.multiobjectivebotorchmodel attribute)": [[10, "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel.Yvars"]], "acqf (ax.models.torch.botorch_modular.acquisition.acquisition attribute)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.acqf"]], "acquisition_class (ax.models.torch.botorch_modular.model.botorchmodel attribute)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.acquisition_class"]], "acquisition_options (ax.models.torch.botorch_modular.model.botorchmodel attribute)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.acquisition_options"]], "add_fixed_features() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.add_fixed_features"]], "allow_batched_models (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.allow_batched_models"]], "as_array() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.as_array"]], "ax.models": [[10, "module-ax.models"]], "ax.models.base": [[10, "module-ax.models.base"]], "ax.models.discrete.eb_thompson": [[10, "module-ax.models.discrete.eb_thompson"]], "ax.models.discrete.full_factorial": [[10, "module-ax.models.discrete.full_factorial"]], "ax.models.discrete.thompson": [[10, "module-ax.models.discrete.thompson"]], "ax.models.discrete_base": [[10, "module-ax.models.discrete_base"]], "ax.models.model_utils": [[10, "module-ax.models.model_utils"]], "ax.models.random.base": [[10, "module-ax.models.random.base"]], "ax.models.random.sobol": [[10, "module-ax.models.random.sobol"]], "ax.models.random.uniform": [[10, "module-ax.models.random.uniform"]], "ax.models.torch.botorch": [[10, "module-ax.models.torch.botorch"]], "ax.models.torch.botorch_defaults": [[10, "module-ax.models.torch.botorch_defaults"]], "ax.models.torch.botorch_kg": [[10, "module-ax.models.torch.botorch_kg"]], "ax.models.torch.botorch_mes": [[10, "module-ax.models.torch.botorch_mes"]], "ax.models.torch.botorch_modular.acquisition": [[10, "module-ax.models.torch.botorch_modular.acquisition"]], "ax.models.torch.botorch_modular.input_constructors.covar_modules": [[10, "module-ax.models.torch.botorch_modular.input_constructors.covar_modules"]], "ax.models.torch.botorch_modular.input_constructors.input_transforms": [[10, "module-ax.models.torch.botorch_modular.input_constructors.input_transforms"]], "ax.models.torch.botorch_modular.input_constructors.outcome_transform": [[10, "module-ax.models.torch.botorch_modular.input_constructors.outcome_transform"]], "ax.models.torch.botorch_modular.kernels": [[10, "module-ax.models.torch.botorch_modular.kernels"]], "ax.models.torch.botorch_modular.model": [[10, "module-ax.models.torch.botorch_modular.model"]], "ax.models.torch.botorch_modular.optimizer_argparse": [[10, "module-ax.models.torch.botorch_modular.optimizer_argparse"]], "ax.models.torch.botorch_modular.sebo": [[10, "module-ax.models.torch.botorch_modular.sebo"]], "ax.models.torch.botorch_modular.surrogate": [[10, "module-ax.models.torch.botorch_modular.surrogate"]], "ax.models.torch.botorch_modular.utils": [[10, "module-ax.models.torch.botorch_modular.utils"]], "ax.models.torch.botorch_moo": [[10, "module-ax.models.torch.botorch_moo"]], "ax.models.torch.botorch_moo_defaults": [[10, "module-ax.models.torch.botorch_moo_defaults"]], "ax.models.torch.cbo_lcea": [[10, "module-ax.models.torch.cbo_lcea"]], "ax.models.torch.cbo_lcem": [[10, "module-ax.models.torch.cbo_lcem"]], "ax.models.torch.cbo_sac": [[10, "module-ax.models.torch.cbo_sac"]], "ax.models.torch.randomforest": [[10, "module-ax.models.torch.randomforest"]], "ax.models.torch.utils": [[10, "module-ax.models.torch.utils"]], "ax.models.torch_base": [[10, "module-ax.models.torch_base"]], "ax.models.types": [[10, "module-ax.models.types"]], "ax.models.winsorization_config": [[10, "module-ax.models.winsorization_config"]], "best_in_sample_point() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.best_in_sample_point"]], "best_in_sample_point() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.best_in_sample_point"]], "best_observed_point() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.best_observed_point"]], "best_out_of_sample_point() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.best_out_of_sample_point"]], "best_point() (ax.models.discrete_base.discretemodel method)": [[10, "ax.models.discrete_base.DiscreteModel.best_point"]], "best_point() (ax.models.torch.botorch.botorchmodel method)": [[10, "ax.models.torch.botorch.BotorchModel.best_point"]], "best_point() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.best_point"]], "best_point() (ax.models.torch.cbo_lcea.lceabo method)": [[10, "ax.models.torch.cbo_lcea.LCEABO.best_point"]], "best_point() (ax.models.torch_base.torchmodel method)": [[10, "ax.models.torch_base.TorchModel.best_point"]], "botorch_acqf_class (ax.models.torch.botorch_modular.acquisition.acquisition property)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.botorch_acqf_class"]], "botorch_acqf_class (ax.models.torch.botorch_modular.model.botorchmodel property)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.botorch_acqf_class"]], "botorch_model_class (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.botorch_model_class"]], "botorch_model_kwargs (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.botorch_model_kwargs"]], "candidate_metadata (ax.models.torch_base.torchgenresults attribute)": [[10, "ax.models.torch_base.TorchGenResults.candidate_metadata"]], "check_duplicate() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.check_duplicate"]], "check_outcome_dataset_match() (in module ax.models.torch.botorch_modular.utils)": [[10, "ax.models.torch.botorch_modular.utils.check_outcome_dataset_match"]], "check_param_constraints() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.check_param_constraints"]], "choose_botorch_acqf_class() (in module ax.models.torch.botorch_modular.utils)": [[10, "ax.models.torch.botorch_modular.utils.choose_botorch_acqf_class"]], "choose_model_class() (in module ax.models.torch.botorch_modular.utils)": [[10, "ax.models.torch.botorch_modular.utils.choose_model_class"]], "clamp_candidates() (in module ax.models.torch.botorch_modular.sebo)": [[10, "ax.models.torch.botorch_modular.sebo.clamp_candidates"]], "clone_reset() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.clone_reset"]], "compute_diagnostics() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.compute_diagnostics"]], "compute_model_dependencies() (ax.models.torch.botorch_modular.acquisition.acquisition method)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.compute_model_dependencies"]], "construct_acquisition_and_optimizer_options() (in module ax.models.torch.botorch_modular.utils)": [[10, "ax.models.torch.botorch_modular.utils.construct_acquisition_and_optimizer_options"]], "convert_to_block_design() (in module ax.models.torch.botorch_modular.utils)": [[10, "ax.models.torch.botorch_modular.utils.convert_to_block_design"]], "covar_module_class (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.covar_module_class"]], "covar_module_kwargs (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.covar_module_kwargs"]], "cross_validate() (ax.models.discrete_base.discretemodel method)": [[10, "ax.models.discrete_base.DiscreteModel.cross_validate"]], "cross_validate() (ax.models.torch.botorch.botorchmodel method)": [[10, "ax.models.torch.botorch.BotorchModel.cross_validate"]], "cross_validate() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.cross_validate"]], "cross_validate() (ax.models.torch.randomforest.randomforest method)": [[10, "ax.models.torch.randomforest.RandomForest.cross_validate"]], "cross_validate() (ax.models.torch_base.torchmodel method)": [[10, "ax.models.torch_base.TorchModel.cross_validate"]], "deduplicate (ax.models.random.base.randommodel attribute)": [[10, "ax.models.random.base.RandomModel.deduplicate"]], "deserialize_state() (ax.models.base.model class method)": [[10, "ax.models.base.Model.deserialize_state"]], "device (ax.models.torch.botorch_modular.acquisition.acquisition property)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.device"]], "device (ax.models.torch.botorch_modular.model.botorchmodel property)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.device"]], "device (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.device"]], "device (ax.models.torch_base.torchmodel attribute)": [[10, "ax.models.torch_base.TorchModel.device"]], "dtype (ax.models.torch.botorch_modular.acquisition.acquisition property)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.dtype"]], "dtype (ax.models.torch.botorch_modular.model.botorchmodel property)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.dtype"]], "dtype (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.dtype"]], "dtype (ax.models.torch_base.torchmodel attribute)": [[10, "ax.models.torch_base.TorchModel.dtype"]], "engine (ax.models.random.sobol.sobolgenerator property)": [[10, "ax.models.random.sobol.SobolGenerator.engine"]], "enumerate_discrete_combinations() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.enumerate_discrete_combinations"]], "evaluate() (ax.models.torch.botorch_modular.acquisition.acquisition method)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.evaluate"]], "evaluate_acquisition_function() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.evaluate_acquisition_function"]], "evaluate_acquisition_function() (ax.models.torch_base.torchmodel method)": [[10, "ax.models.torch_base.TorchModel.evaluate_acquisition_function"]], "fallback_to_sample_polytope (ax.models.random.base.randommodel attribute)": [[10, "ax.models.random.base.RandomModel.fallback_to_sample_polytope"]], "feature_importances() (ax.models.base.model method)": [[10, "ax.models.base.Model.feature_importances"]], "feature_importances() (ax.models.torch.botorch.botorchmodel method)": [[10, "ax.models.torch.botorch.BotorchModel.feature_importances"]], "feature_importances() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.feature_importances"]], "filter_constraints_and_fixed_features() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.filter_constraints_and_fixed_features"]], "fit() (ax.models.discrete.thompson.thompsonsampler method)": [[10, "ax.models.discrete.thompson.ThompsonSampler.fit"]], "fit() (ax.models.discrete_base.discretemodel method)": [[10, "ax.models.discrete_base.DiscreteModel.fit"]], "fit() (ax.models.torch.botorch.botorchmodel method)": [[10, "ax.models.torch.botorch.BotorchModel.fit"]], "fit() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.fit"]], "fit() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.fit"]], "fit() (ax.models.torch.cbo_lcea.lceabo method)": [[10, "ax.models.torch.cbo_lcea.LCEABO.fit"]], "fit() (ax.models.torch.cbo_sac.sacbo method)": [[10, "ax.models.torch.cbo_sac.SACBO.fit"]], "fit() (ax.models.torch.randomforest.randomforest method)": [[10, "ax.models.torch.randomforest.RandomForest.fit"]], "fit() (ax.models.torch_base.torchmodel method)": [[10, "ax.models.torch_base.TorchModel.fit"]], "fit_botorch_model() (in module ax.models.torch.botorch_modular.utils)": [[10, "ax.models.torch.botorch_modular.utils.fit_botorch_model"]], "fit_out_of_design (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.fit_out_of_design"]], "fixed_features (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.fixed_features"], [10, "id0"]], "gen() (ax.models.discrete.full_factorial.fullfactorialgenerator method)": [[10, "ax.models.discrete.full_factorial.FullFactorialGenerator.gen"]], "gen() (ax.models.discrete.thompson.thompsonsampler method)": [[10, "ax.models.discrete.thompson.ThompsonSampler.gen"]], "gen() (ax.models.discrete_base.discretemodel method)": [[10, "ax.models.discrete_base.DiscreteModel.gen"]], "gen() (ax.models.random.base.randommodel method)": [[10, "ax.models.random.base.RandomModel.gen"]], "gen() (ax.models.random.sobol.sobolgenerator method)": [[10, "ax.models.random.sobol.SobolGenerator.gen"]], "gen() (ax.models.torch.botorch.botorchmodel method)": [[10, "ax.models.torch.botorch.BotorchModel.gen"]], "gen() (ax.models.torch.botorch_kg.knowledgegradient method)": [[10, "ax.models.torch.botorch_kg.KnowledgeGradient.gen"]], "gen() (ax.models.torch.botorch_mes.maxvalueentropysearch method)": [[10, "ax.models.torch.botorch_mes.MaxValueEntropySearch.gen"]], "gen() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.gen"]], "gen() (ax.models.torch.botorch_moo.multiobjectivebotorchmodel method)": [[10, "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel.gen"]], "gen() (ax.models.torch_base.torchmodel method)": [[10, "ax.models.torch_base.TorchModel.gen"]], "gen_metadata (ax.models.torch_base.torchgenresults attribute)": [[10, "ax.models.torch_base.TorchGenResults.gen_metadata"]], "generate_model_space_decomposition() (in module ax.models.torch.cbo_sac)": [[10, "ax.models.torch.cbo_sac.generate_model_space_decomposition"]], "generated_points (ax.models.random.base.randommodel attribute)": [[10, "ax.models.random.base.RandomModel.generated_points"]], "get_ehvi() (in module ax.models.torch.botorch_moo_defaults)": [[10, "ax.models.torch.botorch_moo_defaults.get_EHVI"]], "get_nehvi() (in module ax.models.torch.botorch_moo_defaults)": [[10, "ax.models.torch.botorch_moo_defaults.get_NEHVI"]], "get_nei() (in module ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.get_NEI"]], "get_acqf() (in module ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.get_acqf"]], "get_and_fit_model() (ax.models.torch.cbo_lcea.lceabo method)": [[10, "ax.models.torch.cbo_lcea.LCEABO.get_and_fit_model"]], "get_and_fit_model() (ax.models.torch.cbo_lcem.lcembo method)": [[10, "ax.models.torch.cbo_lcem.LCEMBO.get_and_fit_model"]], "get_and_fit_model() (ax.models.torch.cbo_sac.sacbo method)": [[10, "ax.models.torch.cbo_sac.SACBO.get_and_fit_model"]], "get_and_fit_model() (in module ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.get_and_fit_model"]], "get_batch_initial_conditions() (in module ax.models.torch.botorch_modular.sebo)": [[10, "ax.models.torch.botorch_modular.sebo.get_batch_initial_conditions"]], "get_botorch_objective_and_transform() (ax.models.torch.botorch_modular.acquisition.acquisition method)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.get_botorch_objective_and_transform"]], "get_botorch_objective_and_transform() (in module ax.models.torch.utils)": [[10, "ax.models.torch.utils.get_botorch_objective_and_transform"]], "get_feature_importances_from_botorch_model() (in module ax.models.torch.botorch)": [[10, "ax.models.torch.botorch.get_feature_importances_from_botorch_model"]], "get_map_model() (in module ax.models.torch.cbo_lcea)": [[10, "ax.models.torch.cbo_lcea.get_map_model"]], "get_observed() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.get_observed"]], "get_out_of_sample_best_point_acqf() (in module ax.models.torch.utils)": [[10, "ax.models.torch.utils.get_out_of_sample_best_point_acqf"]], "get_post_processing_func() (in module ax.models.torch.botorch_modular.utils)": [[10, "ax.models.torch.botorch_modular.utils.get_post_processing_func"]], "get_qei() (in module ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.get_qEI"]], "get_qlogehvi() (in module ax.models.torch.botorch_moo_defaults)": [[10, "ax.models.torch.botorch_moo_defaults.get_qLogEHVI"]], "get_qlogei() (in module ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.get_qLogEI"]], "get_qlognehvi() (in module ax.models.torch.botorch_moo_defaults)": [[10, "ax.models.torch.botorch_moo_defaults.get_qLogNEHVI"]], "get_qlognei() (in module ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.get_qLogNEI"]], "get_rounding_func() (in module ax.models.torch.botorch)": [[10, "ax.models.torch.botorch.get_rounding_func"]], "get_subset_datasets() (in module ax.models.torch.botorch_modular.utils)": [[10, "ax.models.torch.botorch_modular.utils.get_subset_datasets"]], "get_warping_transform() (in module ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.get_warping_transform"]], "get_weighted_mc_objective_and_objective_thresholds() (in module ax.models.torch.botorch_moo_defaults)": [[10, "ax.models.torch.botorch_moo_defaults.get_weighted_mc_objective_and_objective_thresholds"]], "indices (ax.models.torch.utils.subsetmodeldata attribute)": [[10, "ax.models.torch.utils.SubsetModelData.indices"]], "infer_objective_thresholds() (in module ax.models.torch.botorch_moo_defaults)": [[10, "ax.models.torch.botorch_moo_defaults.infer_objective_thresholds"]], "init_engine() (ax.models.random.sobol.sobolgenerator method)": [[10, "ax.models.random.sobol.SobolGenerator.init_engine"]], "init_position (ax.models.random.sobol.sobolgenerator attribute)": [[10, "ax.models.random.sobol.SobolGenerator.init_position"]], "input_transform_classes (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.input_transform_classes"]], "input_transform_options (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.input_transform_options"]], "is_moo (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.is_moo"], [10, "id1"]], "is_noiseless() (in module ax.models.torch.utils)": [[10, "ax.models.torch.utils.is_noiseless"]], "likelihood_class (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.likelihood_class"]], "likelihood_kwargs (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.likelihood_kwargs"]], "linear_constraints (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.linear_constraints"], [10, "id2"]], "lower_boundary (ax.models.winsorization_config.winsorizationconfig attribute)": [[10, "ax.models.winsorization_config.WinsorizationConfig.lower_boundary"]], "lower_quantile_margin (ax.models.winsorization_config.winsorizationconfig attribute)": [[10, "ax.models.winsorization_config.WinsorizationConfig.lower_quantile_margin"]], "mk_discrete_choices() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.mk_discrete_choices"]], "mll_class (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.mll_class"]], "mll_kwargs (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.mll_kwargs"]], "model (ax.models.torch.botorch.botorchmodel property)": [[10, "ax.models.torch.botorch.BotorchModel.model"]], "model (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.model"]], "model (ax.models.torch.cbo_lcea.lceabo property)": [[10, "ax.models.torch.cbo_lcea.LCEABO.model"]], "model (ax.models.torch.utils.subsetmodeldata attribute)": [[10, "ax.models.torch.utils.SubsetModelData.model"]], "model_gen_options (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.model_gen_options"], [10, "id3"]], "normalize_indices() (in module ax.models.torch.utils)": [[10, "ax.models.torch.utils.normalize_indices"]], "objective_thresholds (ax.models.torch.botorch_modular.acquisition.acquisition property)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.objective_thresholds"]], "objective_thresholds (ax.models.torch.utils.subsetmodeldata attribute)": [[10, "ax.models.torch.utils.SubsetModelData.objective_thresholds"]], "objective_thresholds (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.objective_thresholds"], [10, "id4"]], "objective_weights (ax.models.torch.botorch_modular.acquisition.acquisition property)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.objective_weights"]], "objective_weights (ax.models.torch.utils.subsetmodeldata attribute)": [[10, "ax.models.torch.utils.SubsetModelData.objective_weights"]], "objective_weights (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.objective_weights"], [10, "id5"]], "opt_config_metrics (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.opt_config_metrics"], [10, "id6"]], "optimize() (ax.models.torch.botorch_modular.acquisition.acquisition method)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.optimize"]], "optimize() (ax.models.torch.botorch_modular.sebo.seboacquisition method)": [[10, "ax.models.torch.botorch_modular.sebo.SEBOAcquisition.optimize"]], "options (ax.models.torch.botorch_modular.acquisition.acquisition attribute)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.options"]], "outcome_constraints (ax.models.torch.utils.subsetmodeldata attribute)": [[10, "ax.models.torch.utils.SubsetModelData.outcome_constraints"]], "outcome_constraints (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.outcome_constraints"], [10, "id7"]], "outcome_transform_classes (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.outcome_transform_classes"]], "outcome_transform_options (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.outcome_transform_options"]], "outcomes (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[10, "ax.models.torch.botorch_modular.model.SurrogateSpec.outcomes"]], "outcomes (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.outcomes"]], "outcomes_by_surrogate_label (ax.models.torch.botorch_modular.model.botorchmodel property)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.outcomes_by_surrogate_label"]], "output_order (ax.models.torch.botorch_modular.model.botorchmodel property)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.output_order"]], "pareto_frontier() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.pareto_frontier"]], "pareto_frontier_evaluator() (in module ax.models.torch.botorch_moo_defaults)": [[10, "ax.models.torch.botorch_moo_defaults.pareto_frontier_evaluator"]], "pending_observations (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.pending_observations"], [10, "id8"]], "pick_best_out_of_sample_point_acqf_class() (in module ax.models.torch.utils)": [[10, "ax.models.torch.utils.pick_best_out_of_sample_point_acqf_class"]], "points (ax.models.torch_base.torchgenresults attribute)": [[10, "ax.models.torch_base.TorchGenResults.points"]], "predict() (ax.models.discrete.thompson.thompsonsampler method)": [[10, "ax.models.discrete.thompson.ThompsonSampler.predict"]], "predict() (ax.models.discrete_base.discretemodel method)": [[10, "ax.models.discrete_base.DiscreteModel.predict"]], "predict() (ax.models.model_utils.torchmodellike method)": [[10, "ax.models.model_utils.TorchModelLike.predict"]], "predict() (ax.models.torch.botorch.botorchmodel method)": [[10, "ax.models.torch.botorch.BotorchModel.predict"]], "predict() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.predict"]], "predict() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.predict"]], "predict() (ax.models.torch.randomforest.randomforest method)": [[10, "ax.models.torch.randomforest.RandomForest.predict"]], "predict() (ax.models.torch_base.torchmodel method)": [[10, "ax.models.torch_base.TorchModel.predict"]], "predict_from_model() (in module ax.models.torch.utils)": [[10, "ax.models.torch.utils.predict_from_model"]], "predict_from_surrogate() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.predict_from_surrogate"]], "randomize_objective_weights() (in module ax.models.torch.utils)": [[10, "ax.models.torch.utils.randomize_objective_weights"]], "recommend_best_observed_point() (in module ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.recommend_best_observed_point"]], "recommend_best_out_of_sample_point() (in module ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.recommend_best_out_of_sample_point"]], "rejection_sample() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.rejection_sample"]], "risk_measure (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.risk_measure"], [10, "id9"]], "rounding_func (ax.models.torch_base.torchoptconfig attribute)": [[10, "ax.models.torch_base.TorchOptConfig.rounding_func"], [10, "id10"]], "scipy_optimizer() (in module ax.models.torch.botorch_defaults)": [[10, "ax.models.torch.botorch_defaults.scipy_optimizer"]], "scipy_optimizer_list() (in module ax.models.torch.botorch_moo_defaults)": [[10, "ax.models.torch.botorch_moo_defaults.scipy_optimizer_list"]], "scramble (ax.models.random.sobol.sobolgenerator attribute)": [[10, "ax.models.random.sobol.SobolGenerator.scramble"]], "search_space_digest (ax.models.torch.botorch.botorchmodel property)": [[10, "ax.models.torch.botorch.BotorchModel.search_space_digest"]], "search_space_digest (ax.models.torch.botorch_modular.model.botorchmodel property)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.search_space_digest"]], "seed (ax.models.random.base.randommodel attribute)": [[10, "ax.models.random.base.RandomModel.seed"]], "serialize_state() (ax.models.base.model class method)": [[10, "ax.models.base.Model.serialize_state"]], "single_surrogate_only() (in module ax.models.torch.botorch_modular.model)": [[10, "ax.models.torch.botorch_modular.model.single_surrogate_only"]], "subset_model() (in module ax.models.torch.utils)": [[10, "ax.models.torch.utils.subset_model"]], "subset_state_dict() (in module ax.models.torch.botorch_modular.utils)": [[10, "ax.models.torch.botorch_modular.utils.subset_state_dict"]], "surrogate (ax.models.torch.botorch_modular.model.botorchmodel property)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.surrogate"]], "surrogate_specs (ax.models.torch.botorch_modular.model.botorchmodel attribute)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.surrogate_specs"]], "surrogates (ax.models.torch.botorch_modular.acquisition.acquisition attribute)": [[10, "ax.models.torch.botorch_modular.acquisition.Acquisition.surrogates"]], "surrogates (ax.models.torch.botorch_modular.model.botorchmodel property)": [[10, "ax.models.torch.botorch_modular.model.BoTorchModel.surrogates"]], "tensor_callable_to_array_callable() (in module ax.models.torch.utils)": [[10, "ax.models.torch.utils.tensor_callable_to_array_callable"]], "training_data (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[10, "ax.models.torch.botorch_modular.surrogate.Surrogate.training_data"]], "tunable_feature_indices() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.tunable_feature_indices"]], "update() (ax.models.torch_base.torchmodel method)": [[10, "ax.models.torch_base.TorchModel.update"]], "upper_boundary (ax.models.winsorization_config.winsorizationconfig attribute)": [[10, "ax.models.winsorization_config.WinsorizationConfig.upper_boundary"]], "upper_quantile_margin (ax.models.winsorization_config.winsorizationconfig attribute)": [[10, "ax.models.winsorization_config.WinsorizationConfig.upper_quantile_margin"]], "use_model_list() (in module ax.models.torch.botorch_modular.utils)": [[10, "ax.models.torch.botorch_modular.utils.use_model_list"]], "validate_bounds() (in module ax.models.model_utils)": [[10, "ax.models.model_utils.validate_bounds"]], "weights (ax.models.torch_base.torchgenresults attribute)": [[10, "ax.models.torch_base.TorchGenResults.weights"]], "axplotconfig (class in ax.plot.base)": [[11, "ax.plot.base.AxPlotConfig"]], "axplottypes (class in ax.plot.base)": [[11, "ax.plot.base.AxPlotTypes"]], "bandit_rollout (ax.plot.base.axplottypes attribute)": [[11, "ax.plot.base.AxPlotTypes.BANDIT_ROLLOUT"]], "colors (class in ax.plot.color)": [[11, "ax.plot.color.COLORS"]], "contour (ax.plot.base.axplottypes attribute)": [[11, "ax.plot.base.AxPlotTypes.CONTOUR"]], "coral (ax.plot.color.colors attribute)": [[11, "ax.plot.color.COLORS.CORAL"]], "generic (ax.plot.base.axplottypes attribute)": [[11, "ax.plot.base.AxPlotTypes.GENERIC"]], "html (ax.plot.base.axplottypes attribute)": [[11, "ax.plot.base.AxPlotTypes.HTML"]], "interact_contour (ax.plot.base.axplottypes attribute)": [[11, "ax.plot.base.AxPlotTypes.INTERACT_CONTOUR"]], "interact_slice (ax.plot.base.axplottypes attribute)": [[11, "ax.plot.base.AxPlotTypes.INTERACT_SLICE"]], "light_purple (ax.plot.color.colors attribute)": [[11, "ax.plot.color.COLORS.LIGHT_PURPLE"]], "orange (ax.plot.color.colors attribute)": [[11, "ax.plot.color.COLORS.ORANGE"]], "pink (ax.plot.color.colors attribute)": [[11, "ax.plot.color.COLORS.PINK"]], "paretofrontierresults (class in ax.plot.pareto_utils)": [[11, "ax.plot.pareto_utils.ParetoFrontierResults"]], "plotdata (class in ax.plot.base)": [[11, "ax.plot.base.PlotData"]], "plotinsamplearm (class in ax.plot.base)": [[11, "ax.plot.base.PlotInSampleArm"]], "plotmetric (class in ax.plot.base)": [[11, "ax.plot.base.PlotMetric"]], "plotoutofsamplearm (class in ax.plot.base)": [[11, "ax.plot.base.PlotOutOfSampleArm"]], "slice (ax.plot.base.axplottypes attribute)": [[11, "ax.plot.base.AxPlotTypes.SLICE"]], "steelblue (ax.plot.color.colors attribute)": [[11, "ax.plot.color.COLORS.STEELBLUE"]], "teal (ax.plot.color.colors attribute)": [[11, "ax.plot.color.COLORS.TEAL"]], "absolute_metrics (ax.plot.pareto_utils.paretofrontierresults attribute)": [[11, "ax.plot.pareto_utils.ParetoFrontierResults.absolute_metrics"]], "arm_name_to_sort_key() (in module ax.plot.helper)": [[11, "ax.plot.helper.arm_name_to_sort_key"]], "arm_name_to_tuple() (in module ax.plot.helper)": [[11, "ax.plot.helper.arm_name_to_tuple"]], "arm_names (ax.plot.pareto_utils.paretofrontierresults attribute)": [[11, "ax.plot.pareto_utils.ParetoFrontierResults.arm_names"]], "ax.plot": [[11, "module-ax.plot"]], "ax.plot.bandit_rollout": [[11, "module-ax.plot.bandit_rollout"]], "ax.plot.base": [[11, "module-ax.plot.base"]], "ax.plot.color": [[11, "module-ax.plot.color"]], "ax.plot.contour": [[11, "module-ax.plot.contour"]], "ax.plot.diagnostic": [[11, "module-ax.plot.diagnostic"]], "ax.plot.feature_importances": [[11, "module-ax.plot.feature_importances"]], "ax.plot.helper": [[11, "module-ax.plot.helper"]], "ax.plot.marginal_effects": [[11, "module-ax.plot.marginal_effects"]], "ax.plot.parallel_coordinates": [[11, "module-ax.plot.parallel_coordinates"]], "ax.plot.pareto_frontier": [[11, "module-ax.plot.pareto_frontier"]], "ax.plot.pareto_utils": [[11, "module-ax.plot.pareto_utils"]], "ax.plot.render": [[11, "module-ax.plot.render"]], "ax.plot.scatter": [[11, "module-ax.plot.scatter"]], "ax.plot.slice": [[11, "module-ax.plot.slice"]], "ax.plot.table_view": [[11, "module-ax.plot.table_view"]], "ax.plot.trace": [[11, "module-ax.plot.trace"]], "axis_range() (in module ax.plot.helper)": [[11, "ax.plot.helper.axis_range"]], "build_filter_trial() (in module ax.plot.helper)": [[11, "ax.plot.helper.build_filter_trial"]], "compose_annotation() (in module ax.plot.helper)": [[11, "ax.plot.helper.compose_annotation"]], "compute_posterior_pareto_frontier() (in module ax.plot.pareto_utils)": [[11, "ax.plot.pareto_utils.compute_posterior_pareto_frontier"]], "compute_running_feasible_optimum_df() (in module ax.plot.trace)": [[11, "ax.plot.trace.compute_running_feasible_optimum_df"]], "context_stratum (ax.plot.base.plotinsamplearm attribute)": [[11, "ax.plot.base.PlotInSampleArm.context_stratum"]], "context_stratum (ax.plot.base.plotoutofsamplearm attribute)": [[11, "ax.plot.base.PlotOutOfSampleArm.context_stratum"]], "contour_config_to_trace() (in module ax.plot.helper)": [[11, "ax.plot.helper.contour_config_to_trace"]], "extend_range() (in module ax.plot.helper)": [[11, "ax.plot.helper.extend_range"]], "get_color() (in module ax.plot.table_view)": [[11, "ax.plot.table_view.get_color"]], "get_fixed_values() (in module ax.plot.helper)": [[11, "ax.plot.helper.get_fixed_values"]], "get_grid_for_parameter() (in module ax.plot.helper)": [[11, "ax.plot.helper.get_grid_for_parameter"]], "get_observed_pareto_frontiers() (in module ax.plot.pareto_utils)": [[11, "ax.plot.pareto_utils.get_observed_pareto_frontiers"]], "get_plot_data() (in module ax.plot.helper)": [[11, "ax.plot.helper.get_plot_data"]], "get_range_parameter() (in module ax.plot.helper)": [[11, "ax.plot.helper.get_range_parameter"]], "get_range_parameters() (in module ax.plot.helper)": [[11, "ax.plot.helper.get_range_parameters"]], "get_range_parameters_from_list() (in module ax.plot.helper)": [[11, "ax.plot.helper.get_range_parameters_from_list"]], "get_running_trials_per_minute() (in module ax.plot.trace)": [[11, "ax.plot.trace.get_running_trials_per_minute"]], "get_tensor_converter_model() (in module ax.plot.pareto_utils)": [[11, "ax.plot.pareto_utils.get_tensor_converter_model"]], "in_sample (ax.plot.base.plotdata attribute)": [[11, "ax.plot.base.PlotData.in_sample"]], "infer_is_relative() (in module ax.plot.helper)": [[11, "ax.plot.helper.infer_is_relative"]], "infer_reference_point_from_experiment() (in module ax.plot.pareto_utils)": [[11, "ax.plot.pareto_utils.infer_reference_point_from_experiment"]], "interact_batch_comparison() (in module ax.plot.diagnostic)": [[11, "ax.plot.diagnostic.interact_batch_comparison"]], "interact_contour() (in module ax.plot.contour)": [[11, "ax.plot.contour.interact_contour"]], "interact_contour_plotly() (in module ax.plot.contour)": [[11, "ax.plot.contour.interact_contour_plotly"]], "interact_cross_validation() (in module ax.plot.diagnostic)": [[11, "ax.plot.diagnostic.interact_cross_validation"]], "interact_cross_validation_plotly() (in module ax.plot.diagnostic)": [[11, "ax.plot.diagnostic.interact_cross_validation_plotly"]], "interact_empirical_model_validation() (in module ax.plot.diagnostic)": [[11, "ax.plot.diagnostic.interact_empirical_model_validation"]], "interact_fitted() (in module ax.plot.scatter)": [[11, "ax.plot.scatter.interact_fitted"]], "interact_fitted_plotly() (in module ax.plot.scatter)": [[11, "ax.plot.scatter.interact_fitted_plotly"]], "interact_multiple_pareto_frontier() (in module ax.plot.pareto_frontier)": [[11, "ax.plot.pareto_frontier.interact_multiple_pareto_frontier"]], "interact_pareto_frontier() (in module ax.plot.pareto_frontier)": [[11, "ax.plot.pareto_frontier.interact_pareto_frontier"]], "interact_slice() (in module ax.plot.slice)": [[11, "ax.plot.slice.interact_slice"]], "interact_slice_plotly() (in module ax.plot.slice)": [[11, "ax.plot.slice.interact_slice_plotly"]], "lattice_multiple_metrics() (in module ax.plot.scatter)": [[11, "ax.plot.scatter.lattice_multiple_metrics"]], "map_data_multiple_metrics_dropdown_plotly() (in module ax.plot.trace)": [[11, "ax.plot.trace.map_data_multiple_metrics_dropdown_plotly"]], "map_data_single_trace_scatters() (in module ax.plot.trace)": [[11, "ax.plot.trace.map_data_single_trace_scatters"]], "mean_markers_scatter() (in module ax.plot.trace)": [[11, "ax.plot.trace.mean_markers_scatter"]], "mean_trace_scatter() (in module ax.plot.trace)": [[11, "ax.plot.trace.mean_trace_scatter"]], "means (ax.plot.pareto_utils.paretofrontierresults attribute)": [[11, "ax.plot.pareto_utils.ParetoFrontierResults.means"]], "metric (ax.plot.base.plotmetric attribute)": [[11, "ax.plot.base.PlotMetric.metric"]], "metrics (ax.plot.base.plotdata attribute)": [[11, "ax.plot.base.PlotData.metrics"]], "name (ax.plot.base.plotinsamplearm attribute)": [[11, "ax.plot.base.PlotInSampleArm.name"]], "name (ax.plot.base.plotoutofsamplearm attribute)": [[11, "ax.plot.base.PlotOutOfSampleArm.name"]], "objective_thresholds (ax.plot.pareto_utils.paretofrontierresults attribute)": [[11, "ax.plot.pareto_utils.ParetoFrontierResults.objective_thresholds"]], "optimization_times() (in module ax.plot.trace)": [[11, "ax.plot.trace.optimization_times"]], "optimization_trace_all_methods() (in module ax.plot.trace)": [[11, "ax.plot.trace.optimization_trace_all_methods"]], "optimization_trace_single_method() (in module ax.plot.trace)": [[11, "ax.plot.trace.optimization_trace_single_method"]], "optimization_trace_single_method_plotly() (in module ax.plot.trace)": [[11, "ax.plot.trace.optimization_trace_single_method_plotly"]], "optimum_objective_scatter() (in module ax.plot.trace)": [[11, "ax.plot.trace.optimum_objective_scatter"]], "out_of_sample (ax.plot.base.plotdata attribute)": [[11, "ax.plot.base.PlotData.out_of_sample"]], "param_dicts (ax.plot.pareto_utils.paretofrontierresults attribute)": [[11, "ax.plot.pareto_utils.ParetoFrontierResults.param_dicts"]], "parameters (ax.plot.base.plotinsamplearm attribute)": [[11, "ax.plot.base.PlotInSampleArm.parameters"]], "parameters (ax.plot.base.plotoutofsamplearm attribute)": [[11, "ax.plot.base.PlotOutOfSampleArm.parameters"]], "plot_bandit_rollout() (in module ax.plot.bandit_rollout)": [[11, "ax.plot.bandit_rollout.plot_bandit_rollout"]], "plot_config_to_html() (in module ax.plot.render)": [[11, "ax.plot.render.plot_config_to_html"]], "plot_contour() (in module ax.plot.contour)": [[11, "ax.plot.contour.plot_contour"]], "plot_contour_plotly() (in module ax.plot.contour)": [[11, "ax.plot.contour.plot_contour_plotly"]], "plot_feature_importance() (in module ax.plot.feature_importances)": [[11, "ax.plot.feature_importances.plot_feature_importance"]], "plot_feature_importance_by_feature() (in module ax.plot.feature_importances)": [[11, "ax.plot.feature_importances.plot_feature_importance_by_feature"]], "plot_feature_importance_by_feature_plotly() (in module ax.plot.feature_importances)": [[11, "ax.plot.feature_importances.plot_feature_importance_by_feature_plotly"]], "plot_feature_importance_by_metric() (in module ax.plot.feature_importances)": [[11, "ax.plot.feature_importances.plot_feature_importance_by_metric"]], "plot_feature_importance_by_metric_plotly() (in module ax.plot.feature_importances)": [[11, "ax.plot.feature_importances.plot_feature_importance_by_metric_plotly"]], "plot_feature_importance_plotly() (in module ax.plot.feature_importances)": [[11, "ax.plot.feature_importances.plot_feature_importance_plotly"]], "plot_fitted() (in module ax.plot.scatter)": [[11, "ax.plot.scatter.plot_fitted"]], "plot_marginal_effects() (in module ax.plot.marginal_effects)": [[11, "ax.plot.marginal_effects.plot_marginal_effects"]], "plot_multiple_metrics() (in module ax.plot.scatter)": [[11, "ax.plot.scatter.plot_multiple_metrics"]], "plot_multiple_pareto_frontiers() (in module ax.plot.pareto_frontier)": [[11, "ax.plot.pareto_frontier.plot_multiple_pareto_frontiers"]], "plot_objective_value_vs_trial_index() (in module ax.plot.trace)": [[11, "ax.plot.trace.plot_objective_value_vs_trial_index"]], "plot_objective_vs_constraints() (in module ax.plot.scatter)": [[11, "ax.plot.scatter.plot_objective_vs_constraints"]], "plot_parallel_coordinates() (in module ax.plot.parallel_coordinates)": [[11, "ax.plot.parallel_coordinates.plot_parallel_coordinates"]], "plot_parallel_coordinates_plotly() (in module ax.plot.parallel_coordinates)": [[11, "ax.plot.parallel_coordinates.plot_parallel_coordinates_plotly"]], "plot_pareto_frontier() (in module ax.plot.pareto_frontier)": [[11, "ax.plot.pareto_frontier.plot_pareto_frontier"]], "plot_relative_feature_importance() (in module ax.plot.feature_importances)": [[11, "ax.plot.feature_importances.plot_relative_feature_importance"]], "plot_relative_feature_importance_plotly() (in module ax.plot.feature_importances)": [[11, "ax.plot.feature_importances.plot_relative_feature_importance_plotly"]], "plot_slice() (in module ax.plot.slice)": [[11, "ax.plot.slice.plot_slice"]], "plot_slice_plotly() (in module ax.plot.slice)": [[11, "ax.plot.slice.plot_slice_plotly"]], "plotly_color_scale() (in module ax.plot.color)": [[11, "ax.plot.color.plotly_color_scale"]], "pred (ax.plot.base.plotmetric attribute)": [[11, "ax.plot.base.PlotMetric.pred"]], "prepare_experiment_for_plotting() (in module ax.plot.parallel_coordinates)": [[11, "ax.plot.parallel_coordinates.prepare_experiment_for_plotting"]], "primary_metric (ax.plot.pareto_utils.paretofrontierresults attribute)": [[11, "ax.plot.pareto_utils.ParetoFrontierResults.primary_metric"]], "rel (ax.plot.base.plotmetric attribute)": [[11, "ax.plot.base.PlotMetric.rel"]], "relativize() (in module ax.plot.helper)": [[11, "ax.plot.helper.relativize"]], "relativize_data() (in module ax.plot.helper)": [[11, "ax.plot.helper.relativize_data"]], "resize_subtitles() (in module ax.plot.helper)": [[11, "ax.plot.helper.resize_subtitles"]], "rgb() (in module ax.plot.helper)": [[11, "ax.plot.helper.rgb"]], "rgba() (in module ax.plot.color)": [[11, "ax.plot.color.rgba"]], "scatter_plot_with_hypervolume_trace_plotly() (in module ax.plot.pareto_frontier)": [[11, "ax.plot.pareto_frontier.scatter_plot_with_hypervolume_trace_plotly"]], "scatter_plot_with_pareto_frontier() (in module ax.plot.pareto_frontier)": [[11, "ax.plot.pareto_frontier.scatter_plot_with_pareto_frontier"]], "scatter_plot_with_pareto_frontier_plotly() (in module ax.plot.pareto_frontier)": [[11, "ax.plot.pareto_frontier.scatter_plot_with_pareto_frontier_plotly"]], "se (ax.plot.base.plotinsamplearm attribute)": [[11, "ax.plot.base.PlotInSampleArm.se"]], "se_hat (ax.plot.base.plotinsamplearm attribute)": [[11, "ax.plot.base.PlotInSampleArm.se_hat"]], "se_hat (ax.plot.base.plotoutofsamplearm attribute)": [[11, "ax.plot.base.PlotOutOfSampleArm.se_hat"]], "secondary_metric (ax.plot.pareto_utils.paretofrontierresults attribute)": [[11, "ax.plot.pareto_utils.ParetoFrontierResults.secondary_metric"]], "sem_range_scatter() (in module ax.plot.trace)": [[11, "ax.plot.trace.sem_range_scatter"]], "sems (ax.plot.pareto_utils.paretofrontierresults attribute)": [[11, "ax.plot.pareto_utils.ParetoFrontierResults.sems"]], "short_name() (in module ax.plot.contour)": [[11, "ax.plot.contour.short_name"]], "slice_config_to_trace() (in module ax.plot.helper)": [[11, "ax.plot.helper.slice_config_to_trace"]], "status_quo_name (ax.plot.base.plotdata attribute)": [[11, "ax.plot.base.PlotData.status_quo_name"]], "table_view_plot() (in module ax.plot.table_view)": [[11, "ax.plot.table_view.table_view_plot"]], "tile_cross_validation() (in module ax.plot.diagnostic)": [[11, "ax.plot.diagnostic.tile_cross_validation"]], "tile_fitted() (in module ax.plot.scatter)": [[11, "ax.plot.scatter.tile_fitted"]], "tile_observations() (in module ax.plot.scatter)": [[11, "ax.plot.scatter.tile_observations"]], "to_nonrobust_search_space() (in module ax.plot.pareto_utils)": [[11, "ax.plot.pareto_utils.to_nonrobust_search_space"]], "y (ax.plot.base.plotinsamplearm attribute)": [[11, "ax.plot.base.PlotInSampleArm.y"]], "y_hat (ax.plot.base.plotinsamplearm attribute)": [[11, "ax.plot.base.PlotInSampleArm.y_hat"]], "y_hat (ax.plot.base.plotoutofsamplearm attribute)": [[11, "ax.plot.base.PlotOutOfSampleArm.y_hat"]], "simulatedbackendrunner (class in ax.runners.simulated_backend)": [[12, "ax.runners.simulated_backend.SimulatedBackendRunner"]], "singlerunningtrialmixin (class in ax.runners.single_running_trial_mixin)": [[12, "ax.runners.single_running_trial_mixin.SingleRunningTrialMixin"]], "syntheticrunner (class in ax.runners.synthetic)": [[12, "ax.runners.synthetic.SyntheticRunner"]], "torchxrunner (class in ax.runners.torchx)": [[12, "ax.runners.torchx.TorchXRunner"]], "ax.runners": [[12, "module-ax.runners"]], "ax.runners.simulated_backend": [[12, "module-ax.runners.simulated_backend"]], "ax.runners.single_running_trial_mixin": [[12, "module-ax.runners.single_running_trial_mixin"]], "ax.runners.synthetic": [[12, "module-ax.runners.synthetic"]], "ax.runners.torchx": [[12, "module-ax.runners.torchx"]], "poll_trial_status() (ax.runners.simulated_backend.simulatedbackendrunner method)": [[12, "ax.runners.simulated_backend.SimulatedBackendRunner.poll_trial_status"]], "poll_trial_status() (ax.runners.single_running_trial_mixin.singlerunningtrialmixin method)": [[12, "ax.runners.single_running_trial_mixin.SingleRunningTrialMixin.poll_trial_status"]], "poll_trial_status() (ax.runners.synthetic.syntheticrunner method)": [[12, "ax.runners.synthetic.SyntheticRunner.poll_trial_status"]], "poll_trial_status() (ax.runners.torchx.torchxrunner method)": [[12, "ax.runners.torchx.TorchXRunner.poll_trial_status"]], "run() (ax.runners.simulated_backend.simulatedbackendrunner method)": [[12, "ax.runners.simulated_backend.SimulatedBackendRunner.run"]], "run() (ax.runners.synthetic.syntheticrunner method)": [[12, "ax.runners.synthetic.SyntheticRunner.run"]], "run() (ax.runners.torchx.torchxrunner method)": [[12, "ax.runners.torchx.TorchXRunner.run"]], "run_metadata_report_keys (ax.runners.synthetic.syntheticrunner property)": [[12, "ax.runners.synthetic.SyntheticRunner.run_metadata_report_keys"]], "sample_runtime_unif() (in module ax.runners.simulated_backend)": [[12, "ax.runners.simulated_backend.sample_runtime_unif"]], "stop() (ax.runners.simulated_backend.simulatedbackendrunner method)": [[12, "ax.runners.simulated_backend.SimulatedBackendRunner.stop"]], "stop() (ax.runners.torchx.torchxrunner method)": [[12, "ax.runners.torchx.TorchXRunner.stop"]], "aborted (ax.service.scheduler.runtrialsstatus attribute)": [[13, "ax.service.scheduler.RunTrialsStatus.ABORTED"]], "ax_object_field_overrides (ax.service.utils.with_db_settings_base.withdbsettingsbase attribute)": [[13, "ax.service.utils.with_db_settings_base.WithDBSettingsBase.AX_OBJECT_FIELD_OVERRIDES"]], "axclient (class in ax.service.ax_client)": [[13, "ax.service.ax_client.AxClient"]], "batch_trial (ax.service.utils.scheduler_options.trialtype attribute)": [[13, "ax.service.utils.scheduler_options.TrialType.BATCH_TRIAL"]], "bestpointmixin (class in ax.service.utils.best_point_mixin)": [[13, "ax.service.utils.best_point_mixin.BestPointMixin"]], "default_fetch_kwargs (ax.service.scheduler.scheduler attribute)": [[13, "ax.service.scheduler.Scheduler.DEFAULT_FETCH_KWARGS"]], "experimentstatusproperties (class in ax.service.scheduler)": [[13, "ax.service.scheduler.ExperimentStatusProperties"]], "failurerateexceedederror": [[13, "ax.service.scheduler.FailureRateExceededError"]], "fixedfeatures (class in ax.service.utils.instantiation)": [[13, "ax.service.utils.instantiation.FixedFeatures"]], "instantiationbase (class in ax.service.utils.instantiation)": [[13, "ax.service.utils.instantiation.InstantiationBase"]], "maximize (ax.service.utils.instantiation.metricobjective attribute)": [[13, "ax.service.utils.instantiation.MetricObjective.MAXIMIZE"]], "minimize (ax.service.utils.instantiation.metricobjective attribute)": [[13, "ax.service.utils.instantiation.MetricObjective.MINIMIZE"]], "metricobjective (class in ax.service.utils.instantiation)": [[13, "ax.service.utils.instantiation.MetricObjective"]], "num_trials_run_per_call (ax.service.scheduler.experimentstatusproperties attribute)": [[13, "ax.service.scheduler.ExperimentStatusProperties.NUM_TRIALS_RUN_PER_CALL"]], "objectiveproperties (class in ax.service.utils.instantiation)": [[13, "ax.service.utils.instantiation.ObjectiveProperties"]], "optimizationloop (class in ax.service.managed_loop)": [[13, "ax.service.managed_loop.OptimizationLoop"]], "optimizationresult (class in ax.service.scheduler)": [[13, "ax.service.scheduler.OptimizationResult"]], "resumed_from_storage_timestamps (ax.service.scheduler.experimentstatusproperties attribute)": [[13, "ax.service.scheduler.ExperimentStatusProperties.RESUMED_FROM_STORAGE_TIMESTAMPS"]], "run_trials_status (ax.service.scheduler.experimentstatusproperties attribute)": [[13, "ax.service.scheduler.ExperimentStatusProperties.RUN_TRIALS_STATUS"]], "runtrialsstatus (class in ax.service.scheduler)": [[13, "ax.service.scheduler.RunTrialsStatus"]], "started (ax.service.scheduler.runtrialsstatus attribute)": [[13, "ax.service.scheduler.RunTrialsStatus.STARTED"]], "success (ax.service.scheduler.runtrialsstatus attribute)": [[13, "ax.service.scheduler.RunTrialsStatus.SUCCESS"]], "scheduler (class in ax.service.scheduler)": [[13, "ax.service.scheduler.Scheduler"]], "schedulerinternalerror": [[13, "ax.service.scheduler.SchedulerInternalError"]], "scheduleroptions (class in ax.service.utils.scheduler_options)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions"]], "trial (ax.service.utils.scheduler_options.trialtype attribute)": [[13, "ax.service.utils.scheduler_options.TrialType.TRIAL"]], "trialtype (class in ax.service.utils.scheduler_options)": [[13, "ax.service.utils.scheduler_options.TrialType"]], "withdbsettingsbase (class in ax.service.utils.with_db_settings_base)": [[13, "ax.service.utils.with_db_settings_base.WithDBSettingsBase"]], "_skip_experiment_save (ax.service.scheduler.scheduler attribute)": [[13, "ax.service.scheduler.Scheduler._skip_experiment_save"]], "abandon_trial() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.abandon_trial"]], "add_tracking_metrics() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.add_tracking_metrics"]], "attach_trial() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.attach_trial"]], "ax.service": [[13, "module-ax.service"]], "ax.service.ax_client": [[13, "module-ax.service.ax_client"]], "ax.service.interactive_loop": [[13, "module-ax.service.interactive_loop"]], "ax.service.managed_loop": [[13, "module-ax.service.managed_loop"]], "ax.service.scheduler": [[13, "module-ax.service.scheduler"]], "ax.service.utils.best_point": [[13, "module-ax.service.utils.best_point"]], "ax.service.utils.best_point_mixin": [[13, "module-ax.service.utils.best_point_mixin"]], "ax.service.utils.early_stopping": [[13, "module-ax.service.utils.early_stopping"]], "ax.service.utils.instantiation": [[13, "module-ax.service.utils.instantiation"]], "ax.service.utils.report_utils": [[13, "module-ax.service.utils.report_utils"]], "ax.service.utils.scheduler_options": [[13, "module-ax.service.utils.scheduler_options"]], "ax.service.utils.with_db_settings_base": [[13, "module-ax.service.utils.with_db_settings_base"]], "ax_client_candidate_generator() (in module ax.service.interactive_loop)": [[13, "ax.service.interactive_loop.ax_client_candidate_generator"]], "ax_client_data_attacher() (in module ax.service.interactive_loop)": [[13, "ax.service.interactive_loop.ax_client_data_attacher"]], "batch_size (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.batch_size"], [13, "id3"]], "build_objective_threshold() (ax.service.utils.instantiation.instantiationbase static method)": [[13, "ax.service.utils.instantiation.InstantiationBase.build_objective_threshold"]], "build_objective_thresholds() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.build_objective_thresholds"]], "candidate_trials (ax.service.scheduler.scheduler property)": [[13, "ax.service.scheduler.Scheduler.candidate_trials"]], "compare_to_baseline() (in module ax.service.utils.report_utils)": [[13, "ax.service.utils.report_utils.compare_to_baseline"]], "compare_to_baseline_impl() (in module ax.service.utils.report_utils)": [[13, "ax.service.utils.report_utils.compare_to_baseline_impl"]], "complete_trial() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.complete_trial"]], "completion_criterion() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.completion_criterion"]], "compute_maximum_map_values() (in module ax.service.utils.report_utils)": [[13, "ax.service.utils.report_utils.compute_maximum_map_values"]], "constraint_from_str() (ax.service.utils.instantiation.instantiationbase static method)": [[13, "ax.service.utils.instantiation.InstantiationBase.constraint_from_str"]], "create_experiment() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.create_experiment"]], "db_settings (ax.service.scheduler.scheduler attribute)": [[13, "ax.service.scheduler.Scheduler.db_settings"]], "db_settings (ax.service.utils.with_db_settings_base.withdbsettingsbase property)": [[13, "ax.service.utils.with_db_settings_base.WithDBSettingsBase.db_settings"]], "db_settings_set (ax.service.utils.with_db_settings_base.withdbsettingsbase property)": [[13, "ax.service.utils.with_db_settings_base.WithDBSettingsBase.db_settings_set"]], "debug_log_run_metadata (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.debug_log_run_metadata"], [13, "id4"]], "early_stopping_strategy (ax.service.ax_client.axclient property)": [[13, "ax.service.ax_client.AxClient.early_stopping_strategy"]], "early_stopping_strategy (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.early_stopping_strategy"], [13, "id5"]], "enforce_immutable_search_space_and_opt_config (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.enforce_immutable_search_space_and_opt_config"], [13, "id6"]], "error_if_failure_rate_exceeded() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.error_if_failure_rate_exceeded"]], "estimate_early_stopping_savings() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.estimate_early_stopping_savings"]], "estimate_early_stopping_savings() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.estimate_early_stopping_savings"]], "estimate_global_stopping_savings() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.estimate_global_stopping_savings"]], "exp_to_df() (in module ax.service.utils.report_utils)": [[13, "ax.service.utils.report_utils.exp_to_df"]], "experiment (ax.service.ax_client.axclient property)": [[13, "ax.service.ax_client.AxClient.experiment"]], "experiment (ax.service.scheduler.scheduler attribute)": [[13, "ax.service.scheduler.Scheduler.experiment"], [13, "id0"]], "extract_y_from_data() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.extract_Y_from_data"]], "fetch_kwargs (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.fetch_kwargs"], [13, "id7"]], "fill_missing_thresholds_from_nadir() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.fill_missing_thresholds_from_nadir"]], "fit_model() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.fit_model"]], "from_json_snapshot() (ax.service.ax_client.axclient class method)": [[13, "ax.service.ax_client.AxClient.from_json_snapshot"]], "from_stored_experiment() (ax.service.scheduler.scheduler class method)": [[13, "ax.service.scheduler.Scheduler.from_stored_experiment"]], "full_run() (ax.service.managed_loop.optimizationloop method)": [[13, "ax.service.managed_loop.OptimizationLoop.full_run"]], "generate_candidates() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.generate_candidates"]], "generation_strategy (ax.service.ax_client.axclient property)": [[13, "ax.service.ax_client.AxClient.generation_strategy"]], "generation_strategy (ax.service.scheduler.scheduler attribute)": [[13, "ax.service.scheduler.Scheduler.generation_strategy"], [13, "id1"]], "get_best_by_raw_objective() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.get_best_by_raw_objective"]], "get_best_by_raw_objective_with_trial_index() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.get_best_by_raw_objective_with_trial_index"]], "get_best_parameters() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[13, "ax.service.utils.best_point_mixin.BestPointMixin.get_best_parameters"]], "get_best_parameters() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.get_best_parameters"]], "get_best_parameters_from_model_predictions() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.get_best_parameters_from_model_predictions"]], "get_best_parameters_from_model_predictions_with_trial_index() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.get_best_parameters_from_model_predictions_with_trial_index"]], "get_best_parameters_with_trial_index() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.get_best_parameters_with_trial_index"]], "get_best_point() (ax.service.managed_loop.optimizationloop method)": [[13, "ax.service.managed_loop.OptimizationLoop.get_best_point"]], "get_best_raw_objective_point() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.get_best_raw_objective_point"]], "get_best_raw_objective_point_with_trial_index() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.get_best_raw_objective_point_with_trial_index"]], "get_best_trial() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_best_trial"]], "get_best_trial() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.get_best_trial"]], "get_best_trial() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[13, "ax.service.utils.best_point_mixin.BestPointMixin.get_best_trial"]], "get_contour_plot() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_contour_plot"]], "get_current_model() (ax.service.managed_loop.optimizationloop method)": [[13, "ax.service.managed_loop.OptimizationLoop.get_current_model"]], "get_current_trial_generation_limit() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_current_trial_generation_limit"]], "get_default_db_settings() (ax.service.scheduler.scheduler class method)": [[13, "ax.service.scheduler.Scheduler.get_default_db_settings"]], "get_early_stopping_metrics() (in module ax.service.utils.early_stopping)": [[13, "ax.service.utils.early_stopping.get_early_stopping_metrics"]], "get_feature_importances() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_feature_importances"]], "get_figure_and_callback() (in module ax.service.utils.report_utils)": [[13, "ax.service.utils.report_utils.get_figure_and_callback"]], "get_fitted_model_bridge() (in module ax.service.scheduler)": [[13, "ax.service.scheduler.get_fitted_model_bridge"]], "get_hypervolume() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_hypervolume"]], "get_hypervolume() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.get_hypervolume"]], "get_hypervolume() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[13, "ax.service.utils.best_point_mixin.BestPointMixin.get_hypervolume"]], "get_improvement_over_baseline() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.get_improvement_over_baseline"]], "get_max_parallelism() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_max_parallelism"]], "get_model_predictions() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_model_predictions"]], "get_model_predictions_for_parameterizations() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_model_predictions_for_parameterizations"]], "get_next_trial() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_next_trial"]], "get_next_trials() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_next_trials"]], "get_optimization_trace() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_optimization_trace"]], "get_pareto_optimal_parameters() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_pareto_optimal_parameters"]], "get_pareto_optimal_parameters() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.get_pareto_optimal_parameters"]], "get_pareto_optimal_parameters() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[13, "ax.service.utils.best_point_mixin.BestPointMixin.get_pareto_optimal_parameters"]], "get_pareto_optimal_parameters() (in module ax.service.utils.best_point)": [[13, "ax.service.utils.best_point.get_pareto_optimal_parameters"]], "get_recommended_max_parallelism() (ax.service.ax_client.axclient static method)": [[13, "ax.service.ax_client.AxClient.get_recommended_max_parallelism"]], "get_standard_plots() (in module ax.service.utils.report_utils)": [[13, "ax.service.utils.report_utils.get_standard_plots"]], "get_trace() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_trace"]], "get_trace() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.get_trace"]], "get_trace() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[13, "ax.service.utils.best_point_mixin.BestPointMixin.get_trace"]], "get_trace_by_progression() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_trace_by_progression"]], "get_trace_by_progression() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.get_trace_by_progression"]], "get_trace_by_progression() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[13, "ax.service.utils.best_point_mixin.BestPointMixin.get_trace_by_progression"]], "get_trial() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_trial"]], "get_trial_parameters() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_trial_parameters"]], "get_trials_data_frame() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.get_trials_data_frame"]], "global_stopping_strategy (ax.service.ax_client.axclient property)": [[13, "ax.service.ax_client.AxClient.global_stopping_strategy"]], "global_stopping_strategy (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.global_stopping_strategy"], [13, "id8"]], "init_seconds_between_polls (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.init_seconds_between_polls"], [13, "id9"]], "interactive_optimize() (in module ax.service.interactive_loop)": [[13, "ax.service.interactive_loop.interactive_optimize"]], "interactive_optimize_with_client() (in module ax.service.interactive_loop)": [[13, "ax.service.interactive_loop.interactive_optimize_with_client"]], "load() (ax.service.ax_client.axclient static method)": [[13, "ax.service.ax_client.AxClient.load"]], "load_experiment() (ax.service.ax_client.axclient static method)": [[13, "ax.service.ax_client.AxClient.load_experiment"]], "load_experiment_from_database() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.load_experiment_from_database"]], "load_from_json_file() (ax.service.ax_client.axclient class method)": [[13, "ax.service.ax_client.AxClient.load_from_json_file"]], "log_filepath (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.log_filepath"], [13, "id10"]], "log_trial_failure() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.log_trial_failure"]], "logger (ax.service.scheduler.scheduler attribute)": [[13, "ax.service.scheduler.Scheduler.logger"]], "logger (in module ax.service.utils.instantiation)": [[13, "ax.service.utils.instantiation.logger"]], "logging_level (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.logging_level"], [13, "id11"]], "make_experiment() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.make_experiment"]], "make_fixed_observation_features() (ax.service.utils.instantiation.instantiationbase static method)": [[13, "ax.service.utils.instantiation.InstantiationBase.make_fixed_observation_features"]], "make_objective_thresholds() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.make_objective_thresholds"]], "make_objectives() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.make_objectives"]], "make_optimization_config() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.make_optimization_config"]], "make_optimization_config_from_properties() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.make_optimization_config_from_properties"]], "make_outcome_constraints() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.make_outcome_constraints"]], "make_search_space() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.make_search_space"]], "markdown_messages (ax.service.scheduler.scheduler attribute)": [[13, "ax.service.scheduler.Scheduler.markdown_messages"]], "max_pending_trials (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.max_pending_trials"], [13, "id12"]], "maybe_extract_baseline_comparison_values() (in module ax.service.utils.report_utils)": [[13, "ax.service.utils.report_utils.maybe_extract_baseline_comparison_values"]], "metric_definitions (ax.service.ax_client.axclient property)": [[13, "ax.service.ax_client.AxClient.metric_definitions"]], "metric_names (ax.service.ax_client.axclient property)": [[13, "ax.service.ax_client.AxClient.metric_names"]], "min_failed_trials_for_failure_rate_check (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.min_failed_trials_for_failure_rate_check"], [13, "id13"]], "min_seconds_before_poll (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.min_seconds_before_poll"], [13, "id14"]], "minimize (ax.service.utils.instantiation.objectiveproperties attribute)": [[13, "ax.service.utils.instantiation.ObjectiveProperties.minimize"]], "objective (ax.service.ax_client.axclient property)": [[13, "ax.service.ax_client.AxClient.objective"]], "objective_name (ax.service.ax_client.axclient property)": [[13, "ax.service.ax_client.AxClient.objective_name"]], "objective_names (ax.service.ax_client.axclient property)": [[13, "ax.service.ax_client.AxClient.objective_names"]], "objective_threshold_constraint_from_str() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.objective_threshold_constraint_from_str"]], "optimization_config_from_objectives() (ax.service.utils.instantiation.instantiationbase static method)": [[13, "ax.service.utils.instantiation.InstantiationBase.optimization_config_from_objectives"]], "optimize() (in module ax.service.managed_loop)": [[13, "ax.service.managed_loop.optimize"]], "options (ax.service.scheduler.scheduler attribute)": [[13, "ax.service.scheduler.Scheduler.options"]], "options (ax.service.scheduler.scheduler property)": [[13, "id2"]], "outcome_constraint_from_str() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.outcome_constraint_from_str"]], "parameter_from_json() (ax.service.utils.instantiation.instantiationbase class method)": [[13, "ax.service.utils.instantiation.InstantiationBase.parameter_from_json"]], "parameters (ax.service.utils.instantiation.fixedfeatures attribute)": [[13, "ax.service.utils.instantiation.FixedFeatures.parameters"]], "pareto_frontier_scatter_2d_plotly() (in module ax.service.utils.report_utils)": [[13, "ax.service.utils.report_utils.pareto_frontier_scatter_2d_plotly"]], "pending_trials (ax.service.scheduler.scheduler property)": [[13, "ax.service.scheduler.Scheduler.pending_trials"]], "poll_and_process_results() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.poll_and_process_results"]], "poll_trial_status() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.poll_trial_status"]], "remove_tracking_metric() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.remove_tracking_metric"]], "report_results() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.report_results"]], "run() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.run"]], "run_all_trials() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.run_all_trials"]], "run_n_trials() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.run_n_trials"]], "run_trial() (ax.service.managed_loop.optimizationloop method)": [[13, "ax.service.managed_loop.OptimizationLoop.run_trial"]], "run_trials() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.run_trials"]], "run_trials_and_yield_results() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.run_trials_and_yield_results"]], "run_trials_in_batches (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.run_trials_in_batches"], [13, "id15"]], "runner (ax.service.scheduler.scheduler property)": [[13, "ax.service.scheduler.Scheduler.runner"]], "running_trials (ax.service.scheduler.scheduler property)": [[13, "ax.service.scheduler.Scheduler.running_trials"]], "save() (ax.service.ax_client.axclient static method)": [[13, "ax.service.ax_client.AxClient.save"]], "save_to_json_file() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.save_to_json_file"]], "seconds_between_polls_backoff_factor (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.seconds_between_polls_backoff_factor"], [13, "id16"]], "select_baseline_arm() (in module ax.service.utils.report_utils)": [[13, "ax.service.utils.report_utils.select_baseline_arm"]], "set_optimization_config() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.set_optimization_config"]], "set_search_space() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.set_search_space"]], "set_status_quo() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.set_status_quo"]], "should_abort_optimization() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.should_abort_optimization"]], "should_consider_optimization_complete() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.should_consider_optimization_complete"]], "should_stop_trials_early() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.should_stop_trials_early"]], "should_stop_trials_early() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.should_stop_trials_early"]], "should_stop_trials_early() (in module ax.service.utils.early_stopping)": [[13, "ax.service.utils.early_stopping.should_stop_trials_early"]], "should_wait_for_running_trials (ax.service.scheduler.scheduler property)": [[13, "ax.service.scheduler.Scheduler.should_wait_for_running_trials"]], "standard_generation_strategy (ax.service.scheduler.scheduler property)": [[13, "ax.service.scheduler.Scheduler.standard_generation_strategy"]], "status_quo (ax.service.ax_client.axclient property)": [[13, "ax.service.ax_client.AxClient.status_quo"]], "status_quo_weight (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.status_quo_weight"], [13, "id17"]], "stop_trial_early() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.stop_trial_early"]], "stop_trial_runs() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.stop_trial_runs"]], "summarize_final_result() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.summarize_final_result"]], "suppress_storage_errors_after_retries (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.suppress_storage_errors_after_retries"], [13, "id18"]], "threshold (ax.service.utils.instantiation.objectiveproperties attribute)": [[13, "ax.service.utils.instantiation.ObjectiveProperties.threshold"]], "timeout_hours (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.timeout_hours"], [13, "id19"]], "to_json_snapshot() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.to_json_snapshot"]], "tolerated_trial_failure_rate (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.tolerated_trial_failure_rate"], [13, "id20"]], "total_trials (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.total_trials"], [13, "id21"]], "trial_index (ax.service.utils.instantiation.fixedfeatures attribute)": [[13, "ax.service.utils.instantiation.FixedFeatures.trial_index"]], "trial_type (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.trial_type"], [13, "id22"]], "ttl_seconds_for_trials (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.ttl_seconds_for_trials"], [13, "id23"]], "update_running_trial_with_intermediate_data() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.update_running_trial_with_intermediate_data"]], "update_trial_data() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.update_trial_data"]], "validate_metrics (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.validate_metrics"], [13, "id24"]], "verify_trial_parameterization() (ax.service.ax_client.axclient method)": [[13, "ax.service.ax_client.AxClient.verify_trial_parameterization"]], "wait_for_completed_trials_and_report_results() (ax.service.scheduler.scheduler method)": [[13, "ax.service.scheduler.Scheduler.wait_for_completed_trials_and_report_results"]], "wait_for_running_trials (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[13, "ax.service.utils.scheduler_options.SchedulerOptions.wait_for_running_trials"], [13, "id25"]], "warn_if_unpredictable_metrics() (in module ax.service.utils.report_utils)": [[13, "ax.service.utils.report_utils.warn_if_unpredictable_metrics"]], "with_evaluation_function() (ax.service.managed_loop.optimizationloop static method)": [[13, "ax.service.managed_loop.OptimizationLoop.with_evaluation_function"]], "with_runners_and_metrics() (ax.service.managed_loop.optimizationloop class method)": [[13, "ax.service.managed_loop.OptimizationLoop.with_runners_and_metrics"]], "acquisition_function_registry (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.ACQUISITION_FUNCTION_REGISTRY"]], "acquisition_registry (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.ACQUISITION_REGISTRY"]], "additional_objective (ax.storage.utils.metricintent attribute)": [[14, "ax.storage.utils.MetricIntent.ADDITIONAL_OBJECTIVE"]], "basenullableenum (class in ax.storage.sqa_store.sqa_enum)": [[14, "ax.storage.sqa_store.sqa_enum.BaseNullableEnum"]], "choice (ax.storage.utils.domaintype attribute)": [[14, "ax.storage.utils.DomainType.CHOICE"]], "class_to_registry (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.CLASS_TO_REGISTRY"]], "dbsettings (class in ax.storage.sqa_store.structs)": [[14, "ax.storage.sqa_store.structs.DBSettings"]], "distribution (ax.storage.utils.parameterconstrainttype attribute)": [[14, "ax.storage.utils.ParameterConstraintType.DISTRIBUTION"]], "decoder (class in ax.storage.sqa_store.decoder)": [[14, "ax.storage.sqa_store.decoder.Decoder"]], "domaintype (class in ax.storage.utils)": [[14, "ax.storage.utils.DomainType"]], "environmental_range (ax.storage.utils.domaintype attribute)": [[14, "ax.storage.utils.DomainType.ENVIRONMENTAL_RANGE"]], "encoder (class in ax.storage.sqa_store.encoder)": [[14, "ax.storage.sqa_store.encoder.Encoder"]], "fixed (ax.storage.utils.domaintype attribute)": [[14, "ax.storage.utils.DomainType.FIXED"]], "gpytorch_component_registry (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.GPYTORCH_COMPONENT_REGISTRY"]], "input_transform_registry (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.INPUT_TRANSFORM_REGISTRY"]], "intenum (class in ax.storage.sqa_store.sqa_enum)": [[14, "ax.storage.sqa_store.sqa_enum.IntEnum"]], "inttimestamp (class in ax.storage.sqa_store.timestamp)": [[14, "ax.storage.sqa_store.timestamp.IntTimestamp"]], "jsonencodeddict (in module ax.storage.sqa_store.json)": [[14, "ax.storage.sqa_store.json.JSONEncodedDict"]], "jsonencodedlist (in module ax.storage.sqa_store.json)": [[14, "ax.storage.sqa_store.json.JSONEncodedList"]], "jsonencodedlongtext (class in ax.storage.sqa_store.json)": [[14, "ax.storage.sqa_store.json.JSONEncodedLongText"]], "jsonencodedlongtextdict (in module ax.storage.sqa_store.json)": [[14, "ax.storage.sqa_store.json.JSONEncodedLongTextDict"]], "jsonencodedmediumtext (class in ax.storage.sqa_store.json)": [[14, "ax.storage.sqa_store.json.JSONEncodedMediumText"]], "jsonencodedobject (class in ax.storage.sqa_store.json)": [[14, "ax.storage.sqa_store.json.JSONEncodedObject"]], "jsonencodedtext (class in ax.storage.sqa_store.json)": [[14, "ax.storage.sqa_store.json.JSONEncodedText"]], "jsonencodedtextdict (in module ax.storage.sqa_store.json)": [[14, "ax.storage.sqa_store.json.JSONEncodedTextDict"]], "linear (ax.storage.utils.parameterconstrainttype attribute)": [[14, "ax.storage.utils.ParameterConstraintType.LINEAR"]], "model_registry (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.MODEL_REGISTRY"]], "multi_objective (ax.storage.utils.metricintent attribute)": [[14, "ax.storage.utils.MetricIntent.MULTI_OBJECTIVE"]], "metricintent (class in ax.storage.utils)": [[14, "ax.storage.utils.MetricIntent"]], "objective (ax.storage.utils.metricintent attribute)": [[14, "ax.storage.utils.MetricIntent.OBJECTIVE"]], "objective_threshold (ax.storage.utils.metricintent attribute)": [[14, "ax.storage.utils.MetricIntent.OBJECTIVE_THRESHOLD"]], "order (ax.storage.utils.parameterconstrainttype attribute)": [[14, "ax.storage.utils.ParameterConstraintType.ORDER"]], "outcome_constraint (ax.storage.utils.metricintent attribute)": [[14, "ax.storage.utils.MetricIntent.OUTCOME_CONSTRAINT"]], "outcome_transform_registry (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.OUTCOME_TRANSFORM_REGISTRY"]], "parameterconstrainttype (class in ax.storage.utils)": [[14, "ax.storage.utils.ParameterConstraintType"]], "range (ax.storage.utils.domaintype attribute)": [[14, "ax.storage.utils.DomainType.RANGE"]], "reverse_outcome_transform_registry (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.REVERSE_OUTCOME_TRANSFORM_REGISTRY"]], "risk_measure (ax.storage.utils.metricintent attribute)": [[14, "ax.storage.utils.MetricIntent.RISK_MEASURE"]], "registrybundle (class in ax.storage.registry_bundle)": [[14, "ax.storage.registry_bundle.RegistryBundle"]], "registrybundlebase (class in ax.storage.registry_bundle)": [[14, "ax.storage.registry_bundle.RegistryBundleBase"]], "scalarized_objective (ax.storage.utils.metricintent attribute)": [[14, "ax.storage.utils.MetricIntent.SCALARIZED_OBJECTIVE"]], "scalarized_outcome_constraint (ax.storage.utils.metricintent attribute)": [[14, "ax.storage.utils.MetricIntent.SCALARIZED_OUTCOME_CONSTRAINT"]], "sqaabandonedarm (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQAAbandonedArm"]], "sqaanalysiscard (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQAAnalysisCard"]], "sqaarm (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQAArm"]], "sqabase (class in ax.storage.sqa_store.db)": [[14, "ax.storage.sqa_store.db.SQABase"]], "sqadata (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQAData"]], "sqaexperiment (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQAExperiment"]], "sqagenerationstrategy (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQAGenerationStrategy"]], "sqageneratorrun (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun"]], "sqametric (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQAMetric"]], "sqaparameter (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQAParameter"]], "sqaparameterconstraint (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQAParameterConstraint"]], "sqarunner (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQARunner"]], "sqatrial (class in ax.storage.sqa_store.sqa_classes)": [[14, "ax.storage.sqa_store.sqa_classes.SQATrial"]], "sum (ax.storage.utils.parameterconstrainttype attribute)": [[14, "ax.storage.utils.ParameterConstraintType.SUM"]], "stringenum (class in ax.storage.sqa_store.sqa_enum)": [[14, "ax.storage.sqa_store.sqa_enum.StringEnum"]], "tracking (ax.storage.utils.metricintent attribute)": [[14, "ax.storage.utils.MetricIntent.TRACKING"]], "transform_registry (in module ax.storage.transform_registry)": [[14, "ax.storage.transform_registry.TRANSFORM_REGISTRY"]], "abandoned_arm_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.abandoned_arm_from_sqa"]], "abandoned_arm_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.abandoned_arm_to_sqa"]], "abandoned_arms (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQATrial.abandoned_arms"]], "analysis_card_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.analysis_card_from_sqa"]], "analysis_card_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.analysis_card_to_sqa"]], "analysis_cards (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAExperiment.analysis_cards"]], "arm_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.arm_from_sqa"]], "arm_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.arm_to_dict"]], "arm_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.arm_to_sqa"]], "arms (ax.storage.sqa_store.sqa_classes.sqageneratorrun attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun.arms"]], "ax.storage": [[14, "module-ax.storage"]], "ax.storage.botorch_modular_registry": [[14, "module-ax.storage.botorch_modular_registry"]], "ax.storage.json_store.decoder": [[14, "module-ax.storage.json_store.decoder"]], "ax.storage.json_store.decoders": [[14, "module-ax.storage.json_store.decoders"]], "ax.storage.json_store.encoder": [[14, "module-ax.storage.json_store.encoder"]], "ax.storage.json_store.encoders": [[14, "module-ax.storage.json_store.encoders"]], "ax.storage.json_store.load": [[14, "module-ax.storage.json_store.load"]], "ax.storage.json_store.registry": [[14, "module-ax.storage.json_store.registry"]], "ax.storage.json_store.save": [[14, "module-ax.storage.json_store.save"]], "ax.storage.metric_registry": [[14, "module-ax.storage.metric_registry"]], "ax.storage.registry_bundle": [[14, "module-ax.storage.registry_bundle"]], "ax.storage.runner_registry": [[14, "module-ax.storage.runner_registry"]], "ax.storage.sqa_store.db": [[14, "module-ax.storage.sqa_store.db"]], "ax.storage.sqa_store.decoder": [[14, "module-ax.storage.sqa_store.decoder"]], "ax.storage.sqa_store.delete": [[14, "module-ax.storage.sqa_store.delete"]], "ax.storage.sqa_store.encoder": [[14, "module-ax.storage.sqa_store.encoder"]], "ax.storage.sqa_store.json": [[14, "module-ax.storage.sqa_store.json"]], "ax.storage.sqa_store.load": [[14, "module-ax.storage.sqa_store.load"]], "ax.storage.sqa_store.reduced_state": [[14, "module-ax.storage.sqa_store.reduced_state"]], "ax.storage.sqa_store.save": [[14, "module-ax.storage.sqa_store.save"]], "ax.storage.sqa_store.sqa_classes": [[14, "module-ax.storage.sqa_store.sqa_classes"]], "ax.storage.sqa_store.sqa_enum": [[14, "module-ax.storage.sqa_store.sqa_enum"]], "ax.storage.sqa_store.structs": [[14, "module-ax.storage.sqa_store.structs"]], "ax.storage.sqa_store.timestamp": [[14, "module-ax.storage.sqa_store.timestamp"]], "ax.storage.sqa_store.utils": [[14, "module-ax.storage.sqa_store.utils"]], "ax.storage.sqa_store.validation": [[14, "module-ax.storage.sqa_store.validation"]], "ax.storage.transform_registry": [[14, "module-ax.storage.transform_registry"]], "ax.storage.utils": [[14, "module-ax.storage.utils"]], "ax_class_from_json_dict() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.ax_class_from_json_dict"]], "batch_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.batch_to_dict"]], "batch_trial_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.batch_trial_from_json"]], "best_model_selector_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.best_model_selector_to_dict"]], "botorch_component_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.botorch_component_from_json"]], "botorch_component_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.botorch_component_to_dict"]], "botorch_input_transform_to_init_args() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.botorch_input_transform_to_init_args"]], "botorch_model_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.botorch_model_to_dict"]], "botorch_modular_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.botorch_modular_to_dict"]], "cache_ok (ax.storage.sqa_store.json.jsonencodedobject attribute)": [[14, "ax.storage.sqa_store.json.JSONEncodedObject.cache_ok"]], "cache_ok (ax.storage.sqa_store.sqa_enum.basenullableenum attribute)": [[14, "ax.storage.sqa_store.sqa_enum.BaseNullableEnum.cache_ok"]], "cache_ok (ax.storage.sqa_store.timestamp.inttimestamp attribute)": [[14, "ax.storage.sqa_store.timestamp.IntTimestamp.cache_ok"]], "choice_parameter_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.choice_parameter_to_dict"]], "class_decoder_registry (ax.storage.registry_bundle.registrybundlebase property)": [[14, "ax.storage.registry_bundle.RegistryBundleBase.class_decoder_registry"]], "class_encoder_registry (ax.storage.registry_bundle.registrybundlebase property)": [[14, "ax.storage.registry_bundle.RegistryBundleBase.class_encoder_registry"]], "class_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.class_from_json"]], "config (ax.storage.sqa_store.decoder.decoder attribute)": [[14, "ax.storage.sqa_store.decoder.Decoder.config"]], "config (ax.storage.sqa_store.encoder.encoder attribute)": [[14, "ax.storage.sqa_store.encoder.Encoder.config"]], "consistency_exactly_one() (in module ax.storage.sqa_store.validation)": [[14, "ax.storage.sqa_store.validation.consistency_exactly_one"]], "copy_db_ids() (in module ax.storage.sqa_store.utils)": [[14, "ax.storage.sqa_store.utils.copy_db_ids"]], "create_all_tables() (in module ax.storage.sqa_store.db)": [[14, "ax.storage.sqa_store.db.create_all_tables"]], "create_mysql_engine_from_creator() (in module ax.storage.sqa_store.db)": [[14, "ax.storage.sqa_store.db.create_mysql_engine_from_creator"]], "create_mysql_engine_from_url() (in module ax.storage.sqa_store.db)": [[14, "ax.storage.sqa_store.db.create_mysql_engine_from_url"]], "create_test_engine() (in module ax.storage.sqa_store.db)": [[14, "ax.storage.sqa_store.db.create_test_engine"]], "creator (ax.storage.sqa_store.structs.dbsettings attribute)": [[14, "ax.storage.sqa_store.structs.DBSettings.creator"]], "data (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAExperiment.data"]], "data_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.data_from_json"]], "data_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.data_from_sqa"]], "data_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.data_to_dict"]], "data_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.data_to_sqa"]], "decoder (ax.storage.registry_bundle.registrybundle property)": [[14, "ax.storage.registry_bundle.RegistryBundle.decoder"]], "decoder (ax.storage.registry_bundle.registrybundlebase property)": [[14, "ax.storage.registry_bundle.RegistryBundleBase.decoder"]], "decoder (ax.storage.sqa_store.structs.dbsettings attribute)": [[14, "ax.storage.sqa_store.structs.DBSettings.decoder"]], "decoder_registry (ax.storage.registry_bundle.registrybundlebase property)": [[14, "ax.storage.registry_bundle.RegistryBundleBase.decoder_registry"]], "default_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.default_from_json"]], "default_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.default_to_dict"]], "delete_experiment() (in module ax.storage.sqa_store.delete)": [[14, "ax.storage.sqa_store.delete.delete_experiment"]], "delete_generation_strategy() (in module ax.storage.sqa_store.delete)": [[14, "ax.storage.sqa_store.delete.delete_generation_strategy"]], "dependents (ax.storage.sqa_store.sqa_classes.sqaparameter attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAParameter.dependents"]], "do_not_set_existing_value_to_null() (in module ax.storage.sqa_store.validation)": [[14, "ax.storage.sqa_store.validation.do_not_set_existing_value_to_null"]], "encoder (ax.storage.registry_bundle.registrybundle property)": [[14, "ax.storage.registry_bundle.RegistryBundle.encoder"]], "encoder (ax.storage.registry_bundle.registrybundlebase property)": [[14, "ax.storage.registry_bundle.RegistryBundleBase.encoder"]], "encoder (ax.storage.sqa_store.structs.dbsettings attribute)": [[14, "ax.storage.sqa_store.structs.DBSettings.encoder"]], "encoder_registry (ax.storage.registry_bundle.registrybundlebase property)": [[14, "ax.storage.registry_bundle.RegistryBundleBase.encoder_registry"]], "environmental_variable_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.environmental_variable_from_sqa"]], "environmental_variable_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.environmental_variable_to_sqa"]], "experiment_data_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.experiment_data_to_sqa"]], "experiment_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.experiment_from_json"]], "experiment_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.experiment_from_sqa"]], "experiment_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.experiment_to_dict"]], "experiment_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.experiment_to_sqa"]], "fixed_parameter_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.fixed_parameter_to_dict"]], "fixed_value (ax.storage.sqa_store.sqa_classes.sqaparameter attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAParameter.fixed_value"]], "from_registry_bundles() (ax.storage.registry_bundle.registrybundlebase class method)": [[14, "ax.storage.registry_bundle.RegistryBundleBase.from_registry_bundles"]], "generation_node_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.generation_node_from_json"]], "generation_node_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.generation_node_to_dict"]], "generation_step_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.generation_step_from_json"]], "generation_step_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.generation_step_to_dict"]], "generation_strategy (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAExperiment.generation_strategy"]], "generation_strategy_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.generation_strategy_from_json"]], "generation_strategy_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.generation_strategy_from_sqa"]], "generation_strategy_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.generation_strategy_to_dict"]], "generation_strategy_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.generation_strategy_to_sqa"]], "generator_run_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.generator_run_from_json"]], "generator_run_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.generator_run_from_sqa"]], "generator_run_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.generator_run_to_dict"]], "generator_run_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.generator_run_to_sqa"]], "generator_runs (ax.storage.sqa_store.sqa_classes.sqagenerationstrategy attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAGenerationStrategy.generator_runs"]], "generator_runs (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQATrial.generator_runs"]], "get_children_metrics_by_name() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.get_children_metrics_by_name"]], "get_engine() (in module ax.storage.sqa_store.db)": [[14, "ax.storage.sqa_store.db.get_engine"]], "get_enum_name() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.get_enum_name"]], "get_enum_value() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.get_enum_value"]], "get_generation_strategy_id() (in module ax.storage.sqa_store.load)": [[14, "ax.storage.sqa_store.load.get_generation_strategy_id"]], "get_generation_strategy_sqa() (in module ax.storage.sqa_store.load)": [[14, "ax.storage.sqa_store.load.get_generation_strategy_sqa"]], "get_generation_strategy_sqa_reduced_state() (in module ax.storage.sqa_store.load)": [[14, "ax.storage.sqa_store.load.get_generation_strategy_sqa_reduced_state"]], "get_generator_runs_by_id() (in module ax.storage.sqa_store.load)": [[14, "ax.storage.sqa_store.load.get_generator_runs_by_id"]], "get_input_transform_json_components() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.get_input_transform_json_components"]], "get_metric_type_and_properties() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.get_metric_type_and_properties"]], "get_outcome_transform_json_components() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.get_outcome_transform_json_components"]], "get_query_options_to_defer_immutable_duplicates() (in module ax.storage.sqa_store.reduced_state)": [[14, "ax.storage.sqa_store.reduced_state.get_query_options_to_defer_immutable_duplicates"]], "get_query_options_to_defer_large_model_cols() (in module ax.storage.sqa_store.reduced_state)": [[14, "ax.storage.sqa_store.reduced_state.get_query_options_to_defer_large_model_cols"]], "get_session() (in module ax.storage.sqa_store.db)": [[14, "ax.storage.sqa_store.db.get_session"]], "impl (ax.storage.sqa_store.json.jsonencodedlongtext attribute)": [[14, "ax.storage.sqa_store.json.JSONEncodedLongText.impl"]], "impl (ax.storage.sqa_store.json.jsonencodedmediumtext attribute)": [[14, "ax.storage.sqa_store.json.JSONEncodedMediumText.impl"]], "impl (ax.storage.sqa_store.json.jsonencodedobject attribute)": [[14, "ax.storage.sqa_store.json.JSONEncodedObject.impl"]], "impl (ax.storage.sqa_store.sqa_enum.stringenum attribute)": [[14, "ax.storage.sqa_store.sqa_enum.StringEnum.impl"]], "improvement_global_stopping_strategy_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.improvement_global_stopping_strategy_to_dict"]], "init_engine_and_session_factory() (in module ax.storage.sqa_store.db)": [[14, "ax.storage.sqa_store.db.init_engine_and_session_factory"]], "init_test_engine_and_session_factory() (in module ax.storage.sqa_store.db)": [[14, "ax.storage.sqa_store.db.init_test_engine_and_session_factory"]], "input_transform_type_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.input_transform_type_from_json"]], "is_batch (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQATrial.is_batch"]], "is_foreign_key_field() (in module ax.storage.sqa_store.utils)": [[14, "ax.storage.sqa_store.utils.is_foreign_key_field"]], "listens_for_multiple() (in module ax.storage.sqa_store.validation)": [[14, "ax.storage.sqa_store.validation.listens_for_multiple"]], "load_analysis_cards_by_experiment_name() (in module ax.storage.sqa_store.load)": [[14, "ax.storage.sqa_store.load.load_analysis_cards_by_experiment_name"]], "load_experiment() (in module ax.storage.json_store.load)": [[14, "ax.storage.json_store.load.load_experiment"]], "load_experiment() (in module ax.storage.sqa_store.load)": [[14, "ax.storage.sqa_store.load.load_experiment"]], "load_generation_strategy_by_experiment_name() (in module ax.storage.sqa_store.load)": [[14, "ax.storage.sqa_store.load.load_generation_strategy_by_experiment_name"]], "load_generation_strategy_by_id() (in module ax.storage.sqa_store.load)": [[14, "ax.storage.sqa_store.load.load_generation_strategy_by_id"]], "logger (in module ax.storage.metric_registry)": [[14, "ax.storage.metric_registry.logger"]], "logical_early_stopping_strategy_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.logical_early_stopping_strategy_to_dict"]], "map_data_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.map_data_to_dict"]], "map_key_info_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.map_key_info_to_dict"]], "metric_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.metric_from_sqa"]], "metric_registry (ax.storage.registry_bundle.registrybundlebase property)": [[14, "ax.storage.registry_bundle.RegistryBundleBase.metric_registry"]], "metric_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.metric_to_dict"]], "metric_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.metric_to_sqa"]], "metrics (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAExperiment.metrics"]], "metrics (ax.storage.sqa_store.sqa_classes.sqageneratorrun attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun.metrics"]], "model_spec_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.model_spec_from_json"]], "model_spec_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.model_spec_to_dict"]], "multi_objective_optimization_config_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.multi_objective_optimization_config_to_dict"]], "multi_objective_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.multi_objective_to_dict"]], "multi_objective_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.multi_objective_to_sqa"]], "multi_type_experiment_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.multi_type_experiment_from_json"]], "multi_type_experiment_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.multi_type_experiment_to_dict"]], "object_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.object_from_json"]], "object_to_json() (in module ax.storage.json_store.encoder)": [[14, "ax.storage.json_store.encoder.object_to_json"]], "objective_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.objective_from_json"]], "objective_threshold_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.objective_threshold_to_sqa"]], "objective_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.objective_to_dict"]], "objective_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.objective_to_sqa"]], "observation_features_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.observation_features_to_dict"]], "opt_config_and_tracking_metrics_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.opt_config_and_tracking_metrics_from_sqa"]], "optimization_config_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.optimization_config_to_dict"]], "optimization_config_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.optimization_config_to_sqa"]], "order_parameter_constraint_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.order_parameter_constraint_to_dict"]], "outcome_constraint_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.outcome_constraint_to_dict"]], "outcome_constraint_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.outcome_constraint_to_sqa"]], "outcome_transform_type_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.outcome_transform_type_from_json"]], "parameter_constraint_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.parameter_constraint_from_sqa"]], "parameter_constraint_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.parameter_constraint_to_dict"]], "parameter_constraint_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.parameter_constraint_to_sqa"]], "parameter_constraints (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAExperiment.parameter_constraints"]], "parameter_constraints (ax.storage.sqa_store.sqa_classes.sqageneratorrun attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun.parameter_constraints"]], "parameter_constraints_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.parameter_constraints_from_json"]], "parameter_distribution_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.parameter_distribution_to_dict"]], "parameter_distribution_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.parameter_distribution_to_sqa"]], "parameter_distributions_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.parameter_distributions_from_sqa"]], "parameter_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.parameter_from_sqa"]], "parameter_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.parameter_to_sqa"]], "parameters (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAExperiment.parameters"]], "parameters (ax.storage.sqa_store.sqa_classes.sqageneratorrun attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun.parameters"]], "pathlib_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.pathlib_from_json"]], "pathlib_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.pathlib_to_dict"]], "percentile_early_stopping_strategy_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.percentile_early_stopping_strategy_to_dict"]], "process_bind_param() (ax.storage.sqa_store.json.jsonencodedobject method)": [[14, "ax.storage.sqa_store.json.JSONEncodedObject.process_bind_param"]], "process_bind_param() (ax.storage.sqa_store.sqa_enum.basenullableenum method)": [[14, "ax.storage.sqa_store.sqa_enum.BaseNullableEnum.process_bind_param"]], "process_bind_param() (ax.storage.sqa_store.timestamp.inttimestamp method)": [[14, "ax.storage.sqa_store.timestamp.IntTimestamp.process_bind_param"]], "process_result_value() (ax.storage.sqa_store.json.jsonencodedobject method)": [[14, "ax.storage.sqa_store.json.JSONEncodedObject.process_result_value"]], "process_result_value() (ax.storage.sqa_store.sqa_enum.basenullableenum method)": [[14, "ax.storage.sqa_store.sqa_enum.BaseNullableEnum.process_result_value"]], "process_result_value() (ax.storage.sqa_store.timestamp.inttimestamp method)": [[14, "ax.storage.sqa_store.timestamp.IntTimestamp.process_result_value"]], "pytorch_cnn_torchvision_benchmark_problem_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.pytorch_cnn_torchvision_benchmark_problem_to_dict"]], "range_parameter_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.range_parameter_to_dict"]], "register_acquisition() (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.register_acquisition"]], "register_acquisition_function() (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.register_acquisition_function"]], "register_kernel() (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.register_kernel"]], "register_metrics() (in module ax.storage.metric_registry)": [[14, "ax.storage.metric_registry.register_metrics"]], "register_model() (in module ax.storage.botorch_modular_registry)": [[14, "ax.storage.botorch_modular_registry.register_model"]], "register_runner() (in module ax.storage.runner_registry)": [[14, "ax.storage.runner_registry.register_runner"]], "register_runners() (in module ax.storage.runner_registry)": [[14, "ax.storage.runner_registry.register_runners"]], "risk_measure_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.risk_measure_to_dict"]], "risk_measure_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.risk_measure_to_sqa"]], "robust_search_space_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.robust_search_space_to_dict"]], "robust_search_space_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.robust_search_space_to_sqa"]], "runner (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQATrial.runner"]], "runner_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.runner_from_sqa"]], "runner_registry (ax.storage.registry_bundle.registrybundlebase property)": [[14, "ax.storage.registry_bundle.RegistryBundleBase.runner_registry"]], "runner_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.runner_to_dict"]], "runner_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.runner_to_sqa"]], "runners (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAExperiment.runners"]], "save_analysis_cards() (in module ax.storage.sqa_store.save)": [[14, "ax.storage.sqa_store.save.save_analysis_cards"]], "save_experiment() (in module ax.storage.json_store.save)": [[14, "ax.storage.json_store.save.save_experiment"]], "save_experiment() (in module ax.storage.sqa_store.save)": [[14, "ax.storage.sqa_store.save.save_experiment"]], "save_generation_strategy() (in module ax.storage.sqa_store.save)": [[14, "ax.storage.sqa_store.save.save_generation_strategy"]], "save_or_update_trial() (in module ax.storage.sqa_store.save)": [[14, "ax.storage.sqa_store.save.save_or_update_trial"]], "save_or_update_trials() (in module ax.storage.sqa_store.save)": [[14, "ax.storage.sqa_store.save.save_or_update_trials"]], "scalarized_objective_children_metrics (ax.storage.sqa_store.sqa_classes.sqametric attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAMetric.scalarized_objective_children_metrics"]], "scalarized_objective_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.scalarized_objective_to_dict"]], "scalarized_objective_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.scalarized_objective_to_sqa"]], "scalarized_outcome_constraint_children_metrics (ax.storage.sqa_store.sqa_classes.sqametric attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAMetric.scalarized_outcome_constraint_children_metrics"]], "scalarized_outcome_constraint_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.scalarized_outcome_constraint_to_sqa"]], "search_space_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.search_space_from_json"]], "search_space_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.search_space_from_sqa"]], "search_space_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.search_space_to_dict"]], "search_space_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.search_space_to_sqa"]], "session_scope() (in module ax.storage.sqa_store.db)": [[14, "ax.storage.sqa_store.db.session_scope"]], "sqa_config (ax.storage.registry_bundle.registrybundle property)": [[14, "ax.storage.registry_bundle.RegistryBundle.sqa_config"]], "sqa_config (ax.storage.registry_bundle.registrybundlebase property)": [[14, "ax.storage.registry_bundle.RegistryBundleBase.sqa_config"]], "stable_hash() (in module ax.storage.utils)": [[14, "ax.storage.utils.stable_hash"]], "sum_parameter_constraint_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.sum_parameter_constraint_to_dict"]], "surrogate_from_list_surrogate_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.surrogate_from_list_surrogate_json"]], "surrogate_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.surrogate_to_dict"]], "target_value (ax.storage.sqa_store.sqa_classes.sqaparameter attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAParameter.target_value"]], "tensor_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.tensor_from_json"]], "tensor_or_size_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.tensor_or_size_from_json"]], "tensor_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.tensor_to_dict"]], "threshold_early_stopping_strategy_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.threshold_early_stopping_strategy_to_dict"]], "time_abandoned (ax.storage.sqa_store.sqa_classes.sqaabandonedarm attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAAbandonedArm.time_abandoned"]], "time_completed (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQATrial.time_completed"]], "time_created (ax.storage.sqa_store.sqa_classes.sqaanalysiscard attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAAnalysisCard.time_created"]], "time_created (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAExperiment.time_created"]], "time_created (ax.storage.sqa_store.sqa_classes.sqageneratorrun attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun.time_created"]], "time_created (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQATrial.time_created"]], "time_run_started (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQATrial.time_run_started"]], "time_staged (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQATrial.time_staged"]], "transform_type_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.transform_type_from_json"]], "transform_type_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.transform_type_to_dict"]], "transition_criterion_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.transition_criterion_to_dict"]], "trial_from_json() (in module ax.storage.json_store.decoders)": [[14, "ax.storage.json_store.decoders.trial_from_json"]], "trial_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[14, "ax.storage.sqa_store.decoder.Decoder.trial_from_sqa"]], "trial_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.trial_to_dict"]], "trial_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[14, "ax.storage.sqa_store.encoder.Encoder.trial_to_sqa"]], "trial_transition_criteria_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.trial_transition_criteria_from_json"]], "trials (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[14, "ax.storage.sqa_store.sqa_classes.SQAExperiment.trials"]], "trials_from_json() (in module ax.storage.json_store.decoder)": [[14, "ax.storage.json_store.decoder.trials_from_json"]], "update_generation_strategy() (in module ax.storage.sqa_store.save)": [[14, "ax.storage.sqa_store.save.update_generation_strategy"]], "update_outcome_constraint_on_experiment() (in module ax.storage.sqa_store.save)": [[14, "ax.storage.sqa_store.save.update_outcome_constraint_on_experiment"]], "update_properties_on_experiment() (in module ax.storage.sqa_store.save)": [[14, "ax.storage.sqa_store.save.update_properties_on_experiment"]], "update_properties_on_trial() (in module ax.storage.sqa_store.save)": [[14, "ax.storage.sqa_store.save.update_properties_on_trial"]], "update_runner_on_experiment() (in module ax.storage.sqa_store.save)": [[14, "ax.storage.sqa_store.save.update_runner_on_experiment"]], "url (ax.storage.sqa_store.structs.dbsettings attribute)": [[14, "ax.storage.sqa_store.structs.DBSettings.url"]], "validate_experiment_metadata() (ax.storage.sqa_store.encoder.encoder class method)": [[14, "ax.storage.sqa_store.encoder.Encoder.validate_experiment_metadata"]], "winsorization_config_to_dict() (in module ax.storage.json_store.encoders)": [[14, "ax.storage.json_store.encoders.winsorization_config_to_dict"]], "experimentcompletedrecord (class in ax.telemetry.experiment)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord"]], "experimentcreatedrecord (class in ax.telemetry.experiment)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord"]], "generationstrategycreatedrecord (class in ax.telemetry.generation_strategy)": [[15, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord"]], "schedulercompletedrecord (class in ax.telemetry.scheduler)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord"]], "schedulercreatedrecord (class in ax.telemetry.scheduler)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord"]], "arms_per_trial (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord.arms_per_trial"]], "ax.telemetry": [[15, "module-ax.telemetry"]], "ax.telemetry.experiment": [[15, "module-ax.telemetry.experiment"]], "ax.telemetry.generation_strategy": [[15, "module-ax.telemetry.generation_strategy"]], "ax.telemetry.scheduler": [[15, "module-ax.telemetry.scheduler"]], "best_point_quality (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.best_point_quality"]], "dimensionality (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.dimensionality"]], "early_stopping_strategy_cls (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord.early_stopping_strategy_cls"]], "experiment_completed_record (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.experiment_completed_record"]], "experiment_created_record (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord.experiment_created_record"]], "experiment_name (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.experiment_name"]], "experiment_type (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.experiment_type"]], "flatten() (ax.telemetry.scheduler.schedulercompletedrecord method)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.flatten"]], "flatten() (ax.telemetry.scheduler.schedulercreatedrecord method)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord.flatten"]], "from_experiment() (ax.telemetry.experiment.experimentcompletedrecord class method)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord.from_experiment"]], "from_experiment() (ax.telemetry.experiment.experimentcreatedrecord class method)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.from_experiment"]], "from_generation_strategy() (ax.telemetry.generation_strategy.generationstrategycreatedrecord class method)": [[15, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.from_generation_strategy"]], "from_scheduler() (ax.telemetry.scheduler.schedulercompletedrecord class method)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.from_scheduler"]], "from_scheduler() (ax.telemetry.scheduler.schedulercreatedrecord class method)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord.from_scheduler"]], "generation_strategy_created_record (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord.generation_strategy_created_record"]], "generation_strategy_name (ax.telemetry.generation_strategy.generationstrategycreatedrecord attribute)": [[15, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.generation_strategy_name"]], "global_stopping_strategy_cls (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord.global_stopping_strategy_cls"]], "hierarchical_tree_height (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.hierarchical_tree_height"]], "improvement_over_baseline (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.improvement_over_baseline"]], "max_parallelism (ax.telemetry.generation_strategy.generationstrategycreatedrecord attribute)": [[15, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.max_parallelism"]], "metric_cls_to_quantity (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.metric_cls_to_quantity"]], "model_fit_generalization (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.model_fit_generalization"]], "model_fit_quality (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.model_fit_quality"]], "model_std_generalization (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.model_std_generalization"]], "model_std_quality (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.model_std_quality"]], "num_abandoned_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord.num_abandoned_trials"]], "num_bayesopt_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord.num_bayesopt_trials"]], "num_completed_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord.num_completed_trials"]], "num_continuous_range_parameters (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_continuous_range_parameters"]], "num_early_stopped_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord.num_early_stopped_trials"]], "num_failed_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord.num_failed_trials"]], "num_fixed_parameters (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_fixed_parameters"]], "num_initialization_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord.num_initialization_trials"]], "num_int_range_parameters_large (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_int_range_parameters_large"]], "num_int_range_parameters_medium (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_int_range_parameters_medium"]], "num_int_range_parameters_small (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_int_range_parameters_small"]], "num_log_scale_range_parameters (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_log_scale_range_parameters"]], "num_map_metrics (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_map_metrics"]], "num_metric_fetch_e_encountered (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.num_metric_fetch_e_encountered"]], "num_objectives (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_objectives"]], "num_other_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord.num_other_trials"]], "num_outcome_constraints (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_outcome_constraints"]], "num_parameter_constraints (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_parameter_constraints"]], "num_requested_bayesopt_trials (ax.telemetry.generation_strategy.generationstrategycreatedrecord attribute)": [[15, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.num_requested_bayesopt_trials"]], "num_requested_initialization_trials (ax.telemetry.generation_strategy.generationstrategycreatedrecord attribute)": [[15, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.num_requested_initialization_trials"]], "num_requested_other_trials (ax.telemetry.generation_strategy.generationstrategycreatedrecord attribute)": [[15, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.num_requested_other_trials"]], "num_tracking_metrics (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_tracking_metrics"]], "num_trials_bad_due_to_err (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCompletedRecord.num_trials_bad_due_to_err"]], "num_unordered_choice_parameters_large (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_unordered_choice_parameters_large"]], "num_unordered_choice_parameters_medium (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_unordered_choice_parameters_medium"]], "num_unordered_choice_parameters_small (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.num_unordered_choice_parameters_small"]], "runner_cls (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCreatedRecord.runner_cls"]], "scheduler_max_pending_trials (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord.scheduler_max_pending_trials"]], "scheduler_total_trials (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord.scheduler_total_trials"]], "total_fit_time (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord.total_fit_time"]], "total_gen_time (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[15, "ax.telemetry.experiment.ExperimentCompletedRecord.total_gen_time"]], "transformed_dimensionality (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[15, "ax.telemetry.scheduler.SchedulerCreatedRecord.transformed_dimensionality"]], "a000() (in module ax.utils.flake8_plugins.docstring_checker)": [[16, "ax.utils.flake8_plugins.docstring_checker.A000"]], "acqf_kwargs (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.ACQF_KWARGS"]], "autoset_surrogate (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.AUTOSET_SURROGATE"]], "asyncsimulatedbackendscheduler (class in ax.utils.testing.backend_scheduler)": [[16, "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler"]], "aug_branin (class in ax.utils.measurement.synthetic_functions)": [[16, "ax.utils.measurement.synthetic_functions.Aug_Branin"]], "aug_hartmann6 (class in ax.utils.measurement.synthetic_functions)": [[16, "ax.utils.measurement.synthetic_functions.Aug_Hartmann6"]], "axoutputnamefilter (class in ax.utils.common.logger)": [[16, "ax.utils.common.logger.AxOutputNameFilter"]], "batch_init_conditions (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.BATCH_INIT_CONDITIONS"]], "backendsimulator (class in ax.utils.testing.backend_simulator)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator"]], "backendsimulatoroptions (class in ax.utils.testing.backend_simulator)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorOptions"]], "backendsimulatorstate (class in ax.utils.testing.backend_simulator)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorState"]], "backendsimulatortimestampmapmetric (class in ax.utils.testing.metrics.backend_simulator_map)": [[16, "ax.utils.testing.metrics.backend_simulator_map.BackendSimulatorTimestampMapMetric"]], "base (class in ax.utils.common.base)": [[16, "ax.utils.common.base.Base"]], "branin (class in ax.utils.measurement.synthetic_functions)": [[16, "ax.utils.measurement.synthetic_functions.Branin"]], "braninbackendmapmetric (class in ax.utils.testing.metrics.branin_backend_map)": [[16, "ax.utils.testing.metrics.branin_backend_map.BraninBackendMapMetric"]], "candidate_set (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.CANDIDATE_SET"]], "candidate_size (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.CANDIDATE_SIZE"]], "cnn (class in ax.utils.tutorials.cnn_utils)": [[16, "ax.utils.tutorials.cnn_utils.CNN"]], "cost_aware_utility (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.COST_AWARE_UTILITY"]], "cost_intercept (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.COST_INTERCEPT"]], "current_value (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.CURRENT_VALUE"]], "classdecorator (class in ax.utils.common.decorator)": [[16, "ax.utils.common.decorator.ClassDecorator"]], "customtestmetric (class in ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.CustomTestMetric"]], "customtestrunner (class in ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.CustomTestRunner"]], "decorate_private (ax.utils.common.decorator.classdecorator attribute)": [[16, "ax.utils.common.decorator.ClassDecorator.DECORATE_PRIVATE"]], "default_kde_bandwidth (in module ax.utils.stats.model_fit_stats)": [[16, "ax.utils.stats.model_fit_stats.DEFAULT_KDE_BANDWIDTH"]], "docstringchecker (class in ax.utils.flake8_plugins.docstring_checker)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker"]], "docstringcheckervisitor (class in ax.utils.flake8_plugins.docstring_checker)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor"]], "dummyearlystoppingstrategy (class in ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.DummyEarlyStoppingStrategy"]], "dummyglobalstoppingstrategy (class in ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.DummyGlobalStoppingStrategy"]], "expand (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.EXPAND"]], "expected_acqf_val (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.EXPECTED_ACQF_VAL"]], "err (class in ax.utils.common.result)": [[16, "ax.utils.common.result.Err"]], "error (class in ax.utils.flake8_plugins.docstring_checker)": [[16, "ax.utils.flake8_plugins.docstring_checker.Error"]], "fidelity_features (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.FIDELITY_FEATURES"]], "fidelity_weights (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.FIDELITY_WEIGHTS"]], "frac_random (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.FRAC_RANDOM"]], "full_parameterization (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.FULL_PARAMETERIZATION"]], "frombotorch (class in ax.utils.measurement.synthetic_functions)": [[16, "ax.utils.measurement.synthetic_functions.FromBotorch"]], "gaussianlinkmean() (in module ax.utils.sensitivity.sobol_measures)": [[16, "ax.utils.sensitivity.sobol_measures.GaussianLinkMean"]], "gpdgsmgpmean (class in ax.utils.sensitivity.derivative_measures)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean"]], "gpdgsmgpsampling (class in ax.utils.sensitivity.derivative_measures)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpSampling"]], "hartmann6 (class in ax.utils.measurement.synthetic_functions)": [[16, "ax.utils.measurement.synthetic_functions.Hartmann6"]], "immutable_search_space_and_opt_conf (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.IMMUTABLE_SEARCH_SPACE_AND_OPT_CONF"]], "inittest (class in ax.utils.testing.test_init_files)": [[16, "ax.utils.testing.test_init_files.InitTest"]], "keys (class in ax.utils.common.constants)": [[16, "ax.utils.common.constants.Keys"]], "maximize (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.MAXIMIZE"]], "metadata (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.METADATA"]], "metric_names (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.METRIC_NAMES"]], "modelfitmetricprotocol (class in ax.utils.stats.model_fit_stats)": [[16, "ax.utils.stats.model_fit_stats.ModelFitMetricProtocol"]], "num_fantasies (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.NUM_FANTASIES"]], "num_inner_restarts (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.NUM_INNER_RESTARTS"]], "num_restarts (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.NUM_RESTARTS"]], "num_trace_observations (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.NUM_TRACE_OBSERVATIONS"]], "objective (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.OBJECTIVE"]], "only_surrogate (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.ONLY_SURROGATE"]], "optimizer_kwargs (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.OPTIMIZER_KWARGS"]], "ok (class in ax.utils.common.result)": [[16, "ax.utils.common.result.Ok"]], "pairwise_preference_query (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.PAIRWISE_PREFERENCE_QUERY"]], "preference_data (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.PREFERENCE_DATA"]], "primary_surrogate (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.PRIMARY_SURROGATE"]], "project (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.PROJECT"]], "probitlinkmean() (in module ax.utils.sensitivity.sobol_measures)": [[16, "ax.utils.sensitivity.sobol_measures.ProbitLinkMean"]], "qmc (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.QMC"]], "raw_inner_samples (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.RAW_INNER_SAMPLES"]], "raw_samples (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.RAW_SAMPLES"]], "result (class in ax.utils.common.result)": [[16, "ax.utils.common.result.Result"]], "sampler (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.SAMPLER"]], "seed_inner (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.SEED_INNER"]], "sequential (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.SEQUENTIAL"]], "state_dict (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.STATE_DICT"]], "subclass (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.SUBCLASS"]], "subset_model (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.SUBSET_MODEL"]], "serializationmixin (class in ax.utils.common.serialization)": [[16, "ax.utils.common.serialization.SerializationMixin"]], "simstatus (class in ax.utils.testing.backend_simulator)": [[16, "ax.utils.testing.backend_simulator.SimStatus"]], "simtrial (class in ax.utils.testing.backend_simulator)": [[16, "ax.utils.testing.backend_simulator.SimTrial"]], "sobolsensitivity (class in ax.utils.sensitivity.sobol_measures)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivity"]], "sobolsensitivitygpmean (class in ax.utils.sensitivity.sobol_measures)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPMean"]], "sobolsensitivitygpsampling (class in ax.utils.sensitivity.sobol_measures)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling"]], "sortablebase (class in ax.utils.common.base)": [[16, "ax.utils.common.base.SortableBase"]], "specialgenerationstrategy (class in ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.SpecialGenerationStrategy"]], "syntheticfunction (class in ax.utils.measurement.synthetic_functions)": [[16, "ax.utils.measurement.synthetic_functions.SyntheticFunction"]], "task_features (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.TASK_FEATURES"]], "trial_completion_timestamp (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.TRIAL_COMPLETION_TIMESTAMP"]], "testcase (class in ax.utils.common.testutils)": [[16, "ax.utils.common.testutils.TestCase"]], "testtrial (class in ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.TestTrial"]], "unwraperror": [[16, "ax.utils.common.result.UnwrapError"]], "warm_start_refitting (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.WARM_START_REFITTING"]], "x_baseline (ax.utils.common.constants.keys attribute)": [[16, "ax.utils.common.constants.Keys.X_BASELINE"]], "abandoned_arms() (ax.utils.testing.core_stubs.testtrial method)": [[16, "ax.utils.testing.core_stubs.TestTrial.abandoned_arms"]], "aggregation() (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean method)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.aggregation"]], "aggregation() (ax.utils.sensitivity.derivative_measures.gpdgsmgpsampling method)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpSampling.aggregation"]], "agresti_coull_sem() (in module ax.utils.stats.statstools)": [[16, "ax.utils.stats.statstools.agresti_coull_sem"]], "all_trials (ax.utils.testing.backend_simulator.backendsimulator property)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.all_trials"]], "arms (ax.utils.testing.core_stubs.testtrial property)": [[16, "ax.utils.testing.core_stubs.TestTrial.arms"]], "arms_by_name() (ax.utils.testing.core_stubs.testtrial method)": [[16, "ax.utils.testing.core_stubs.TestTrial.arms_by_name"]], "assertaxbaseequal() (ax.utils.common.testutils.testcase method)": [[16, "ax.utils.common.testutils.TestCase.assertAxBaseEqual"]], "assertdictsalmostequal() (ax.utils.common.testutils.testcase method)": [[16, "ax.utils.common.testutils.TestCase.assertDictsAlmostEqual"]], "assertequal() (ax.utils.common.testutils.testcase method)": [[16, "ax.utils.common.testutils.TestCase.assertEqual"]], "assertraiseson() (ax.utils.common.testutils.testcase method)": [[16, "ax.utils.common.testutils.TestCase.assertRaisesOn"]], "ax.utils": [[16, "module-ax.utils"]], "ax.utils.common.base": [[16, "module-ax.utils.common.base"]], "ax.utils.common.constants": [[16, "module-ax.utils.common.constants"]], "ax.utils.common.decorator": [[16, "module-ax.utils.common.decorator"]], "ax.utils.common.docutils": [[16, "module-ax.utils.common.docutils"]], "ax.utils.common.equality": [[16, "module-ax.utils.common.equality"]], "ax.utils.common.executils": [[16, "module-ax.utils.common.executils"]], "ax.utils.common.kwargs": [[16, "module-ax.utils.common.kwargs"]], "ax.utils.common.logger": [[16, "module-ax.utils.common.logger"]], "ax.utils.common.mock": [[16, "module-ax.utils.common.mock"]], "ax.utils.common.random": [[16, "module-ax.utils.common.random"]], "ax.utils.common.result": [[16, "module-ax.utils.common.result"]], "ax.utils.common.serialization": [[16, "module-ax.utils.common.serialization"]], "ax.utils.common.testutils": [[16, "module-ax.utils.common.testutils"]], "ax.utils.common.timeutils": [[16, "module-ax.utils.common.timeutils"]], "ax.utils.common.typeutils": [[16, "module-ax.utils.common.typeutils"]], "ax.utils.common.typeutils_nonnative": [[16, "module-ax.utils.common.typeutils_nonnative"]], "ax.utils.common.typeutils_torch": [[16, "module-ax.utils.common.typeutils_torch"]], "ax.utils.flake8_plugins.docstring_checker": [[16, "module-ax.utils.flake8_plugins.docstring_checker"]], "ax.utils.measurement.synthetic_functions": [[16, "module-ax.utils.measurement.synthetic_functions"]], "ax.utils.notebook.plotting": [[16, "module-ax.utils.notebook.plotting"]], "ax.utils.report.render": [[16, "module-ax.utils.report.render"]], "ax.utils.sensitivity.derivative_gp": [[16, "module-ax.utils.sensitivity.derivative_gp"]], "ax.utils.sensitivity.derivative_measures": [[16, "module-ax.utils.sensitivity.derivative_measures"]], "ax.utils.sensitivity.sobol_measures": [[16, "module-ax.utils.sensitivity.sobol_measures"]], "ax.utils.stats.model_fit_stats": [[16, "module-ax.utils.stats.model_fit_stats"]], "ax.utils.stats.statstools": [[16, "module-ax.utils.stats.statstools"]], "ax.utils.testing.backend_scheduler": [[16, "module-ax.utils.testing.backend_scheduler"]], "ax.utils.testing.backend_simulator": [[16, "module-ax.utils.testing.backend_simulator"]], "ax.utils.testing.benchmark_stubs": [[16, "module-ax.utils.testing.benchmark_stubs"]], "ax.utils.testing.core_stubs": [[16, "module-ax.utils.testing.core_stubs"]], "ax.utils.testing.metrics.backend_simulator_map": [[16, "module-ax.utils.testing.metrics.backend_simulator_map"]], "ax.utils.testing.metrics.branin_backend_map": [[16, "module-ax.utils.testing.metrics.branin_backend_map"]], "ax.utils.testing.mock": [[16, "module-ax.utils.testing.mock"]], "ax.utils.testing.modeling_stubs": [[16, "module-ax.utils.testing.modeling_stubs"]], "ax.utils.testing.preference_stubs": [[16, "module-ax.utils.testing.preference_stubs"]], "ax.utils.testing.test_init_files": [[16, "module-ax.utils.testing.test_init_files"]], "ax.utils.testing.torch_stubs": [[16, "module-ax.utils.testing.torch_stubs"]], "ax.utils.testing.utils": [[16, "module-ax.utils.testing.utils"]], "ax.utils.tutorials.cnn_utils": [[16, "module-ax.utils.tutorials.cnn_utils"]], "ax_parameter_sens() (in module ax.utils.sensitivity.sobol_measures)": [[16, "ax.utils.sensitivity.sobol_measures.ax_parameter_sens"]], "backend_simulator (ax.utils.testing.backend_scheduler.asyncsimulatedbackendscheduler property)": [[16, "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler.backend_simulator"]], "bootstrap_indices (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean attribute)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.bootstrap_indices"]], "build_file_handler() (in module ax.utils.common.logger)": [[16, "ax.utils.common.logger.build_file_handler"]], "build_stream_handler() (in module ax.utils.common.logger)": [[16, "ax.utils.common.logger.build_stream_handler"]], "callable_from_reference() (in module ax.utils.common.serialization)": [[16, "ax.utils.common.serialization.callable_from_reference"]], "callable_to_reference() (in module ax.utils.common.serialization)": [[16, "ax.utils.common.serialization.callable_to_reference"]], "check_a000() (ax.utils.flake8_plugins.docstring_checker.docstringcheckervisitor method)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor.check_A000"]], "checked_cast() (in module ax.utils.common.typeutils)": [[16, "ax.utils.common.typeutils.checked_cast"]], "checked_cast_dict() (in module ax.utils.common.typeutils)": [[16, "ax.utils.common.typeutils.checked_cast_dict"]], "checked_cast_list() (in module ax.utils.common.typeutils)": [[16, "ax.utils.common.typeutils.checked_cast_list"]], "checked_cast_optional() (in module ax.utils.common.typeutils)": [[16, "ax.utils.common.typeutils.checked_cast_optional"]], "checked_cast_to_tuple() (in module ax.utils.common.typeutils)": [[16, "ax.utils.common.typeutils.checked_cast_to_tuple"]], "clone_reset() (ax.utils.testing.core_stubs.specialgenerationstrategy method)": [[16, "ax.utils.testing.core_stubs.SpecialGenerationStrategy.clone_reset"]], "coefficient_of_determination() (in module ax.utils.stats.model_fit_stats)": [[16, "ax.utils.stats.model_fit_stats.coefficient_of_determination"]], "col (ax.utils.flake8_plugins.docstring_checker.error attribute)": [[16, "ax.utils.flake8_plugins.docstring_checker.Error.col"]], "completed (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorState.completed"]], "completed (ax.utils.testing.backend_simulator.simstatus attribute)": [[16, "ax.utils.testing.backend_simulator.SimStatus.completed"], [16, "id0"]], "compute_derivatives_from_model_list() (in module ax.utils.sensitivity.derivative_measures)": [[16, "ax.utils.sensitivity.derivative_measures.compute_derivatives_from_model_list"]], "compute_model_fit_metrics() (in module ax.utils.stats.model_fit_stats)": [[16, "ax.utils.stats.model_fit_stats.compute_model_fit_metrics"]], "compute_sobol_indices_from_model_list() (in module ax.utils.sensitivity.sobol_measures)": [[16, "ax.utils.sensitivity.sobol_measures.compute_sobol_indices_from_model_list"]], "consolidate_kwargs() (in module ax.utils.common.kwargs)": [[16, "ax.utils.common.kwargs.consolidate_kwargs"]], "convert_to_timestamps() (ax.utils.testing.metrics.backend_simulator_map.backendsimulatortimestampmapmetric method)": [[16, "ax.utils.testing.metrics.backend_simulator_map.BackendSimulatorTimestampMapMetric.convert_to_timestamps"]], "convert_to_timestamps() (ax.utils.testing.metrics.branin_backend_map.braninbackendmapmetric method)": [[16, "ax.utils.testing.metrics.branin_backend_map.BraninBackendMapMetric.convert_to_timestamps"]], "copy_doc() (in module ax.utils.common.docutils)": [[16, "ax.utils.common.docutils.copy_doc"]], "current_timestamp_in_millis() (in module ax.utils.common.timeutils)": [[16, "ax.utils.common.timeutils.current_timestamp_in_millis"]], "dataframe_equals() (in module ax.utils.common.equality)": [[16, "ax.utils.common.equality.dataframe_equals"]], "datetime_equals() (in module ax.utils.common.equality)": [[16, "ax.utils.common.equality.datetime_equals"]], "db_id (ax.utils.common.base.base property)": [[16, "ax.utils.common.base.Base.db_id"]], "decorate_callable() (ax.utils.common.decorator.classdecorator method)": [[16, "ax.utils.common.decorator.ClassDecorator.decorate_callable"]], "decorate_callable() (ax.utils.common.logger.disable_logger method)": [[16, "ax.utils.common.logger.disable_logger.decorate_callable"]], "decorate_callable() (ax.utils.common.logger.disable_loggers method)": [[16, "ax.utils.common.logger.disable_loggers.decorate_callable"]], "decorate_class() (ax.utils.common.decorator.classdecorator method)": [[16, "ax.utils.common.decorator.ClassDecorator.decorate_class"]], "deserialize_init_args() (ax.utils.common.serialization.serializationmixin class method)": [[16, "ax.utils.common.serialization.SerializationMixin.deserialize_init_args"]], "dim (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpsampling property)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling.dim"]], "disable_logger (class in ax.utils.common.logger)": [[16, "ax.utils.common.logger.disable_logger"]], "disable_loggers (class in ax.utils.common.logger)": [[16, "ax.utils.common.logger.disable_loggers"]], "domain (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[16, "ax.utils.measurement.synthetic_functions.SyntheticFunction.domain"]], "entropy_of_observations() (in module ax.utils.stats.model_fit_stats)": [[16, "ax.utils.stats.model_fit_stats.entropy_of_observations"]], "equality_typechecker() (in module ax.utils.common.equality)": [[16, "ax.utils.common.equality.equality_typechecker"]], "err (ax.utils.common.result.err property)": [[16, "ax.utils.common.result.Err.err"]], "err (ax.utils.common.result.ok property)": [[16, "ax.utils.common.result.Ok.err"]], "err (ax.utils.common.result.result property)": [[16, "ax.utils.common.result.Result.err"]], "errors (ax.utils.flake8_plugins.docstring_checker.docstringcheckervisitor attribute)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor.errors"]], "evaluate() (in module ax.utils.tutorials.cnn_utils)": [[16, "ax.utils.tutorials.cnn_utils.evaluate"]], "evalute_function() (ax.utils.sensitivity.sobol_measures.sobolsensitivity method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivity.evalute_function"]], "experimental_metric_eval() (in module ax.utils.testing.preference_stubs)": [[16, "ax.utils.testing.preference_stubs.experimental_metric_eval"]], "extract_init_args() (in module ax.utils.common.serialization)": [[16, "ax.utils.common.serialization.extract_init_args"]], "f() (ax.utils.measurement.synthetic_functions.syntheticfunction method)": [[16, "ax.utils.measurement.synthetic_functions.SyntheticFunction.f"]], "failed (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorState.failed"]], "failed (ax.utils.testing.backend_simulator.simstatus attribute)": [[16, "ax.utils.testing.backend_simulator.SimStatus.failed"], [16, "id1"]], "failure_rate (ax.utils.testing.backend_simulator.backendsimulatoroptions attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorOptions.failure_rate"]], "fast_botorch_optimize() (in module ax.utils.testing.mock)": [[16, "ax.utils.testing.mock.fast_botorch_optimize"]], "fast_botorch_optimize_context_manager() (in module ax.utils.testing.mock)": [[16, "ax.utils.testing.mock.fast_botorch_optimize_context_manager"]], "fetch_trial_data() (ax.utils.testing.metrics.backend_simulator_map.backendsimulatortimestampmapmetric method)": [[16, "ax.utils.testing.metrics.backend_simulator_map.BackendSimulatorTimestampMapMetric.fetch_trial_data"]], "fikename (ax.utils.flake8_plugins.docstring_checker.docstringchecker attribute)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker.fikename"]], "filter() (ax.utils.common.logger.axoutputnamefilter method)": [[16, "ax.utils.common.logger.AxOutputNameFilter.filter"]], "filter_kwargs() (in module ax.utils.common.kwargs)": [[16, "ax.utils.common.kwargs.filter_kwargs"]], "first_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivity method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivity.first_order_indices"]], "first_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpmean method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPMean.first_order_indices"]], "first_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpsampling method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling.first_order_indices"]], "fmax (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[16, "ax.utils.measurement.synthetic_functions.SyntheticFunction.fmax"]], "fmin (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[16, "ax.utils.measurement.synthetic_functions.SyntheticFunction.fmin"]], "format() (in module ax.utils.testing.backend_simulator)": [[16, "ax.utils.testing.backend_simulator.format"]], "forward() (ax.utils.tutorials.cnn_utils.cnn method)": [[16, "ax.utils.tutorials.cnn_utils.CNN.forward"]], "from_botorch() (in module ax.utils.measurement.synthetic_functions)": [[16, "ax.utils.measurement.synthetic_functions.from_botorch"]], "from_state() (ax.utils.testing.backend_simulator.backendsimulator class method)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.from_state"]], "gen_for_multiple_trials_with_multiple_models() (ax.utils.testing.core_stubs.specialgenerationstrategy method)": [[16, "ax.utils.testing.core_stubs.SpecialGenerationStrategy.gen_for_multiple_trials_with_multiple_models"]], "generate_all_input_matrix() (ax.utils.sensitivity.sobol_measures.sobolsensitivity method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivity.generate_all_input_matrix"]], "generator_runs() (ax.utils.testing.core_stubs.testtrial method)": [[16, "ax.utils.testing.core_stubs.TestTrial.generator_runs"]], "generic_equals() (in module ax.utils.testing.utils)": [[16, "ax.utils.testing.utils.generic_equals"]], "get_kxx_inv() (in module ax.utils.sensitivity.derivative_gp)": [[16, "ax.utils.sensitivity.derivative_gp.get_KXX_inv"]], "get_kxx_dx() (in module ax.utils.sensitivity.derivative_gp)": [[16, "ax.utils.sensitivity.derivative_gp.get_KxX_dx"]], "get_kxx_dx2() (in module ax.utils.sensitivity.derivative_gp)": [[16, "ax.utils.sensitivity.derivative_gp.get_Kxx_dx2"]], "get_abandoned_arm() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_abandoned_arm"]], "get_acquisition_function_type() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_acquisition_function_type"]], "get_acquisition_type() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_acquisition_type"]], "get_aggregated_benchmark_result() (in module ax.utils.testing.benchmark_stubs)": [[16, "ax.utils.testing.benchmark_stubs.get_aggregated_benchmark_result"]], "get_and_early_stopping_strategy() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_and_early_stopping_strategy"]], "get_arm() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_arm"]], "get_arm_weights1() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_arm_weights1"]], "get_arm_weights2() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_arm_weights2"]], "get_arms() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_arms"]], "get_arms_from_dict() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_arms_from_dict"]], "get_augmented_branin_metric() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_augmented_branin_metric"]], "get_augmented_branin_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_augmented_branin_objective"]], "get_augmented_branin_optimization_config() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_augmented_branin_optimization_config"]], "get_augmented_hartmann_metric() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_augmented_hartmann_metric"]], "get_augmented_hartmann_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_augmented_hartmann_objective"]], "get_augmented_hartmann_optimization_config() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_augmented_hartmann_optimization_config"]], "get_batch_trial() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_batch_trial"]], "get_batch_trial_with_repeated_arms() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_batch_trial_with_repeated_arms"]], "get_benchmark_result() (in module ax.utils.testing.benchmark_stubs)": [[16, "ax.utils.testing.benchmark_stubs.get_benchmark_result"]], "get_botorch_model() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_botorch_model"]], "get_botorch_model_with_default_acquisition_class() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_botorch_model_with_default_acquisition_class"]], "get_botorch_model_with_surrogate_specs() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_botorch_model_with_surrogate_specs"]], "get_branin_arms() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_arms"]], "get_branin_data() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_data"]], "get_branin_data_batch() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_data_batch"]], "get_branin_data_multi_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_data_multi_objective"]], "get_branin_experiment() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_experiment"]], "get_branin_experiment_with_multi_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_experiment_with_multi_objective"]], "get_branin_experiment_with_status_quo_trials() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_experiment_with_status_quo_trials"]], "get_branin_experiment_with_timestamp_map_metric() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_experiment_with_timestamp_map_metric"]], "get_branin_metric() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_metric"]], "get_branin_multi_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_multi_objective"]], "get_branin_multi_objective_optimization_config() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_multi_objective_optimization_config"]], "get_branin_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_objective"]], "get_branin_optimization_config() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_optimization_config"]], "get_branin_outcome_constraint() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_outcome_constraint"]], "get_branin_search_space() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_search_space"]], "get_branin_with_multi_task() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_branin_with_multi_task"]], "get_chained_input_transform() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_chained_input_transform"]], "get_choice_parameter() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_choice_parameter"]], "get_constrained_multi_objective_benchmark_problem() (in module ax.utils.testing.benchmark_stubs)": [[16, "ax.utils.testing.benchmark_stubs.get_constrained_multi_objective_benchmark_problem"]], "get_custom_multi_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_custom_multi_objective"]], "get_data() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_data"]], "get_dataset() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_dataset"]], "get_default_scheduler_options() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_default_scheduler_options"]], "get_dict_lookup_metric() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_dict_lookup_metric"]], "get_discrete_search_space() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_discrete_search_space"]], "get_experiment() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment"]], "get_experiment_for_value() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_experiment_for_value"]], "get_experiment_with_batch_and_single_trial() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_batch_and_single_trial"]], "get_experiment_with_batch_trial() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_batch_trial"]], "get_experiment_with_custom_runner_and_metric() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_custom_runner_and_metric"]], "get_experiment_with_data() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_data"]], "get_experiment_with_map_data() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_map_data"]], "get_experiment_with_map_data_type() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_map_data_type"]], "get_experiment_with_multi_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_multi_objective"]], "get_experiment_with_observations() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_observations"]], "get_experiment_with_repeated_arms() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_repeated_arms"]], "get_experiment_with_scalarized_objective_and_outcome_constraint() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_scalarized_objective_and_outcome_constraint"]], "get_experiment_with_trial() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_trial"]], "get_experiment_with_trial_with_ttl() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_experiment_with_trial_with_ttl"]], "get_factorial_experiment() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_factorial_experiment"]], "get_factorial_metric() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_factorial_metric"]], "get_factorial_search_space() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_factorial_search_space"]], "get_fixed_parameter() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_fixed_parameter"]], "get_function_argument_names() (in module ax.utils.common.kwargs)": [[16, "ax.utils.common.kwargs.get_function_argument_names"]], "get_function_default_arguments() (in module ax.utils.common.kwargs)": [[16, "ax.utils.common.kwargs.get_function_default_arguments"]], "get_gamma_prior() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_gamma_prior"]], "get_generation_strategy() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_generation_strategy"]], "get_generator_run() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_generator_run"]], "get_generator_run2() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_generator_run2"]], "get_hartmann_metric() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_hartmann_metric"]], "get_hartmann_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_hartmann_objective"]], "get_hartmann_optimization_config() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_hartmann_optimization_config"]], "get_hartmann_search_space() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_hartmann_search_space"]], "get_hierarchical_search_space() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_hierarchical_search_space"]], "get_hierarchical_search_space_experiment() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_hierarchical_search_space_experiment"]], "get_high_dimensional_branin_experiment() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_high_dimensional_branin_experiment"]], "get_hss_trials_with_fixed_parameter() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_hss_trials_with_fixed_parameter"]], "get_improvement_global_stopping_strategy() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_improvement_global_stopping_strategy"]], "get_input_transform_type() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_input_transform_type"]], "get_interval() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_interval"]], "get_l2_reg_weight_parameter() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_l2_reg_weight_parameter"]], "get_large_factorial_search_space() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_large_factorial_search_space"]], "get_large_ordinal_search_space() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_large_ordinal_search_space"]], "get_legacy_list_surrogate_generation_step_as_dict() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_legacy_list_surrogate_generation_step_as_dict"]], "get_logger() (in module ax.utils.common.logger)": [[16, "ax.utils.common.logger.get_logger"]], "get_lr_parameter() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_lr_parameter"]], "get_many_branin_objective_opt_config() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_many_branin_objective_opt_config"]], "get_map_data() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_map_data"]], "get_map_key_info() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_map_key_info"]], "get_map_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_map_objective"]], "get_map_optimization_config() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_map_optimization_config"]], "get_metric() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_metric"]], "get_mll_type() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_mll_type"]], "get_model_covariance() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_model_covariance"]], "get_model_mean() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_model_mean"]], "get_model_parameter() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_model_parameter"]], "get_model_predictions() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_model_predictions"]], "get_model_predictions_per_arm() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_model_predictions_per_arm"]], "get_model_type() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_model_type"]], "get_moo_surrogate() (in module ax.utils.testing.benchmark_stubs)": [[16, "ax.utils.testing.benchmark_stubs.get_moo_surrogate"]], "get_multi_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_multi_objective"]], "get_multi_objective_benchmark_problem() (in module ax.utils.testing.benchmark_stubs)": [[16, "ax.utils.testing.benchmark_stubs.get_multi_objective_benchmark_problem"]], "get_multi_objective_optimization_config() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_multi_objective_optimization_config"]], "get_multi_type_experiment() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_multi_type_experiment"]], "get_multi_type_experiment_with_multi_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_multi_type_experiment_with_multi_objective"]], "get_non_monolithic_branin_moo_data() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_non_monolithic_branin_moo_data"]], "get_num_boost_rounds_parameter() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_num_boost_rounds_parameter"]], "get_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_objective"]], "get_objective_threshold() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_objective_threshold"]], "get_observation() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_observation"]], "get_observation1() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_observation1"]], "get_observation1trans() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_observation1trans"]], "get_observation2() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_observation2"]], "get_observation2trans() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_observation2trans"]], "get_observation_features() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_observation_features"]], "get_observation_status_quo0() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_observation_status_quo0"]], "get_observation_status_quo1() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_observation_status_quo1"]], "get_observations_with_invalid_value() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_observations_with_invalid_value"]], "get_online_sobol_gpei_generation_strategy() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_online_sobol_gpei_generation_strategy"]], "get_optimization_config() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_optimization_config"]], "get_optimization_config_no_constraints() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_optimization_config_no_constraints"]], "get_or_early_stopping_strategy() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_or_early_stopping_strategy"]], "get_order_constraint() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_order_constraint"]], "get_ordered_choice_parameter() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_ordered_choice_parameter"]], "get_outcome_constraint() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_outcome_constraint"]], "get_outcome_transfrom_type() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_outcome_transfrom_type"]], "get_parameter_constraint() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_parameter_constraint"]], "get_parameter_distribution() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_parameter_distribution"]], "get_partition_data_loaders() (in module ax.utils.tutorials.cnn_utils)": [[16, "ax.utils.tutorials.cnn_utils.get_partition_data_loaders"]], "get_pathlib_path() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_pathlib_path"]], "get_pbo_experiment() (in module ax.utils.testing.preference_stubs)": [[16, "ax.utils.testing.preference_stubs.get_pbo_experiment"]], "get_percentile_early_stopping_strategy() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_percentile_early_stopping_strategy"]], "get_percentile_early_stopping_strategy_with_non_objective_metric_name() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_percentile_early_stopping_strategy_with_non_objective_metric_name"]], "get_range_parameter() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_range_parameter"]], "get_range_parameter2() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_range_parameter2"]], "get_risk_measure() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_risk_measure"]], "get_robust_branin_experiment() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_robust_branin_experiment"]], "get_robust_search_space() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_robust_search_space"]], "get_robust_search_space_environmental() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_robust_search_space_environmental"]], "get_scalarized_objective() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_scalarized_objective"]], "get_scalarized_outcome_constraint() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_scalarized_outcome_constraint"]], "get_scheduler_options_batch_trial() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_scheduler_options_batch_trial"]], "get_search_space() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_search_space"]], "get_search_space_for_range_value() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_search_space_for_range_value"]], "get_search_space_for_range_values() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_search_space_for_range_values"]], "get_search_space_for_value() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_search_space_for_value"]], "get_search_space_with_choice_parameters() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_search_space_with_choice_parameters"]], "get_sebo_acquisition_class() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_sebo_acquisition_class"]], "get_sim_trial_by_index() (ax.utils.testing.backend_simulator.backendsimulator method)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.get_sim_trial_by_index"]], "get_single_objective_benchmark_problem() (in module ax.utils.testing.benchmark_stubs)": [[16, "ax.utils.testing.benchmark_stubs.get_single_objective_benchmark_problem"]], "get_small_discrete_search_space() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_small_discrete_search_space"]], "get_sobol_benchmark_method() (in module ax.utils.testing.benchmark_stubs)": [[16, "ax.utils.testing.benchmark_stubs.get_sobol_benchmark_method"]], "get_sobol_gpei_benchmark_method() (in module ax.utils.testing.benchmark_stubs)": [[16, "ax.utils.testing.benchmark_stubs.get_sobol_gpei_benchmark_method"]], "get_soo_surrogate() (in module ax.utils.testing.benchmark_stubs)": [[16, "ax.utils.testing.benchmark_stubs.get_soo_surrogate"]], "get_status_quo() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_status_quo"]], "get_sum_constraint1() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_sum_constraint1"]], "get_sum_constraint2() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_sum_constraint2"]], "get_surrogate() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_surrogate"]], "get_surrogate_as_dict() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_surrogate_as_dict"]], "get_surrogate_generation_step() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_surrogate_generation_step"]], "get_surrogate_spec_as_dict() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_surrogate_spec_as_dict"]], "get_surrogate_spec_with_default() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_surrogate_spec_with_default"]], "get_surrogate_spec_with_lognormal() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_surrogate_spec_with_lognormal"]], "get_synthetic_runner() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_synthetic_runner"]], "get_task_choice_parameter() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_task_choice_parameter"]], "get_test_map_data_experiment() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_test_map_data_experiment"]], "get_threshold_early_stopping_strategy() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_threshold_early_stopping_strategy"]], "get_torch_test_data() (in module ax.utils.testing.torch_stubs)": [[16, "ax.utils.testing.torch_stubs.get_torch_test_data"]], "get_transform_type() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.get_transform_type"]], "get_trial() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_trial"]], "get_trial_based_criterion() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_trial_based_criterion"]], "get_weights() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_weights"]], "get_weights_from_dict() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_weights_from_dict"]], "get_winsorization_config() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.get_winsorization_config"]], "gradient_absolute_measure() (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean method)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.gradient_absolute_measure"]], "gradient_measure() (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean method)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.gradient_measure"]], "gradients_square_measure() (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean method)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.gradients_square_measure"]], "h2_html() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.h2_html"]], "h3_html() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.h3_html"]], "handle_exceptions_in_retries() (in module ax.utils.common.executils)": [[16, "ax.utils.common.executils.handle_exceptions_in_retries"]], "informative_failure_on_none() (ax.utils.measurement.synthetic_functions.syntheticfunction method)": [[16, "ax.utils.measurement.synthetic_functions.SyntheticFunction.informative_failure_on_none"]], "init_notebook_plotting() (in module ax.utils.notebook.plotting)": [[16, "ax.utils.notebook.plotting.init_notebook_plotting"]], "internal_clock (ax.utils.testing.backend_simulator.backendsimulatoroptions attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorOptions.internal_clock"]], "inverse_variance_weight() (in module ax.utils.stats.statstools)": [[16, "ax.utils.stats.statstools.inverse_variance_weight"]], "is_ax_equal() (in module ax.utils.common.equality)": [[16, "ax.utils.common.equality.is_ax_equal"]], "is_copy_doc_call() (in module ax.utils.flake8_plugins.docstring_checker)": [[16, "ax.utils.flake8_plugins.docstring_checker.is_copy_doc_call"]], "is_err() (ax.utils.common.result.err method)": [[16, "ax.utils.common.result.Err.is_err"]], "is_err() (ax.utils.common.result.ok method)": [[16, "ax.utils.common.result.Ok.is_err"]], "is_err() (ax.utils.common.result.result method)": [[16, "ax.utils.common.result.Result.is_err"]], "is_ok() (ax.utils.common.result.err method)": [[16, "ax.utils.common.result.Err.is_ok"]], "is_ok() (ax.utils.common.result.ok method)": [[16, "ax.utils.common.result.Ok.is_ok"]], "is_ok() (ax.utils.common.result.result method)": [[16, "ax.utils.common.result.Result.is_ok"]], "lineno (ax.utils.flake8_plugins.docstring_checker.error attribute)": [[16, "ax.utils.flake8_plugins.docstring_checker.Error.lineno"]], "link_html() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.link_html"]], "list_item_html() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.list_item_html"]], "load_mnist() (in module ax.utils.tutorials.cnn_utils)": [[16, "ax.utils.tutorials.cnn_utils.load_mnist"]], "lookup_trial_index_status() (ax.utils.testing.backend_simulator.backendsimulator method)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.lookup_trial_index_status"]], "make_indices_str() (in module ax.utils.common.logger)": [[16, "ax.utils.common.logger.make_indices_str"]], "map() (ax.utils.common.result.err method)": [[16, "ax.utils.common.result.Err.map"]], "map() (ax.utils.common.result.ok method)": [[16, "ax.utils.common.result.Ok.map"]], "map() (ax.utils.common.result.result method)": [[16, "ax.utils.common.result.Result.map"]], "map_err() (ax.utils.common.result.err method)": [[16, "ax.utils.common.result.Err.map_err"]], "map_err() (ax.utils.common.result.ok method)": [[16, "ax.utils.common.result.Ok.map_err"]], "map_err() (ax.utils.common.result.result method)": [[16, "ax.utils.common.result.Result.map_err"]], "map_or() (ax.utils.common.result.err method)": [[16, "ax.utils.common.result.Err.map_or"]], "map_or() (ax.utils.common.result.ok method)": [[16, "ax.utils.common.result.Ok.map_or"]], "map_or() (ax.utils.common.result.result method)": [[16, "ax.utils.common.result.Result.map_or"]], "map_or_else() (ax.utils.common.result.err method)": [[16, "ax.utils.common.result.Err.map_or_else"]], "map_or_else() (ax.utils.common.result.ok method)": [[16, "ax.utils.common.result.Ok.map_or_else"]], "map_or_else() (ax.utils.common.result.result method)": [[16, "ax.utils.common.result.Result.map_or_else"]], "marginal_effects() (in module ax.utils.stats.statstools)": [[16, "ax.utils.stats.statstools.marginal_effects"]], "max_concurrency (ax.utils.testing.backend_simulator.backendsimulatoroptions attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorOptions.max_concurrency"]], "maximums (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[16, "ax.utils.measurement.synthetic_functions.SyntheticFunction.maximums"]], "mean_gradients (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean attribute)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.mean_gradients"]], "mean_gradients_btsp (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean attribute)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.mean_gradients_btsp"]], "mean_of_the_standardized_error() (in module ax.utils.stats.model_fit_stats)": [[16, "ax.utils.stats.model_fit_stats.mean_of_the_standardized_error"]], "message (ax.utils.flake8_plugins.docstring_checker.error attribute)": [[16, "ax.utils.flake8_plugins.docstring_checker.Error.message"]], "minimums (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[16, "ax.utils.measurement.synthetic_functions.SyntheticFunction.minimums"]], "mock_patch_method_original() (in module ax.utils.common.mock)": [[16, "ax.utils.common.mock.mock_patch_method_original"]], "name (ax.utils.flake8_plugins.docstring_checker.docstringchecker attribute)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker.name"]], "name (ax.utils.measurement.synthetic_functions.frombotorch property)": [[16, "ax.utils.measurement.synthetic_functions.FromBotorch.name"]], "name (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[16, "ax.utils.measurement.synthetic_functions.SyntheticFunction.name"]], "named_tuple_to_dict() (in module ax.utils.common.serialization)": [[16, "ax.utils.common.serialization.named_tuple_to_dict"]], "new_error() (in module ax.utils.flake8_plugins.docstring_checker)": [[16, "ax.utils.flake8_plugins.docstring_checker.new_error"]], "new_trial() (ax.utils.testing.backend_simulator.backendsimulator method)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.new_trial"]], "not_none() (in module ax.utils.common.typeutils)": [[16, "ax.utils.common.typeutils.not_none"]], "num_completed (ax.utils.testing.backend_simulator.backendsimulator property)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.num_completed"]], "num_failed (ax.utils.testing.backend_simulator.backendsimulator property)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.num_failed"]], "num_queued (ax.utils.testing.backend_simulator.backendsimulator property)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.num_queued"]], "num_running (ax.utils.testing.backend_simulator.backendsimulator property)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.num_running"]], "numpy_type_to_python_type() (in module ax.utils.common.typeutils_nonnative)": [[16, "ax.utils.common.typeutils_nonnative.numpy_type_to_python_type"]], "object_attribute_dicts_equal() (in module ax.utils.common.equality)": [[16, "ax.utils.common.equality.object_attribute_dicts_equal"]], "object_attribute_dicts_find_unequal_fields() (in module ax.utils.common.equality)": [[16, "ax.utils.common.equality.object_attribute_dicts_find_unequal_fields"]], "ok (ax.utils.common.result.err property)": [[16, "ax.utils.common.result.Err.ok"]], "ok (ax.utils.common.result.ok property)": [[16, "ax.utils.common.result.Ok.ok"]], "ok (ax.utils.common.result.result property)": [[16, "ax.utils.common.result.Result.ok"]], "options (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorState.options"]], "p_html() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.p_html"]], "pairwise_pref_metric_eval() (in module ax.utils.testing.preference_stubs)": [[16, "ax.utils.testing.preference_stubs.pairwise_pref_metric_eval"]], "positive_part_james_stein() (in module ax.utils.stats.statstools)": [[16, "ax.utils.stats.statstools.positive_part_james_stein"]], "posterior_derivative() (in module ax.utils.sensitivity.derivative_gp)": [[16, "ax.utils.sensitivity.derivative_gp.posterior_derivative"]], "queued (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorState.queued"]], "queued (ax.utils.testing.backend_simulator.simstatus attribute)": [[16, "ax.utils.testing.backend_simulator.SimStatus.queued"], [16, "id2"]], "relativize() (in module ax.utils.stats.statstools)": [[16, "ax.utils.stats.statstools.relativize"]], "relativize_data() (in module ax.utils.stats.statstools)": [[16, "ax.utils.stats.statstools.relativize_data"]], "render() (in module ax.utils.notebook.plotting)": [[16, "ax.utils.notebook.plotting.render"]], "render_report_elements() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.render_report_elements"]], "required_dimensionality (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[16, "ax.utils.measurement.synthetic_functions.SyntheticFunction.required_dimensionality"]], "reset() (ax.utils.testing.backend_simulator.backendsimulator method)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.reset"]], "retry_on_exception() (in module ax.utils.common.executils)": [[16, "ax.utils.common.executils.retry_on_exception"]], "run() (ax.utils.flake8_plugins.docstring_checker.docstringchecker method)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker.run"]], "run() (ax.utils.testing.core_stubs.customtestrunner method)": [[16, "ax.utils.testing.core_stubs.CustomTestRunner.run"]], "run_branin_experiment_with_generation_strategy() (in module ax.utils.testing.core_stubs)": [[16, "ax.utils.testing.core_stubs.run_branin_experiment_with_generation_strategy"]], "run_trial() (ax.utils.testing.backend_simulator.backendsimulator method)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.run_trial"]], "running (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorState.running"]], "running (ax.utils.testing.backend_simulator.simstatus attribute)": [[16, "ax.utils.testing.backend_simulator.SimStatus.running"], [16, "id3"]], "same_elements() (in module ax.utils.common.equality)": [[16, "ax.utils.common.equality.same_elements"]], "sample_discrete_parameters() (in module ax.utils.sensitivity.derivative_measures)": [[16, "ax.utils.sensitivity.derivative_measures.sample_discrete_parameters"]], "samples_gradients (ax.utils.sensitivity.derivative_measures.gpdgsmgpsampling attribute)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpSampling.samples_gradients"]], "samples_gradients_btsp (ax.utils.sensitivity.derivative_measures.gpdgsmgpsampling attribute)": [[16, "ax.utils.sensitivity.derivative_measures.GpDGSMGpSampling.samples_gradients_btsp"]], "second_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivity method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivity.second_order_indices"]], "second_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpmean method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPMean.second_order_indices"]], "second_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpsampling method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling.second_order_indices"]], "serialize_init_args() (ax.utils.common.serialization.serializationmixin class method)": [[16, "ax.utils.common.serialization.SerializationMixin.serialize_init_args"]], "serialize_init_args() (in module ax.utils.common.serialization)": [[16, "ax.utils.common.serialization.serialize_init_args"]], "setup() (ax.utils.common.testutils.testcase method)": [[16, "ax.utils.common.testutils.TestCase.setUp"]], "set_rng_seed() (in module ax.utils.common.random)": [[16, "ax.utils.common.random.set_rng_seed"]], "set_stderr_log_level() (in module ax.utils.common.logger)": [[16, "ax.utils.common.logger.set_stderr_log_level"]], "should_check() (in module ax.utils.flake8_plugins.docstring_checker)": [[16, "ax.utils.flake8_plugins.docstring_checker.should_check"]], "should_stop_trials_early() (ax.utils.testing.backend_scheduler.asyncsimulatedbackendscheduler method)": [[16, "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler.should_stop_trials_early"]], "should_stop_trials_early() (ax.utils.testing.core_stubs.dummyearlystoppingstrategy method)": [[16, "ax.utils.testing.core_stubs.DummyEarlyStoppingStrategy.should_stop_trials_early"]], "silence_stderr() (ax.utils.common.testutils.testcase static method)": [[16, "ax.utils.common.testutils.TestCase.silence_stderr"]], "sim_completed_time (ax.utils.testing.backend_simulator.simtrial attribute)": [[16, "ax.utils.testing.backend_simulator.SimTrial.sim_completed_time"], [16, "id5"]], "sim_queued_time (ax.utils.testing.backend_simulator.simtrial attribute)": [[16, "ax.utils.testing.backend_simulator.SimTrial.sim_queued_time"], [16, "id6"]], "sim_runtime (ax.utils.testing.backend_simulator.simtrial attribute)": [[16, "ax.utils.testing.backend_simulator.SimTrial.sim_runtime"], [16, "id7"]], "sim_start_time (ax.utils.testing.backend_simulator.simtrial attribute)": [[16, "ax.utils.testing.backend_simulator.SimTrial.sim_start_time"], [16, "id8"]], "skip_fit_gpytorch_mll() (in module ax.utils.testing.mock)": [[16, "ax.utils.testing.mock.skip_fit_gpytorch_mll"]], "skip_fit_gpytorch_mll_context_manager() (in module ax.utils.testing.mock)": [[16, "ax.utils.testing.mock.skip_fit_gpytorch_mll_context_manager"]], "sobol_gpei_generation_node_gs() (in module ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.sobol_gpei_generation_node_gs"]], "split_dataset() (in module ax.utils.tutorials.cnn_utils)": [[16, "ax.utils.tutorials.cnn_utils.split_dataset"]], "state() (ax.utils.testing.backend_simulator.backendsimulator method)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.state"]], "status() (ax.utils.testing.backend_simulator.backendsimulator method)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.status"]], "std_of_the_standardized_error() (in module ax.utils.stats.model_fit_stats)": [[16, "ax.utils.stats.model_fit_stats.std_of_the_standardized_error"]], "stop_trial() (ax.utils.testing.backend_simulator.backendsimulator method)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.stop_trial"]], "sum_utility() (in module ax.utils.testing.preference_stubs)": [[16, "ax.utils.testing.preference_stubs.sum_utility"]], "table_cell_html() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.table_cell_html"]], "table_heading_cell_html() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.table_heading_cell_html"]], "table_html() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.table_html"]], "table_row_html() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.table_row_html"]], "test_initfiles() (ax.utils.testing.test_init_files.inittest method)": [[16, "ax.utils.testing.test_init_files.InitTest.test_InitFiles"]], "time (ax.utils.testing.backend_simulator.backendsimulator property)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.time"]], "time_remaining (ax.utils.testing.backend_simulator.simstatus attribute)": [[16, "ax.utils.testing.backend_simulator.SimStatus.time_remaining"], [16, "id4"]], "time_scaling (ax.utils.testing.backend_simulator.backendsimulatoroptions attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorOptions.time_scaling"]], "timestamps_in_range() (in module ax.utils.common.timeutils)": [[16, "ax.utils.common.timeutils.timestamps_in_range"]], "to_ds() (in module ax.utils.common.timeutils)": [[16, "ax.utils.common.timeutils.to_ds"]], "to_ts() (in module ax.utils.common.timeutils)": [[16, "ax.utils.common.timeutils.to_ts"]], "torch_type_from_str() (in module ax.utils.common.typeutils_torch)": [[16, "ax.utils.common.typeutils_torch.torch_type_from_str"]], "torch_type_to_str() (in module ax.utils.common.typeutils_torch)": [[16, "ax.utils.common.typeutils_torch.torch_type_to_str"]], "total_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivity method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivity.total_order_indices"]], "total_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpmean method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPMean.total_order_indices"]], "total_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpsampling method)": [[16, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling.total_order_indices"]], "total_variance() (in module ax.utils.stats.statstools)": [[16, "ax.utils.stats.statstools.total_variance"]], "train() (in module ax.utils.tutorials.cnn_utils)": [[16, "ax.utils.tutorials.cnn_utils.train"]], "transform_1 (class in ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.transform_1"]], "transform_2 (class in ax.utils.testing.modeling_stubs)": [[16, "ax.utils.testing.modeling_stubs.transform_2"]], "transform_observation_features() (ax.utils.testing.modeling_stubs.transform_1 method)": [[16, "ax.utils.testing.modeling_stubs.transform_1.transform_observation_features"]], "transform_observation_features() (ax.utils.testing.modeling_stubs.transform_2 method)": [[16, "ax.utils.testing.modeling_stubs.transform_2.transform_observation_features"]], "transform_optimization_config() (ax.utils.testing.modeling_stubs.transform_1 method)": [[16, "ax.utils.testing.modeling_stubs.transform_1.transform_optimization_config"]], "transform_optimization_config() (ax.utils.testing.modeling_stubs.transform_2 method)": [[16, "ax.utils.testing.modeling_stubs.transform_2.transform_optimization_config"]], "transform_search_space() (ax.utils.testing.modeling_stubs.transform_1 method)": [[16, "ax.utils.testing.modeling_stubs.transform_1.transform_search_space"]], "transform_search_space() (ax.utils.testing.modeling_stubs.transform_2 method)": [[16, "ax.utils.testing.modeling_stubs.transform_2.transform_search_space"]], "tree (ax.utils.flake8_plugins.docstring_checker.docstringchecker attribute)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker.tree"]], "trial_index (ax.utils.testing.backend_simulator.simtrial attribute)": [[16, "ax.utils.testing.backend_simulator.SimTrial.trial_index"], [16, "id9"]], "type (ax.utils.flake8_plugins.docstring_checker.error attribute)": [[16, "ax.utils.flake8_plugins.docstring_checker.Error.type"]], "unixtime_to_pandas_ts() (in module ax.utils.common.timeutils)": [[16, "ax.utils.common.timeutils.unixtime_to_pandas_ts"]], "unordered_list_html() (in module ax.utils.report.render)": [[16, "ax.utils.report.render.unordered_list_html"]], "unrelativize() (in module ax.utils.stats.statstools)": [[16, "ax.utils.stats.statstools.unrelativize"]], "untransform_observation_features() (ax.utils.testing.modeling_stubs.transform_1 method)": [[16, "ax.utils.testing.modeling_stubs.transform_1.untransform_observation_features"]], "untransform_observation_features() (ax.utils.testing.modeling_stubs.transform_2 method)": [[16, "ax.utils.testing.modeling_stubs.transform_2.untransform_observation_features"]], "unwrap() (ax.utils.common.result.err method)": [[16, "ax.utils.common.result.Err.unwrap"]], "unwrap() (ax.utils.common.result.ok method)": [[16, "ax.utils.common.result.Ok.unwrap"]], "unwrap() (ax.utils.common.result.result method)": [[16, "ax.utils.common.result.Result.unwrap"]], "unwrap_err() (ax.utils.common.result.err method)": [[16, "ax.utils.common.result.Err.unwrap_err"]], "unwrap_err() (ax.utils.common.result.ok method)": [[16, "ax.utils.common.result.Ok.unwrap_err"]], "unwrap_err() (ax.utils.common.result.result method)": [[16, "ax.utils.common.result.Result.unwrap_err"]], "unwrap_or() (ax.utils.common.result.err method)": [[16, "ax.utils.common.result.Err.unwrap_or"]], "unwrap_or() (ax.utils.common.result.ok method)": [[16, "ax.utils.common.result.Ok.unwrap_or"]], "unwrap_or() (ax.utils.common.result.result method)": [[16, "ax.utils.common.result.Result.unwrap_or"]], "unwrap_or_else() (ax.utils.common.result.err method)": [[16, "ax.utils.common.result.Err.unwrap_or_else"]], "unwrap_or_else() (ax.utils.common.result.ok method)": [[16, "ax.utils.common.result.Ok.unwrap_or_else"]], "unwrap_or_else() (ax.utils.common.result.result method)": [[16, "ax.utils.common.result.Result.unwrap_or_else"]], "update() (ax.utils.testing.backend_simulator.backendsimulator method)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.update"]], "use_internal_clock (ax.utils.testing.backend_simulator.backendsimulator property)": [[16, "ax.utils.testing.backend_simulator.BackendSimulator.use_internal_clock"]], "use_update_as_start_time (ax.utils.testing.backend_simulator.backendsimulatoroptions attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorOptions.use_update_as_start_time"]], "validate_kwarg_typing() (in module ax.utils.common.kwargs)": [[16, "ax.utils.common.kwargs.validate_kwarg_typing"]], "value (ax.utils.common.result.err property)": [[16, "ax.utils.common.result.Err.value"]], "value (ax.utils.common.result.ok property)": [[16, "ax.utils.common.result.Ok.value"]], "value (ax.utils.common.result.result property)": [[16, "ax.utils.common.result.Result.value"]], "verbose_logging (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[16, "ax.utils.testing.backend_simulator.BackendSimulatorState.verbose_logging"]], "version (ax.utils.flake8_plugins.docstring_checker.docstringchecker attribute)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker.version"]], "version_safe_check_type() (in module ax.utils.common.typeutils_nonnative)": [[16, "ax.utils.common.typeutils_nonnative.version_safe_check_type"]], "visit_asyncfunctiondef() (ax.utils.flake8_plugins.docstring_checker.docstringcheckervisitor method)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor.visit_AsyncFunctionDef"]], "visit_classdef() (ax.utils.flake8_plugins.docstring_checker.docstringcheckervisitor method)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor.visit_ClassDef"]], "visit_functiondef() (ax.utils.flake8_plugins.docstring_checker.docstringcheckervisitor method)": [[16, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor.visit_FunctionDef"]], "warn_on_kwargs() (in module ax.utils.common.kwargs)": [[16, "ax.utils.common.kwargs.warn_on_kwargs"]], "with_rng_seed() (in module ax.utils.common.random)": [[16, "ax.utils.common.random.with_rng_seed"]]}})